{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { get } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { CheckboxSlot } from \"./checkbox.props\";\n\nclass Checkbox extends Foundation {\n  /**\n   * Define constructor\n   */\n  constructor(props) {\n    super(props);\n    /**\n     * Handled props instantiation\n     */\n\n    this.handledProps = {\n      checked: void 0,\n      disabled: void 0,\n      inputId: void 0,\n      indeterminate: void 0,\n      label: void 0,\n      managedClasses: void 0,\n      name: void 0,\n      onChange: void 0,\n      value: void 0\n    };\n    /**\n     * Handles onChange as a controlled component\n     */\n\n    this.handleCheckboxChange = e => {\n      if (typeof this.props.checked !== \"boolean\") {\n        this.setState({\n          checked: !this.state.checked\n        });\n      }\n\n      if (typeof this.props.onChange === \"function\") {\n        this.props.onChange(e);\n      }\n    };\n\n    this.state = {\n      checked: this.props.checked || false\n    };\n    this.inputRef = React.createRef();\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof nextProps.checked === \"boolean\" && nextProps.checked !== prevState.checked) {\n      return {\n        checked: nextProps.checked\n      };\n    }\n\n    return null;\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  componentDidMount() {\n    this.applyIndeterminateState();\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  componentDidUpdate() {\n    this.applyIndeterminateState();\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    const _this$props$managedCl = this.props.managedClasses,\n          checkbox_input = _this$props$managedCl.checkbox_input,\n          checkbox_stateIndicator = _this$props$managedCl.checkbox_stateIndicator;\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      className: this.generateClassNames()\n    }), React.createElement(\"input\", {\n      className: classNames(checkbox_input),\n      id: this.props.inputId,\n      name: this.props.name,\n      type: \"checkbox\",\n      ref: this.inputRef,\n      onChange: this.handleCheckboxChange,\n      disabled: this.props.disabled || null,\n      checked: this.state.checked,\n      value: this.props.value\n    }), React.createElement(\"span\", {\n      className: classNames(checkbox_stateIndicator)\n    }), this.renderLabelBySlot(), this.renderLabel());\n  }\n  /**\n   * Generates class names\n   */\n\n\n  generateClassNames() {\n    const _this$props$managedCl2 = this.props.managedClasses,\n          checkbox = _this$props$managedCl2.checkbox,\n          checkbox__disabled = _this$props$managedCl2.checkbox__disabled,\n          checkbox__checked = _this$props$managedCl2.checkbox__checked,\n          checkbox__indeterminate = _this$props$managedCl2.checkbox__indeterminate;\n    return super.generateClassNames(classNames(checkbox, [checkbox__disabled, this.props.disabled], [checkbox__checked, this.state.checked], [checkbox__indeterminate, this.props.indeterminate]));\n  }\n  /**\n   * @deprecated - remove this method in next major version\n   * Render label if it exists\n   */\n\n\n  renderLabelBySlot() {\n    return React.Children.map(this.withSlot(CheckboxSlot.label), label => {\n      let className = this.props.managedClasses.checkbox_label;\n\n      if (typeof className !== \"string\") {\n        return label;\n      }\n\n      const labelClassName = get(label, \"props.className\");\n\n      if (typeof labelClassName === \"string\") {\n        className = `${labelClassName} ${className}`;\n      }\n\n      return React.cloneElement(label, {\n        className\n      });\n    });\n  }\n\n  renderLabel() {\n    const checkbox_label = this.props.managedClasses.checkbox_label;\n\n    if (typeof this.props.label === \"function\") {\n      return this.props.label(classNames(checkbox_label));\n    }\n  }\n  /**\n   * Apply indeterminate state to items that are indeterminate.\n   * This method should be called after render because it relies on element references.\n   */\n\n\n  applyIndeterminateState() {\n    if (this.props.indeterminate && this.inputRef.current) {\n      this.inputRef.current.indeterminate = this.props.indeterminate;\n    }\n  }\n\n}\n\nCheckbox.displayName = `${DisplayNamePrefix}Checkbox`;\nCheckbox.defaultProps = {\n  managedClasses: {}\n};\nexport default Checkbox;\nexport * from \"./checkbox.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/checkbox/checkbox.js"],"names":["Foundation","classNames","get","React","DisplayNamePrefix","CheckboxSlot","Checkbox","constructor","props","handledProps","checked","disabled","inputId","indeterminate","label","managedClasses","name","onChange","value","handleCheckboxChange","e","setState","state","inputRef","createRef","getDerivedStateFromProps","nextProps","prevState","componentDidMount","applyIndeterminateState","componentDidUpdate","render","checkbox_input","checkbox_stateIndicator","createElement","Object","assign","unhandledProps","className","generateClassNames","id","type","ref","renderLabelBySlot","renderLabel","checkbox","checkbox__disabled","checkbox__checked","checkbox__indeterminate","Children","map","withSlot","checkbox_label","labelClassName","cloneElement","current","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { get } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { CheckboxSlot, } from \"./checkbox.props\";\nclass Checkbox extends Foundation {\n    /**\n     * Define constructor\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Handled props instantiation\n         */\n        this.handledProps = {\n            checked: void 0,\n            disabled: void 0,\n            inputId: void 0,\n            indeterminate: void 0,\n            label: void 0,\n            managedClasses: void 0,\n            name: void 0,\n            onChange: void 0,\n            value: void 0,\n        };\n        /**\n         * Handles onChange as a controlled component\n         */\n        this.handleCheckboxChange = (e) => {\n            if (typeof this.props.checked !== \"boolean\") {\n                this.setState({ checked: !this.state.checked });\n            }\n            if (typeof this.props.onChange === \"function\") {\n                this.props.onChange(e);\n            }\n        };\n        this.state = {\n            checked: this.props.checked || false,\n        };\n        this.inputRef = React.createRef();\n    }\n    /**\n     * React life-cycle method\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (typeof nextProps.checked === \"boolean\" &&\n            nextProps.checked !== prevState.checked) {\n            return {\n                checked: nextProps.checked,\n            };\n        }\n        return null;\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidMount() {\n        this.applyIndeterminateState();\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidUpdate() {\n        this.applyIndeterminateState();\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const { checkbox_input, checkbox_stateIndicator, } = this.props.managedClasses;\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames() }),\n            React.createElement(\"input\", { className: classNames(checkbox_input), id: this.props.inputId, name: this.props.name, type: \"checkbox\", ref: this.inputRef, onChange: this.handleCheckboxChange, disabled: this.props.disabled || null, checked: this.state.checked, value: this.props.value }),\n            React.createElement(\"span\", { className: classNames(checkbox_stateIndicator) }),\n            this.renderLabelBySlot(),\n            this.renderLabel()));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { checkbox, checkbox__disabled, checkbox__checked, checkbox__indeterminate, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(checkbox, [checkbox__disabled, this.props.disabled], [checkbox__checked, this.state.checked], [checkbox__indeterminate, this.props.indeterminate]));\n    }\n    /**\n     * @deprecated - remove this method in next major version\n     * Render label if it exists\n     */\n    renderLabelBySlot() {\n        return React.Children.map(this.withSlot(CheckboxSlot.label), (label) => {\n            let className = this.props.managedClasses.checkbox_label;\n            if (typeof className !== \"string\") {\n                return label;\n            }\n            const labelClassName = get(label, \"props.className\");\n            if (typeof labelClassName === \"string\") {\n                className = `${labelClassName} ${className}`;\n            }\n            return React.cloneElement(label, { className });\n        });\n    }\n    renderLabel() {\n        const { checkbox_label } = this.props.managedClasses;\n        if (typeof this.props.label === \"function\") {\n            return this.props.label(classNames(checkbox_label));\n        }\n    }\n    /**\n     * Apply indeterminate state to items that are indeterminate.\n     * This method should be called after render because it relies on element references.\n     */\n    applyIndeterminateState() {\n        if (this.props.indeterminate && this.inputRef.current) {\n            this.inputRef.current.indeterminate = this.props.indeterminate;\n        }\n    }\n}\nCheckbox.displayName = `${DisplayNamePrefix}Checkbox`;\nCheckbox.defaultProps = {\n    managedClasses: {},\n};\nexport default Checkbox;\nexport * from \"./checkbox.props\";\n"]},"metadata":{},"sourceType":"module"}