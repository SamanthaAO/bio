{"ast":null,"code":"// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\"; // This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n\nexport class ColorHSV {\n  static fromObject(data) {\n    if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {\n      return new ColorHSV(data.h, data.s, data.v);\n    }\n\n    return null;\n  }\n\n  constructor(hue, sat, val) {\n    this.h = hue;\n    this.s = sat;\n    this.v = val;\n  }\n\n  equalValue(rhs) {\n    return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;\n  }\n\n  roundToPrecision(precision) {\n    return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));\n  }\n\n  toObject() {\n    return {\n      h: this.h,\n      s: this.s,\n      v: this.v\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-hsv.js"],"names":["roundToPrecisionSmall","ColorHSV","fromObject","data","isNaN","h","s","v","constructor","hue","sat","val","equalValue","rhs","roundToPrecision","precision","toObject"],"mappings":"AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC,C,CACA;;AACA,OAAO,MAAMC,QAAN,CAAe;AAClB,SAAOC,UAAP,CAAkBC,IAAlB,EAAwB;AACpB,QAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,CAAN,CAAd,IAA0B,CAACD,KAAK,CAACD,IAAI,CAACG,CAAN,CAAhC,IAA4C,CAACF,KAAK,CAACD,IAAI,CAACI,CAAN,CAAtD,EAAgE;AAC5D,aAAO,IAAIN,QAAJ,CAAaE,IAAI,CAACE,CAAlB,EAAqBF,IAAI,CAACG,CAA1B,EAA6BH,IAAI,CAACI,CAAlC,CAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgB;AACvB,SAAKN,CAAL,GAASI,GAAT;AACA,SAAKH,CAAL,GAASI,GAAT;AACA,SAAKH,CAAL,GAASI,GAAT;AACH;;AACDC,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,WAAO,KAAKR,CAAL,KAAWQ,GAAG,CAACR,CAAf,IAAoB,KAAKC,CAAL,KAAWO,GAAG,CAACP,CAAnC,IAAwC,KAAKC,CAAL,KAAWM,GAAG,CAACN,CAA9D;AACH;;AACDO,EAAAA,gBAAgB,CAACC,SAAD,EAAY;AACxB,WAAO,IAAId,QAAJ,CAAaD,qBAAqB,CAAC,KAAKK,CAAN,EAASU,SAAT,CAAlC,EAAuDf,qBAAqB,CAAC,KAAKM,CAAN,EAASS,SAAT,CAA5E,EAAiGf,qBAAqB,CAAC,KAAKO,CAAN,EAASQ,SAAT,CAAtH,CAAP;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,WAAO;AAAEX,MAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,MAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,MAAAA,CAAC,EAAE,KAAKA;AAAhC,KAAP;AACH;;AApBiB","sourcesContent":["// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\";\n// This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\nexport class ColorHSV {\n    static fromObject(data) {\n        if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {\n            return new ColorHSV(data.h, data.s, data.v);\n        }\n        return null;\n    }\n    constructor(hue, sat, val) {\n        this.h = hue;\n        this.s = sat;\n        this.v = val;\n    }\n    equalValue(rhs) {\n        return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;\n    }\n    roundToPrecision(precision) {\n        return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));\n    }\n    toObject() {\n        return { h: this.h, s: this.s, v: this.v };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}