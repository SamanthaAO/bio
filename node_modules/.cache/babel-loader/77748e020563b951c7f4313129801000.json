{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { SliderMode, SliderOrientation } from \"./slider.props\";\nimport React from \"react\";\nimport { get, isNil } from \"lodash-es\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome, keyCodePageDown, keyCodePageUp } from \"@microsoft/fast-web-utilities\";\nimport { classNames, Direction } from \"@microsoft/fast-web-utilities\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { SliderContext } from \"./slider-context\";\nimport SliderTrackItem, { SliderTrackItemAnchor } from \"../slider-track-item\";\nexport var SliderThumb;\n\n(function (SliderThumb) {\n  SliderThumb[\"upperThumb\"] = \"upperThumb\";\n  SliderThumb[\"lowerThumb\"] = \"lowerThumb\";\n})(SliderThumb || (SliderThumb = {}));\n\nvar Slider =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Slider, _Foundation);\n\n  /**\n   * constructor\n   */\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider).call(this, props));\n    _this.handledProps = {\n      disabled: void 0,\n      managedClasses: void 0,\n      orientation: void 0,\n      mode: void 0,\n      initialValue: void 0,\n      range: void 0,\n      pageStep: void 0,\n      step: void 0,\n      value: void 0,\n      constrainedRange: void 0,\n      onValueChange: void 0,\n      name: void 0,\n      form: void 0,\n      thumb: void 0,\n      minThumbLabel: void 0,\n      maxThumbLabel: void 0,\n      valuetextStringFormatter: void 0,\n      displayValueConverter: void 0\n    };\n    _this.rootElement = React.createRef();\n    _this.sliderTrackElement = React.createRef();\n    _this.rangeInPixels = 1;\n    _this.barMinPixel = 0;\n    _this.lastIncrementDelay = Slider.baseIncrementDelay;\n    /**\n     * Renders the internals of the component but skips the\n     * first render so we can determine direction before doing layout\n     * (avoids transition animations to get the layout right to begin with)\n     */\n\n    _this.renderSliderInternals = function () {\n      if (_this.state.direction === null) {\n        return null;\n      }\n\n      return React.createElement(SliderContext.Provider, {\n        value: {\n          sliderOrientation: _this.props.orientation,\n          sliderMode: _this.props.mode,\n          sliderState: _this.state,\n          sliderConstrainedRange: _this.props.constrainedRange,\n          sliderValueAsPercent: _this.valueAsPercent,\n          sliderDirection: _this.state.direction\n        }\n      }, React.createElement(\"div\", {\n        className: classNames(_this.props.managedClasses.slider_layoutRegion),\n        style: {\n          position: \"relative\"\n        }\n      }, React.createElement(\"div\", {\n        className: classNames(_this.props.managedClasses.slider_backgroundTrack),\n        style: {\n          position: \"absolute\"\n        }\n      }), React.createElement(SliderTrackItem, {\n        className: _this.props.managedClasses.slider_foregroundTrack,\n        maxValuePositionBinding: SliderTrackItemAnchor.selectedRangeMax,\n        minValuePositionBinding: SliderTrackItemAnchor.selectedRangeMin\n      }), React.createElement(\"div\", {\n        ref: _this.sliderTrackElement,\n        onMouseDown: _this.handleTrackMouseDown,\n        className: classNames(_this.props.managedClasses.slider_track),\n        style: {\n          position: \"absolute\"\n        }\n      }), _this.props.children, _this.renderThumb(SliderThumb.upperThumb), _this.renderThumb(SliderThumb.lowerThumb)), _this.renderHiddenInputElement());\n    };\n    /**\n     * Updates values when mode is switched in props\n     */\n\n\n    _this.updateValuesForModeSwitch = function () {\n      switch (_this.props.mode) {\n        case SliderMode.adjustBoth:\n          break;\n\n        case SliderMode.adustLowerValue:\n          _this.updateValues(_this.state.lowerValue, _this.props.range.maxValue);\n\n          break;\n\n        case SliderMode.adustUpperValue:\n          _this.updateValues(_this.props.range.minValue, _this.state.upperValue);\n\n          break;\n\n        case SliderMode.singleValue:\n          _this.updateValues(_this.state.upperValue, _this.state.upperValue);\n\n          break;\n      }\n    };\n    /**\n     *  Constrains a value to be within the provided constraint range and step\n     */\n\n\n    _this.getConstrainedValue = function (baseValue, constraint, step) {\n      if (constraint === null || constraint === undefined) {\n        constraint = _this.props.range;\n      }\n\n      var constrainedRange = {\n        minValue: _this.constrainToRange(_this.constrainToStep(_this.valueAsRange(baseValue).minValue, step), constraint),\n        maxValue: _this.constrainToRange(_this.constrainToStep(_this.valueAsRange(baseValue).maxValue, step), constraint)\n      };\n      return constrainedRange;\n    };\n    /**\n     *  Maps the default thumb managed classes to the appropriate slider managed classes\n     */\n\n\n    _this.getThumbManagedClasses = function (thumb) {\n      var thumbBaseClass = get(_this.props, \"managedClasses.slider_thumb\", \"\");\n      return {\n        managedClasses: {\n          sliderTrackItem: thumb === SliderThumb.upperThumb ? get(_this.props, \"managedClasses.slider_thumb__upperValue\", \"\").concat(\" \", thumbBaseClass) : get(_this.props, \"managedClasses.slider_thumb__lowerValue\", \"\").concat(\" \", thumbBaseClass),\n          sliderTrackItem_horizontal: get(_this.props, \"managedClasses.slider_thumb__horizontal\", \"\"),\n          sliderTrackItem_vertical: get(_this.props, \"managedClasses.slider_thumb__vertical\", \"\")\n        }\n      };\n    };\n    /**\n     * This exists only to suppress a build warning\n     */\n\n\n    _this.onInputValueChange = function (event) {\n      return null;\n    };\n    /**\n     *  Determines whether a particular thumb should render in the current mode\n     */\n\n\n    _this.shouldRenderThumb = function (thumb) {\n      if (_this.props.mode === SliderMode.adustLowerValue && thumb === SliderThumb.upperThumb || _this.props.mode === SliderMode.adustUpperValue && thumb === SliderThumb.lowerThumb || _this.props.mode === SliderMode.singleValue && thumb === SliderThumb.lowerThumb) {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * Handles track clicks\n     */\n\n\n    _this.handleTrackMouseDown = function (event) {\n      if (event.defaultPrevented || _this.isBusyOrDisabled()) {\n        return;\n      }\n\n      event.preventDefault();\n\n      _this.updateSliderDimensions();\n\n      var pixelCoordinate = _this.props.orientation === SliderOrientation.vertical ? event.pageY : event.pageX;\n\n      var newValue = (_this.props.range.maxValue - _this.props.range.minValue) * _this.convertPixelToPercent(pixelCoordinate) + _this.props.range.minValue;\n\n      switch (_this.props.mode) {\n        case SliderMode.singleValue:\n          _this.updateValues(newValue, newValue);\n\n          break;\n\n        case SliderMode.adjustBoth:\n          _this.handleMultiThumbTrackClick(newValue);\n\n          break;\n\n        case SliderMode.adustLowerValue:\n          _this.updateValues(newValue, null);\n\n          break;\n\n        case SliderMode.adustUpperValue:\n          _this.updateValues(null, newValue);\n\n          break;\n      }\n    };\n    /**\n     *  Handles track clicks when there are multiple thumbs\n     */\n\n\n    _this.handleMultiThumbTrackClick = function (value) {\n      if (value <= _this.state.lowerValue) {\n        _this.updateValues(value, null);\n      } else if (value >= _this.state.upperValue) {\n        _this.updateValues(null, value);\n      } else {\n        // between values move the closest thumb to the click\n        if (value - _this.state.lowerValue < _this.state.upperValue - value) {\n          _this.updateValues(value, null);\n        } else {\n          _this.updateValues(null, value);\n        }\n      }\n    };\n    /**\n     *  updates the direction in state if necessary\n     */\n\n\n    _this.updateDirection = function () {\n      var newDirection = _this.getDirection();\n\n      if (newDirection !== _this.state.direction) {\n        _this.suspendActiveOperations();\n\n        _this.setState({\n          direction: newDirection\n        });\n      }\n    };\n    /**\n     *  gets the current direction\n     */\n\n\n    _this.getDirection = function () {\n      if (_this.rootElement.current === null) {\n        return Direction.ltr;\n      }\n\n      var closest = _this.rootElement.current.closest(\"[\".concat(Slider.DirectionAttributeName, \"]\"));\n\n      return closest === null || closest.getAttribute(Slider.DirectionAttributeName) === Direction.ltr ? Direction.ltr : Direction.rtl;\n    };\n    /**\n     * Measures the slider dimensions and stores them\n     */\n\n\n    _this.updateSliderDimensions = function () {\n      if (_this.sliderTrackElement.current === null) {\n        return;\n      }\n\n      _this.rangeInPixels = _this.props.orientation === SliderOrientation.vertical ? _this.sliderTrackElement.current.clientHeight : _this.sliderTrackElement.current.clientWidth;\n\n      if (_this.rangeInPixels === 0) {\n        _this.rangeInPixels = 1;\n      }\n\n      _this.barMinPixel = _this.props.orientation === SliderOrientation.vertical ? _this.sliderTrackElement.current.getBoundingClientRect().bottom : _this.sliderTrackElement.current.getBoundingClientRect().left;\n    };\n    /**\n     * Start timed incrementing from\n     */\n\n\n    _this.startIncrementing = function (incrementDirection, usePageStep, thumb, event) {\n      event.preventDefault();\n\n      if (_this.state.isIncrementing) {\n        return;\n      }\n\n      _this.updateSliderDimensions();\n\n      window.addEventListener(\"keyup\", _this.handleWindowKeyUp);\n\n      _this.setState({\n        usePageStep: usePageStep,\n        activeThumb: thumb,\n        isIncrementing: true,\n        incrementDirection: incrementDirection\n      });\n\n      _this.lastIncrementDelay = Slider.baseIncrementDelay;\n      _this.incrementTimer = setTimeout(function () {\n        _this.incrementTimerExpired();\n      }, 50);\n    };\n    /**\n     * Increments the value by one step (or pageStep)\n     * when step is set to 0 we increment based on the current pixel width\n     * of the component\n     */\n\n\n    _this.incrementValue = function () {\n      var step = _this.state.usePageStep ? _this.props.pageStep : _this.props.step !== 0 ? _this.props.step : (_this.props.range.maxValue - _this.props.range.minValue) / _this.rangeInPixels;\n      var newValue = _this.state.activeThumb === SliderThumb.upperThumb ? _this.state.upperValue + step * _this.state.incrementDirection : _this.state.lowerValue + step * _this.state.incrementDirection;\n\n      if (_this.props.mode === SliderMode.adjustBoth && newValue > _this.state.upperValue && _this.state.activeThumb !== SliderThumb.upperThumb) {\n        newValue = _this.state.upperValue;\n      } else if (_this.props.mode === SliderMode.adjustBoth && newValue < _this.state.lowerValue && _this.state.activeThumb !== SliderThumb.lowerThumb) {\n        newValue = _this.state.lowerValue;\n      }\n\n      if (_this.state.activeThumb === SliderThumb.upperThumb) {\n        _this.updateValues(null, newValue);\n      } else {\n        _this.updateValues(newValue, null);\n      }\n    };\n    /**\n     *  Increment timer tick\n     */\n\n\n    _this.incrementTimerExpired = function () {\n      clearTimeout(_this.incrementTimer);\n\n      _this.incrementValue();\n\n      _this.lastIncrementDelay = _this.lastIncrementDelay - Slider.incrementAcceleration;\n\n      if (_this.lastIncrementDelay < Slider.minIncrementDelay) {\n        _this.lastIncrementDelay = Slider.minIncrementDelay;\n      }\n\n      _this.incrementTimer = setTimeout(function () {\n        _this.incrementTimerExpired();\n      }, _this.lastIncrementDelay);\n    };\n    /**\n     *  Stop incrementing\n     */\n\n\n    _this.stopIncrementing = function () {\n      if (!_this.state.isIncrementing) {\n        return;\n      }\n\n      window.removeEventListener(\"keyup\", _this.handleWindowKeyUp);\n\n      _this.setState({\n        usePageStep: false,\n        isIncrementing: false\n      });\n\n      clearTimeout(_this.incrementTimer);\n    };\n    /**\n     * Converts a pixel coordinate on the track to a percent of the track's range\n     */\n\n\n    _this.convertPixelToPercent = function (pixelPos) {\n      var pct = 0;\n\n      if (_this.props.orientation === SliderOrientation.vertical) {\n        pct = (_this.barMinPixel - pixelPos) / _this.rangeInPixels;\n      } else {\n        pct = (pixelPos - _this.barMinPixel) / _this.rangeInPixels;\n      }\n\n      if (pct < 0) {\n        pct = 0;\n      } else if (pct > 1) {\n        pct = 1;\n      }\n\n      if (_this.state.direction === Direction.rtl && _this.props.orientation !== SliderOrientation.vertical) {\n        pct = 1 - pct;\n      }\n\n      return pct;\n    };\n    /**\n     * Handles thumb key events\n     */\n\n\n    _this.handleUpperThumbKeyDown = function (event) {\n      _this.handleThumbKeydown(event, SliderThumb.upperThumb);\n    };\n\n    _this.handleLowerThumbKeyDown = function (event) {\n      _this.handleThumbKeydown(event, SliderThumb.lowerThumb);\n    };\n\n    _this.handleThumbKeydown = function (event, thumb) {\n      if (event.defaultPrevented || _this.isBusyOrDisabled()) {\n        event.preventDefault();\n        return;\n      }\n\n      switch (event.keyCode) {\n        case keyCodeArrowDown:\n          _this.startIncrementing(-1, false, thumb, event);\n\n          break;\n\n        case keyCodeArrowRight:\n          _this.startIncrementing(_this.state.direction === Direction.ltr ? 1 : -1, false, thumb, event);\n\n          break;\n\n        case keyCodeArrowUp:\n          _this.startIncrementing(1, false, thumb, event);\n\n          break;\n\n        case keyCodeArrowLeft:\n          _this.startIncrementing(_this.state.direction === Direction.ltr ? -1 : 1, false, thumb, event);\n\n          break;\n\n        case keyCodePageDown:\n          if (_this.props.pageStep !== undefined) {\n            _this.startIncrementing(-1, true, thumb, event);\n          }\n\n          break;\n\n        case keyCodePageUp:\n          if (_this.props.pageStep !== undefined) {\n            _this.startIncrementing(1, true, thumb, event);\n          }\n\n          break;\n\n        case keyCodeHome:\n          _this.setMinValue(thumb);\n\n          break;\n\n        case keyCodeEnd:\n          _this.setMaxValue(thumb);\n\n          break;\n      }\n    };\n    /**\n     * sets the active thumb to its minimum value\n     */\n\n\n    _this.setMinValue = function (thumb) {\n      var thumbRange = _this.getConstrainedRange(true);\n\n      if (thumb === SliderThumb.upperThumb) {\n        _this.updateValues(null, thumbRange.minValue);\n      } else {\n        _this.updateValues(thumbRange.minValue, null);\n      }\n    };\n    /**\n     * sets the active thumb to it's maximum value\n     */\n\n\n    _this.setMaxValue = function (thumb) {\n      var thumbRange = _this.getConstrainedRange(true);\n\n      if (thumb === SliderThumb.upperThumb) {\n        _this.updateValues(null, thumbRange.maxValue);\n      } else {\n        _this.updateValues(thumbRange.maxValue, null);\n      }\n    };\n    /**\n     * Handles thumb clicks\n     */\n\n\n    _this.handleUpperThumbMouseDown = function (e) {\n      _this.handleThumbMouseDown(e, SliderThumb.upperThumb);\n    };\n\n    _this.handleLowerThumbMouseDown = function (e) {\n      _this.handleThumbMouseDown(e, SliderThumb.lowerThumb);\n    };\n\n    _this.handleThumbMouseDown = function (e, thumb) {\n      if (e.defaultPrevented || _this.isBusyOrDisabled()) {\n        return;\n      }\n\n      e.preventDefault();\n      e.target.focus();\n      window.addEventListener(\"mouseup\", _this.handleWindowMouseUp);\n      window.addEventListener(\"mousemove\", _this.handleMouseMove);\n\n      _this.setState({\n        isMouseDragging: true,\n        activeThumb: thumb\n      });\n\n      _this.updateDragValue(_this.getDragValue(e.nativeEvent, thumb), thumb);\n    };\n    /**\n     *  Handle mouse moves during a thumb drag operation\n     */\n\n\n    _this.handleMouseMove = function (event) {\n      if (_this.props.disabled || event.defaultPrevented) {\n        return;\n      }\n\n      _this.updateDragValue(_this.getDragValue(event, _this.state.activeThumb), _this.state.activeThumb);\n    };\n    /**\n     *  Get dragvalue from mouse event or touch\n     */\n\n\n    _this.getDragValue = function (event, thumb) {\n      _this.updateSliderDimensions();\n\n      var pixelCoordinate = _this.props.orientation === SliderOrientation.vertical ? event.clientY : event.clientX;\n\n      var dragValue = (_this.props.range.maxValue - _this.props.range.minValue) * _this.convertPixelToPercent(pixelCoordinate) + _this.props.range.minValue;\n\n      return dragValue;\n    };\n    /**\n     * Handles touch dragging\n     */\n\n\n    _this.handleUpperThumbTouchStart = function (e) {\n      _this.handleThumbTouchStart(e, SliderThumb.upperThumb);\n    };\n\n    _this.handleLowerThumbTouchStart = function (e) {\n      _this.handleThumbTouchStart(e, SliderThumb.lowerThumb);\n    };\n\n    _this.handleThumbTouchStart = function (e, thumb) {\n      if (e.defaultPrevented || _this.isBusyOrDisabled()) {\n        return;\n      }\n\n      e.preventDefault();\n      e.target.focus();\n      window.addEventListener(\"touchend\", _this.handleTouchEnd);\n      window.addEventListener(\"touchcancel\", _this.handleTouchEnd);\n      window.addEventListener(\"touchmove\", _this.handleTouchMove);\n\n      _this.setState({\n        isTouchDragging: true,\n        activeThumb: thumb\n      });\n\n      var thisTouch = e.nativeEvent.touches.item(0);\n\n      _this.updateDragValue(_this.getDragValue(thisTouch, thumb), thumb);\n    };\n    /**\n     *  Returns first valid touch found in a touch event\n     */\n\n\n    _this.getValidTouch = function (event) {\n      if (isNil(_this.rootElement.current)) {\n        return null;\n      }\n\n      var touchCount = event.touches.length;\n\n      for (var i = 0; i < touchCount; i++) {\n        var thisTouch = event.touches.item(i);\n        var touchElement = thisTouch.target;\n\n        if (touchElement.attributes[Slider.rolePropName].value === \"slider\" && touchElement.tabIndex === 0 && _this.rootElement.current.contains(touchElement)) {\n          return thisTouch;\n        }\n      }\n\n      return null;\n    };\n    /**\n     *  Handle touch moves during a thumb drag operation\n     */\n\n\n    _this.handleTouchMove = function (event) {\n      if (_this.props.disabled || event.defaultPrevented) {\n        return;\n      }\n\n      var validTouch = _this.getValidTouch(event);\n\n      if (validTouch === null) {\n        _this.stopTouchDragging();\n\n        return;\n      }\n\n      _this.updateDragValue(_this.getDragValue(validTouch, _this.state.activeThumb), _this.state.activeThumb);\n    };\n    /**\n     * Handle touch end\n     */\n\n\n    _this.handleTouchEnd = function (event) {\n      event.preventDefault();\n\n      _this.stopTouchDragging();\n    };\n    /**\n     *  Updates the current drag value\n     */\n\n\n    _this.updateDragValue = function (dragValue, thumb) {\n      var constrainedRange = _this.getConstrainedRange(true);\n\n      var newDragValue = _this.constrainToRange(dragValue, constrainedRange);\n\n      _this.setState({\n        dragValue: newDragValue\n      });\n\n      if (thumb === SliderThumb.lowerThumb) {\n        _this.updateValues(newDragValue, null);\n      } else {\n        _this.updateValues(null, newDragValue);\n      }\n    };\n    /**\n     *  Gets the range of values the active thumb is actually allowed to traverse\n     */\n\n\n    _this.getConstrainedRange = function (constrainToOppositeEndOfSelection) {\n      var rangeMin = _this.props.range.minValue;\n      var rangeMax = _this.props.range.maxValue;\n\n      if (_this.props.constrainedRange !== undefined) {\n        rangeMin = _this.props.constrainedRange.minValue > rangeMin ? _this.props.constrainedRange.minValue : rangeMin;\n        rangeMax = _this.props.constrainedRange.maxValue < rangeMax ? _this.props.constrainedRange.maxValue : rangeMin;\n      }\n\n      if (_this.props.mode !== SliderMode.singleValue && constrainToOppositeEndOfSelection) {\n        if (_this.state.activeThumb === SliderThumb.lowerThumb) {\n          rangeMax = _this.state.upperValue;\n        } else {\n          rangeMin = _this.state.lowerValue;\n        }\n      }\n\n      return {\n        minValue: rangeMin,\n        maxValue: rangeMax\n      };\n    };\n    /**\n     *  Converts a single number value to a SliderRange based on current mode\n     */\n\n\n    _this.valueAsRange = function (value) {\n      if (typeof value === \"number\") {\n        switch (_this.props.mode) {\n          case SliderMode.adjustBoth:\n          case SliderMode.singleValue:\n            return {\n              minValue: value,\n              maxValue: value\n            };\n\n          case SliderMode.adustLowerValue:\n            return {\n              minValue: value,\n              maxValue: _this.props.range.maxValue\n            };\n\n          case SliderMode.adustUpperValue:\n            return {\n              minValue: _this.props.range.minValue,\n              maxValue: value\n            };\n        }\n      } else if (typeof value === \"object\") {\n        return value;\n      }\n    };\n    /**\n     *  Apply value changes to state, only place this should happen outside of constructor and ComponentDidUpdate\n     */\n\n\n    _this.updateValues = function (lowerValue, upperValue) {\n      var newLowerValue = _this.state.lowerValue;\n      var newUpperValue = _this.state.upperValue;\n\n      if (lowerValue !== null) {\n        newLowerValue = _this.constrainToRange(_this.constrainToStep(lowerValue, _this.props.step), _this.props.range);\n      }\n\n      if (upperValue !== null) {\n        newUpperValue = _this.constrainToRange(_this.constrainToStep(upperValue, _this.props.step), _this.props.range);\n      }\n\n      if (_this.state.upperValue === newUpperValue && _this.state.lowerValue === newLowerValue) {\n        return;\n      }\n\n      _this.invokeValueChange(newLowerValue, newUpperValue);\n\n      if (_this.props.value === undefined) {\n        _this.setState({\n          lowerValue: _this.props.mode === SliderMode.singleValue ? newUpperValue : newLowerValue,\n          upperValue: newUpperValue\n        });\n      }\n    };\n    /**\n     *  Invokes the value change event and formats params based on current mode\n     */\n\n\n    _this.invokeValueChange = function (lowerValue, upperValue) {\n      if (typeof _this.props.onValueChange === \"function\") {\n        switch (_this.props.mode) {\n          case SliderMode.adjustBoth:\n            _this.props.onValueChange({\n              minValue: lowerValue,\n              maxValue: upperValue\n            });\n\n            break;\n\n          case SliderMode.adustUpperValue:\n          case SliderMode.singleValue:\n            _this.props.onValueChange(upperValue);\n\n            break;\n\n          case SliderMode.adustLowerValue:\n            _this.props.onValueChange(lowerValue);\n\n            break;\n        }\n      }\n    };\n    /**\n     * Handle a window mouse up during a drag operation\n     */\n\n\n    _this.handleWindowMouseUp = function (event) {\n      _this.stopDragging();\n    };\n    /**\n     *  Handle window key up during an incrementing operation\n     */\n\n\n    _this.handleWindowKeyUp = function (event) {\n      switch (event.keyCode) {\n        case keyCodeArrowDown:\n        case keyCodeArrowRight:\n        case keyCodeArrowUp:\n        case keyCodeArrowLeft:\n        case keyCodePageDown:\n        case keyCodePageUp:\n          _this.stopIncrementing();\n\n          break;\n      }\n    };\n    /**\n     *  Ends a thumb drag operation\n     */\n\n\n    _this.stopDragging = function () {\n      if (!_this.state.isMouseDragging) {\n        return;\n      }\n\n      window.removeEventListener(\"mouseup\", _this.handleWindowMouseUp);\n      window.removeEventListener(\"mousemove\", _this.handleMouseMove);\n\n      _this.setState({\n        isMouseDragging: false\n      });\n    };\n    /**\n     *  Ends a thumb touch drag operation\n     */\n\n\n    _this.stopTouchDragging = function () {\n      if (!_this.state.isTouchDragging) {\n        return;\n      }\n\n      window.removeEventListener(\"touchend\", _this.handleTouchEnd);\n      window.removeEventListener(\"touchcancel\", _this.handleTouchEnd);\n      window.removeEventListener(\"touchmove\", _this.handleTouchMove);\n\n      _this.setState({\n        isTouchDragging: false\n      });\n    };\n    /**\n     *  Ends active drag/increment operations\n     */\n\n\n    _this.suspendActiveOperations = function () {\n      _this.stopDragging();\n\n      _this.stopTouchDragging();\n\n      _this.stopIncrementing();\n    };\n    /**\n     * Ensures a value falls within the provided range\n     */\n\n\n    _this.constrainToRange = function (value, range) {\n      var newValue = value;\n\n      if (newValue > range.maxValue) {\n        newValue = range.maxValue;\n      } else if (newValue < range.minValue) {\n        newValue = range.minValue;\n      }\n\n      return newValue;\n    };\n    /**\n     * Ensures a value is an even multiple of the slider step increment\n     */\n\n\n    _this.constrainToStep = function (value, step) {\n      // we remove then restore the slider range min value to\n      // ensure that the remainder calculates correctly in case the minValue\n      // is not based off 0, eg. range minValue 7.5, step 2.  Slider steps increment off\n      // of the min value of the slider's range, not 0.\n      var constrainedValue = value - _this.props.range.minValue;\n      var remainder = constrainedValue % step;\n      constrainedValue = remainder >= step / 2 // check to see if this is over half a single step\n      ? constrainedValue - remainder + step // if so add a step\n      : constrainedValue - remainder;\n      return constrainedValue + _this.props.range.minValue;\n    };\n    /**\n     * Converts value to a percent of slider range\n     */\n\n\n    _this.valueAsPercent = function (value) {\n      return (value - _this.props.range.minValue) / (_this.props.range.maxValue - _this.props.range.minValue) * 100;\n    };\n    /**\n     *  Converts a percent value to the equivalent value on the bar range\n     */\n\n\n    _this.percentAsValue = function (value) {\n      return (_this.props.range.maxValue - _this.props.range.minValue) / 100 * value + _this.props.range.minValue;\n    };\n    /**\n     *  Checks if the component is busy with an active operation or disabled\n     */\n\n\n    _this.isBusyOrDisabled = function () {\n      if (_this.props.disabled || _this.state.isMouseDragging || _this.state.isIncrementing || _this.state.isTouchDragging) {\n        return true;\n      }\n\n      return false;\n    };\n\n    var initialValue = {\n      minValue: _this.props.range.minValue,\n      maxValue: _this.props.range.maxValue\n    };\n\n    if (_this.props.value !== undefined) {\n      initialValue = _this.getConstrainedValue(_this.props.value, _this.props.constrainedRange, _this.props.step);\n    } else if (_this.props.initialValue !== undefined) {\n      initialValue = _this.getConstrainedValue(_this.props.initialValue, _this.props.constrainedRange, _this.props.step);\n    } else {\n      var defaultValue = {\n        minValue: 0,\n        maxValue: 0\n      };\n\n      switch (_this.props.mode) {\n        case SliderMode.singleValue:\n          defaultValue = {\n            minValue: _this.percentAsValue(50),\n            maxValue: _this.percentAsValue(50)\n          };\n          break;\n\n        case SliderMode.adjustBoth:\n          defaultValue = {\n            minValue: _this.percentAsValue(40),\n            maxValue: _this.percentAsValue(60)\n          };\n          break;\n\n        case SliderMode.adustLowerValue:\n          defaultValue = {\n            minValue: _this.percentAsValue(50),\n            maxValue: _this.props.range.maxValue\n          };\n          break;\n\n        case SliderMode.adustUpperValue:\n          defaultValue = {\n            minValue: _this.props.range.minValue,\n            maxValue: _this.percentAsValue(50)\n          };\n          break;\n      }\n\n      initialValue = _this.getConstrainedValue(defaultValue, _this.props.constrainedRange, _this.props.step);\n    }\n\n    _this.state = {\n      dragValue: -1,\n      upperValue: initialValue.maxValue,\n      lowerValue: initialValue.minValue,\n      activeThumb: null,\n      isMouseDragging: false,\n      isTouchDragging: false,\n      isIncrementing: false,\n      incrementDirection: 1,\n      usePageStep: false,\n      direction: null\n    };\n    return _this;\n  }\n  /**\n   * React lifecycle methods\n   */\n\n\n  _createClass(Slider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateDirection();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.suspendActiveOperations();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.disabled !== this.props.disabled && this.props.disabled) {\n        this.suspendActiveOperations();\n      }\n\n      if (prevProps.value !== this.props.value && this.props.value !== undefined) {\n        var newValue = this.getConstrainedValue(this.props.value, this.props.constrainedRange, this.props.step);\n        this.setState({\n          lowerValue: newValue.minValue,\n          upperValue: newValue.maxValue\n        });\n      } else if (prevProps.constrainedRange !== this.props.constrainedRange || prevProps.step !== this.props.step) {\n        this.suspendActiveOperations();\n        this.updateValues(this.state.lowerValue, this.state.upperValue);\n      }\n\n      if (prevProps.mode !== this.props.mode) {\n        this.suspendActiveOperations();\n        this.updateValuesForModeSwitch();\n      }\n\n      this.updateDirection();\n    }\n    /**\n     * Renders the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        ref: this.rootElement,\n        className: this.generateClassNames()\n      }), this.renderSliderInternals());\n    }\n    /**\n     * Generates class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          slider = _this$props$managedCl.slider,\n          slider__disabled = _this$props$managedCl.slider__disabled,\n          slider__dragging = _this$props$managedCl.slider__dragging,\n          slider__touchDragging = _this$props$managedCl.slider__touchDragging,\n          slider__incrementing = _this$props$managedCl.slider__incrementing,\n          slider__vertical = _this$props$managedCl.slider__vertical,\n          slider__horizontal = _this$props$managedCl.slider__horizontal,\n          slider__rtl = _this$props$managedCl.slider__rtl,\n          slider__modeSingle = _this$props$managedCl.slider__modeSingle,\n          slider__modeAdjustUpper = _this$props$managedCl.slider__modeAdjustUpper,\n          slider__modeAdjustLower = _this$props$managedCl.slider__modeAdjustLower,\n          slider__modeAdjustBoth = _this$props$managedCl.slider__modeAdjustBoth;\n      var isVertical = this.props.orientation === SliderOrientation.vertical;\n      return _get(_getPrototypeOf(Slider.prototype), \"generateClassNames\", this).call(this, classNames(slider, [slider__disabled, this.props.disabled], [slider__dragging, this.state.isMouseDragging || this.state.isTouchDragging], [slider__touchDragging, this.state.isTouchDragging], [slider__incrementing, this.state.isIncrementing], [slider__vertical, isVertical], [slider__horizontal, !isVertical], [slider__rtl, this.state.direction === Direction.rtl], [slider__modeSingle, this.props.mode === SliderMode.singleValue], [slider__modeAdjustUpper, this.props.mode === SliderMode.adustUpperValue], [slider__modeAdjustLower, this.props.mode === SliderMode.adustLowerValue], [slider__modeAdjustBoth, this.props.mode === SliderMode.adjustBoth]));\n    }\n    /**\n     *  Renders the appropriate thumb\n     */\n\n  }, {\n    key: \"renderThumb\",\n    value: function renderThumb(thumb) {\n      if (!this.shouldRenderThumb(thumb)) {\n        return;\n      }\n\n      var mouseDownCallback = thumb === SliderThumb.upperThumb ? this.handleUpperThumbMouseDown : this.handleLowerThumbMouseDown;\n      var keyDownCallback = thumb === SliderThumb.upperThumb ? this.handleUpperThumbKeyDown : this.handleLowerThumbKeyDown;\n      var touchStartCallback = thumb === SliderThumb.upperThumb ? this.handleUpperThumbTouchStart : this.handleLowerThumbTouchStart;\n\n      if (typeof this.props.thumb === \"function\") {\n        return this.props.thumb(this.props, this.state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback);\n      } else {\n        return this.renderDefaultThumb(this.props, this.state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback);\n      }\n    }\n    /**\n     *  Renders the default thumb\n     */\n\n  }, {\n    key: \"renderDefaultThumb\",\n    value: function renderDefaultThumb(props, state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback) {\n      return React.createElement(SliderTrackItem, Object.assign({}, this.getThumbManagedClasses(thumb), {\n        minValuePositionBinding: thumb === SliderThumb.lowerThumb ? SliderTrackItemAnchor.selectedRangeMin : undefined,\n        maxValuePositionBinding: thumb === SliderThumb.upperThumb ? SliderTrackItemAnchor.selectedRangeMax : undefined,\n        draggable: false,\n        role: \"slider\",\n        tabIndex: props.disabled === true ? null : 0,\n        onKeyDown: keyDownCallback,\n        onMouseDown: mouseDownCallback,\n        onTouchStart: touchStartCallback,\n        \"aria-valuemin\": typeof props.displayValueConverter === \"function\" ? props.displayValueConverter(props.range.minValue) : props.range.minValue,\n        \"aria-valuemax\": typeof props.displayValueConverter === \"function\" ? props.displayValueConverter(props.range.maxValue) : props.range.maxValue,\n        \"aria-valuenow\": typeof props.displayValueConverter === \"function\" ? props.displayValueConverter(thumb === SliderThumb.lowerThumb ? state.lowerValue : state.upperValue) : thumb === SliderThumb.lowerThumb ? state.lowerValue : state.upperValue,\n        \"aria-valuetext\": typeof props.valuetextStringFormatter === \"function\" ? props.valuetextStringFormatter(props, state, thumb) : null,\n        \"aria-label\": thumb === SliderThumb.upperThumb ? props.maxThumbLabel || null : props.minThumbLabel || null\n      }));\n    }\n    /**\n     * Renders a hidden input element which can interact with a\n     * form hosting this component\n     */\n\n  }, {\n    key: \"renderHiddenInputElement\",\n    value: function renderHiddenInputElement() {\n      var formattedValue = \"\";\n\n      switch (this.props.mode) {\n        case SliderMode.adjustBoth:\n          formattedValue = \"[\".concat(this.state.lowerValue, \",\").concat(this.state.upperValue, \"]\");\n          break;\n\n        case SliderMode.adustUpperValue:\n        case SliderMode.singleValue:\n          formattedValue = \"\".concat(this.state.upperValue);\n          break;\n\n        case SliderMode.adustLowerValue:\n          formattedValue = \"\".concat(this.state.lowerValue);\n          break;\n      }\n\n      return React.createElement(\"input\", {\n        type: \"range\",\n        name: this.props.name || null,\n        form: this.props.form || null,\n        value: formattedValue,\n        onChange: this.onInputValueChange,\n        disabled: this.props.disabled || null,\n        style: {\n          display: \"none\"\n        }\n      });\n    }\n  }]);\n\n  return Slider;\n}(Foundation);\n\nSlider.displayName = \"\".concat(DisplayNamePrefix, \"Slider\");\nSlider.defaultProps = {\n  disabled: false,\n  orientation: SliderOrientation.horizontal,\n  mode: SliderMode.singleValue,\n  range: {\n    minValue: 0,\n    maxValue: 100\n  },\n  step: 1,\n  managedClasses: {}\n};\nSlider.baseIncrementDelay = 300;\nSlider.minIncrementDelay = 100;\nSlider.incrementAcceleration = 50;\nSlider.rolePropName = \"role\";\nSlider.DirectionAttributeName = \"dir\";\nexport default Slider;\nexport * from \"./slider.props\";\nexport { SliderContext };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/slider/slider.js"],"names":["SliderMode","SliderOrientation","React","get","isNil","Foundation","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnd","keyCodeHome","keyCodePageDown","keyCodePageUp","classNames","Direction","DisplayNamePrefix","SliderContext","SliderTrackItem","SliderTrackItemAnchor","SliderThumb","Slider","props","handledProps","disabled","managedClasses","orientation","mode","initialValue","range","pageStep","step","value","constrainedRange","onValueChange","name","form","thumb","minThumbLabel","maxThumbLabel","valuetextStringFormatter","displayValueConverter","rootElement","createRef","sliderTrackElement","rangeInPixels","barMinPixel","lastIncrementDelay","baseIncrementDelay","renderSliderInternals","state","direction","createElement","Provider","sliderOrientation","sliderMode","sliderState","sliderConstrainedRange","sliderValueAsPercent","valueAsPercent","sliderDirection","className","slider_layoutRegion","style","position","slider_backgroundTrack","slider_foregroundTrack","maxValuePositionBinding","selectedRangeMax","minValuePositionBinding","selectedRangeMin","ref","onMouseDown","handleTrackMouseDown","slider_track","children","renderThumb","upperThumb","lowerThumb","renderHiddenInputElement","updateValuesForModeSwitch","adjustBoth","adustLowerValue","updateValues","lowerValue","maxValue","adustUpperValue","minValue","upperValue","singleValue","getConstrainedValue","baseValue","constraint","undefined","constrainToRange","constrainToStep","valueAsRange","getThumbManagedClasses","thumbBaseClass","sliderTrackItem","concat","sliderTrackItem_horizontal","sliderTrackItem_vertical","onInputValueChange","event","shouldRenderThumb","defaultPrevented","isBusyOrDisabled","preventDefault","updateSliderDimensions","pixelCoordinate","vertical","pageY","pageX","newValue","convertPixelToPercent","handleMultiThumbTrackClick","updateDirection","newDirection","getDirection","suspendActiveOperations","setState","current","ltr","closest","DirectionAttributeName","getAttribute","rtl","clientHeight","clientWidth","getBoundingClientRect","bottom","left","startIncrementing","incrementDirection","usePageStep","isIncrementing","window","addEventListener","handleWindowKeyUp","activeThumb","incrementTimer","setTimeout","incrementTimerExpired","incrementValue","clearTimeout","incrementAcceleration","minIncrementDelay","stopIncrementing","removeEventListener","pixelPos","pct","handleUpperThumbKeyDown","handleThumbKeydown","handleLowerThumbKeyDown","keyCode","setMinValue","setMaxValue","thumbRange","getConstrainedRange","handleUpperThumbMouseDown","e","handleThumbMouseDown","handleLowerThumbMouseDown","target","focus","handleWindowMouseUp","handleMouseMove","isMouseDragging","updateDragValue","getDragValue","nativeEvent","clientY","clientX","dragValue","handleUpperThumbTouchStart","handleThumbTouchStart","handleLowerThumbTouchStart","handleTouchEnd","handleTouchMove","isTouchDragging","thisTouch","touches","item","getValidTouch","touchCount","length","i","touchElement","attributes","rolePropName","tabIndex","contains","validTouch","stopTouchDragging","newDragValue","constrainToOppositeEndOfSelection","rangeMin","rangeMax","newLowerValue","newUpperValue","invokeValueChange","stopDragging","constrainedValue","remainder","percentAsValue","defaultValue","prevProps","Object","assign","unhandledProps","generateClassNames","slider","slider__disabled","slider__dragging","slider__touchDragging","slider__incrementing","slider__vertical","slider__horizontal","slider__rtl","slider__modeSingle","slider__modeAdjustUpper","slider__modeAdjustLower","slider__modeAdjustBoth","isVertical","mouseDownCallback","keyDownCallback","touchStartCallback","renderDefaultThumb","draggable","role","onKeyDown","onTouchStart","formattedValue","type","onChange","display","displayName","defaultProps","horizontal"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,iBAArB,QAA+C,gBAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,WAA3B;AACA,OAAOC,UAAP,MAAuB,6CAAvB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,iBAA7C,EAAgEC,cAAhE,EAAgFC,UAAhF,EAA4FC,WAA5F,EAAyGC,eAAzG,EAA0HC,aAA1H,QAAgJ,+BAAhJ;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,+BAAtC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,eAAP,IAA0BC,qBAA1B,QAAwD,sBAAxD;AACA,OAAO,IAAIC,WAAJ;;AACP,CAAC,UAAUA,WAAV,EAAuB;AACpBA,EAAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,YAA5B;AACAA,EAAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,YAA5B;AACH,CAHD,EAGGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CAHd;;IAIMC,M;;;;;AACF;;;AAGA,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN;AACA,UAAKC,YAAL,GAAoB;AAChBC,MAAAA,QAAQ,EAAE,KAAK,CADC;AAEhBC,MAAAA,cAAc,EAAE,KAAK,CAFL;AAGhBC,MAAAA,WAAW,EAAE,KAAK,CAHF;AAIhBC,MAAAA,IAAI,EAAE,KAAK,CAJK;AAKhBC,MAAAA,YAAY,EAAE,KAAK,CALH;AAMhBC,MAAAA,KAAK,EAAE,KAAK,CANI;AAOhBC,MAAAA,QAAQ,EAAE,KAAK,CAPC;AAQhBC,MAAAA,IAAI,EAAE,KAAK,CARK;AAShBC,MAAAA,KAAK,EAAE,KAAK,CATI;AAUhBC,MAAAA,gBAAgB,EAAE,KAAK,CAVP;AAWhBC,MAAAA,aAAa,EAAE,KAAK,CAXJ;AAYhBC,MAAAA,IAAI,EAAE,KAAK,CAZK;AAahBC,MAAAA,IAAI,EAAE,KAAK,CAbK;AAchBC,MAAAA,KAAK,EAAE,KAAK,CAdI;AAehBC,MAAAA,aAAa,EAAE,KAAK,CAfJ;AAgBhBC,MAAAA,aAAa,EAAE,KAAK,CAhBJ;AAiBhBC,MAAAA,wBAAwB,EAAE,KAAK,CAjBf;AAkBhBC,MAAAA,qBAAqB,EAAE,KAAK;AAlBZ,KAApB;AAoBA,UAAKC,WAAL,GAAmBxC,KAAK,CAACyC,SAAN,EAAnB;AACA,UAAKC,kBAAL,GAA0B1C,KAAK,CAACyC,SAAN,EAA1B;AACA,UAAKE,aAAL,GAAqB,CAArB;AACA,UAAKC,WAAL,GAAmB,CAAnB;AACA,UAAKC,kBAAL,GAA0B1B,MAAM,CAAC2B,kBAAjC;AACA;;;;;;AAKA,UAAKC,qBAAL,GAA6B,YAAM;AAC/B,UAAI,MAAKC,KAAL,CAAWC,SAAX,KAAyB,IAA7B,EAAmC;AAC/B,eAAO,IAAP;AACH;;AACD,aAAQjD,KAAK,CAACkD,aAAN,CAAoBnC,aAAa,CAACoC,QAAlC,EAA4C;AAAErB,QAAAA,KAAK,EAAE;AACrDsB,UAAAA,iBAAiB,EAAE,MAAKhC,KAAL,CAAWI,WADuB;AAErD6B,UAAAA,UAAU,EAAE,MAAKjC,KAAL,CAAWK,IAF8B;AAGrD6B,UAAAA,WAAW,EAAE,MAAKN,KAHmC;AAIrDO,UAAAA,sBAAsB,EAAE,MAAKnC,KAAL,CAAWW,gBAJkB;AAKrDyB,UAAAA,oBAAoB,EAAE,MAAKC,cAL0B;AAMrDC,UAAAA,eAAe,EAAE,MAAKV,KAAL,CAAWC;AANyB;AAAT,OAA5C,EAQJjD,KAAK,CAACkD,aAAN,CAAoB,KAApB,EAA2B;AAAES,QAAAA,SAAS,EAAE/C,UAAU,CAAC,MAAKQ,KAAL,CAAWG,cAAX,CAA0BqC,mBAA3B,CAAvB;AAAwEC,QAAAA,KAAK,EAAE;AAClGC,UAAAA,QAAQ,EAAE;AADwF;AAA/E,OAA3B,EAGI9D,KAAK,CAACkD,aAAN,CAAoB,KAApB,EAA2B;AAAES,QAAAA,SAAS,EAAE/C,UAAU,CAAC,MAAKQ,KAAL,CAAWG,cAAX,CAA0BwC,sBAA3B,CAAvB;AAA2EF,QAAAA,KAAK,EAAE;AACrGC,UAAAA,QAAQ,EAAE;AAD2F;AAAlF,OAA3B,CAHJ,EAMI9D,KAAK,CAACkD,aAAN,CAAoBlC,eAApB,EAAqC;AAAE2C,QAAAA,SAAS,EAAE,MAAKvC,KAAL,CAAWG,cAAX,CAA0ByC,sBAAvC;AAA+DC,QAAAA,uBAAuB,EAAEhD,qBAAqB,CAACiD,gBAA9G;AAAgIC,QAAAA,uBAAuB,EAAElD,qBAAqB,CAACmD;AAA/K,OAArC,CANJ,EAOIpE,KAAK,CAACkD,aAAN,CAAoB,KAApB,EAA2B;AAAEmB,QAAAA,GAAG,EAAE,MAAK3B,kBAAZ;AAAgC4B,QAAAA,WAAW,EAAE,MAAKC,oBAAlD;AAAwEZ,QAAAA,SAAS,EAAE/C,UAAU,CAAC,MAAKQ,KAAL,CAAWG,cAAX,CAA0BiD,YAA3B,CAA7F;AAAuIX,QAAAA,KAAK,EAAE;AACjKC,UAAAA,QAAQ,EAAE;AADuJ;AAA9I,OAA3B,CAPJ,EAUI,MAAK1C,KAAL,CAAWqD,QAVf,EAWI,MAAKC,WAAL,CAAiBxD,WAAW,CAACyD,UAA7B,CAXJ,EAYI,MAAKD,WAAL,CAAiBxD,WAAW,CAAC0D,UAA7B,CAZJ,CARI,EAqBJ,MAAKC,wBAAL,EArBI,CAAR;AAsBH,KA1BD;AA2BA;;;;;AAGA,UAAKC,yBAAL,GAAiC,YAAM;AACnC,cAAQ,MAAK1D,KAAL,CAAWK,IAAnB;AACI,aAAK3B,UAAU,CAACiF,UAAhB;AACI;;AACJ,aAAKjF,UAAU,CAACkF,eAAhB;AACI,gBAAKC,YAAL,CAAkB,MAAKjC,KAAL,CAAWkC,UAA7B,EAAyC,MAAK9D,KAAL,CAAWO,KAAX,CAAiBwD,QAA1D;;AACA;;AACJ,aAAKrF,UAAU,CAACsF,eAAhB;AACI,gBAAKH,YAAL,CAAkB,MAAK7D,KAAL,CAAWO,KAAX,CAAiB0D,QAAnC,EAA6C,MAAKrC,KAAL,CAAWsC,UAAxD;;AACA;;AACJ,aAAKxF,UAAU,CAACyF,WAAhB;AACI,gBAAKN,YAAL,CAAkB,MAAKjC,KAAL,CAAWsC,UAA7B,EAAyC,MAAKtC,KAAL,CAAWsC,UAApD;;AACA;AAXR;AAaH,KAdD;AAeA;;;;;AAGA,UAAKE,mBAAL,GAA2B,UAACC,SAAD,EAAYC,UAAZ,EAAwB7D,IAAxB,EAAiC;AACxD,UAAI6D,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAKC,SAA1C,EAAqD;AACjDD,QAAAA,UAAU,GAAG,MAAKtE,KAAL,CAAWO,KAAxB;AACH;;AACD,UAAMI,gBAAgB,GAAG;AACrBsD,QAAAA,QAAQ,EAAE,MAAKO,gBAAL,CAAsB,MAAKC,eAAL,CAAqB,MAAKC,YAAL,CAAkBL,SAAlB,EAA6BJ,QAAlD,EAA4DxD,IAA5D,CAAtB,EAAyF6D,UAAzF,CADW;AAErBP,QAAAA,QAAQ,EAAE,MAAKS,gBAAL,CAAsB,MAAKC,eAAL,CAAqB,MAAKC,YAAL,CAAkBL,SAAlB,EAA6BN,QAAlD,EAA4DtD,IAA5D,CAAtB,EAAyF6D,UAAzF;AAFW,OAAzB;AAIA,aAAO3D,gBAAP;AACH,KATD;AAUA;;;;;AAGA,UAAKgE,sBAAL,GAA8B,UAAC5D,KAAD,EAAW;AACrC,UAAM6D,cAAc,GAAG/F,GAAG,CAAC,MAAKmB,KAAN,EAAa,6BAAb,EAA4C,EAA5C,CAA1B;AACA,aAAO;AACHG,QAAAA,cAAc,EAAE;AACZ0E,UAAAA,eAAe,EAAE9D,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GACX1E,GAAG,CAAC,MAAKmB,KAAN,EAAa,yCAAb,EAAwD,EAAxD,CAAH,CAA+D8E,MAA/D,CAAsE,GAAtE,EAA2EF,cAA3E,CADW,GAEX/F,GAAG,CAAC,MAAKmB,KAAN,EAAa,yCAAb,EAAwD,EAAxD,CAAH,CAA+D8E,MAA/D,CAAsE,GAAtE,EAA2EF,cAA3E,CAHM;AAIZG,UAAAA,0BAA0B,EAAElG,GAAG,CAAC,MAAKmB,KAAN,EAAa,yCAAb,EAAwD,EAAxD,CAJnB;AAKZgF,UAAAA,wBAAwB,EAAEnG,GAAG,CAAC,MAAKmB,KAAN,EAAa,uCAAb,EAAsD,EAAtD;AALjB;AADb,OAAP;AASH,KAXD;AAYA;;;;;AAGA,UAAKiF,kBAAL,GAA0B,UAACC,KAAD,EAAW;AACjC,aAAO,IAAP;AACH,KAFD;AAGA;;;;;AAGA,UAAKC,iBAAL,GAAyB,UAACpE,KAAD,EAAW;AAChC,UAAK,MAAKf,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACkF,eAA/B,IACD7C,KAAK,KAAKjB,WAAW,CAACyD,UADtB,IAEC,MAAKvD,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACsF,eAA/B,IACGjD,KAAK,KAAKjB,WAAW,CAAC0D,UAH1B,IAIC,MAAKxD,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACyF,WAA/B,IACGpD,KAAK,KAAKjB,WAAW,CAAC0D,UAL9B,EAK2C;AACvC,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KAVD;AAWA;;;;;AAGA,UAAKL,oBAAL,GAA4B,UAAC+B,KAAD,EAAW;AACnC,UAAIA,KAAK,CAACE,gBAAN,IAA0B,MAAKC,gBAAL,EAA9B,EAAuD;AACnD;AACH;;AACDH,MAAAA,KAAK,CAACI,cAAN;;AACA,YAAKC,sBAAL;;AACA,UAAMC,eAAe,GAAG,MAAKxF,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAA7C,GAClBP,KAAK,CAACQ,KADY,GAElBR,KAAK,CAACS,KAFZ;;AAGA,UAAMC,QAAQ,GAAG,CAAC,MAAK5F,KAAL,CAAWO,KAAX,CAAiBwD,QAAjB,GAA4B,MAAK/D,KAAL,CAAWO,KAAX,CAAiB0D,QAA9C,IACb,MAAK4B,qBAAL,CAA2BL,eAA3B,CADa,GAEb,MAAKxF,KAAL,CAAWO,KAAX,CAAiB0D,QAFrB;;AAGA,cAAQ,MAAKjE,KAAL,CAAWK,IAAnB;AACI,aAAK3B,UAAU,CAACyF,WAAhB;AACI,gBAAKN,YAAL,CAAkB+B,QAAlB,EAA4BA,QAA5B;;AACA;;AACJ,aAAKlH,UAAU,CAACiF,UAAhB;AACI,gBAAKmC,0BAAL,CAAgCF,QAAhC;;AACA;;AACJ,aAAKlH,UAAU,CAACkF,eAAhB;AACI,gBAAKC,YAAL,CAAkB+B,QAAlB,EAA4B,IAA5B;;AACA;;AACJ,aAAKlH,UAAU,CAACsF,eAAhB;AACI,gBAAKH,YAAL,CAAkB,IAAlB,EAAwB+B,QAAxB;;AACA;AAZR;AAcH,KA1BD;AA2BA;;;;;AAGA,UAAKE,0BAAL,GAAkC,UAACpF,KAAD,EAAW;AACzC,UAAIA,KAAK,IAAI,MAAKkB,KAAL,CAAWkC,UAAxB,EAAoC;AAChC,cAAKD,YAAL,CAAkBnD,KAAlB,EAAyB,IAAzB;AACH,OAFD,MAGK,IAAIA,KAAK,IAAI,MAAKkB,KAAL,CAAWsC,UAAxB,EAAoC;AACrC,cAAKL,YAAL,CAAkB,IAAlB,EAAwBnD,KAAxB;AACH,OAFI,MAGA;AACD;AACA,YAAIA,KAAK,GAAG,MAAKkB,KAAL,CAAWkC,UAAnB,GAAgC,MAAKlC,KAAL,CAAWsC,UAAX,GAAwBxD,KAA5D,EAAmE;AAC/D,gBAAKmD,YAAL,CAAkBnD,KAAlB,EAAyB,IAAzB;AACH,SAFD,MAGK;AACD,gBAAKmD,YAAL,CAAkB,IAAlB,EAAwBnD,KAAxB;AACH;AACJ;AACJ,KAhBD;AAiBA;;;;;AAGA,UAAKqF,eAAL,GAAuB,YAAM;AACzB,UAAMC,YAAY,GAAG,MAAKC,YAAL,EAArB;;AACA,UAAID,YAAY,KAAK,MAAKpE,KAAL,CAAWC,SAAhC,EAA2C;AACvC,cAAKqE,uBAAL;;AACA,cAAKC,QAAL,CAAc;AACVtE,UAAAA,SAAS,EAAEmE;AADD,SAAd;AAGH;AACJ,KARD;AASA;;;;;AAGA,UAAKC,YAAL,GAAoB,YAAM;AACtB,UAAI,MAAK7E,WAAL,CAAiBgF,OAAjB,KAA6B,IAAjC,EAAuC;AACnC,eAAO3G,SAAS,CAAC4G,GAAjB;AACH;;AACD,UAAMC,OAAO,GAAG,MAAKlF,WAAL,CAAiBgF,OAAjB,CAAyBE,OAAzB,YAAqCvG,MAAM,CAACwG,sBAA5C,OAAhB;;AACA,aAAOD,OAAO,KAAK,IAAZ,IACHA,OAAO,CAACE,YAAR,CAAqBzG,MAAM,CAACwG,sBAA5B,MAAwD9G,SAAS,CAAC4G,GAD/D,GAED5G,SAAS,CAAC4G,GAFT,GAGD5G,SAAS,CAACgH,GAHhB;AAIH,KATD;AAUA;;;;;AAGA,UAAKlB,sBAAL,GAA8B,YAAM;AAChC,UAAI,MAAKjE,kBAAL,CAAwB8E,OAAxB,KAAoC,IAAxC,EAA8C;AAC1C;AACH;;AACD,YAAK7E,aAAL,GACI,MAAKvB,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAA7C,GACM,MAAKnE,kBAAL,CAAwB8E,OAAxB,CAAgCM,YADtC,GAEM,MAAKpF,kBAAL,CAAwB8E,OAAxB,CAAgCO,WAH1C;;AAIA,UAAI,MAAKpF,aAAL,KAAuB,CAA3B,EAA8B;AAC1B,cAAKA,aAAL,GAAqB,CAArB;AACH;;AACD,YAAKC,WAAL,GACI,MAAKxB,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAA7C,GACM,MAAKnE,kBAAL,CAAwB8E,OAAxB,CAAgCQ,qBAAhC,GAAwDC,MAD9D,GAEM,MAAKvF,kBAAL,CAAwB8E,OAAxB,CAAgCQ,qBAAhC,GAAwDE,IAHlE;AAIH,KAfD;AAgBA;;;;;AAGA,UAAKC,iBAAL,GAAyB,UAACC,kBAAD,EAAqBC,WAArB,EAAkClG,KAAlC,EAAyCmE,KAAzC,EAAmD;AACxEA,MAAAA,KAAK,CAACI,cAAN;;AACA,UAAI,MAAK1D,KAAL,CAAWsF,cAAf,EAA+B;AAC3B;AACH;;AACD,YAAK3B,sBAAL;;AACA4B,MAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,MAAKC,iBAAtC;;AACA,YAAKlB,QAAL,CAAc;AACVc,QAAAA,WAAW,EAAXA,WADU;AAEVK,QAAAA,WAAW,EAAEvG,KAFH;AAGVmG,QAAAA,cAAc,EAAE,IAHN;AAIVF,QAAAA,kBAAkB,EAAlBA;AAJU,OAAd;;AAMA,YAAKvF,kBAAL,GAA0B1B,MAAM,CAAC2B,kBAAjC;AACA,YAAK6F,cAAL,GAAsBC,UAAU,CAAC,YAAM;AACnC,cAAKC,qBAAL;AACH,OAF+B,EAE7B,EAF6B,CAAhC;AAGH,KAjBD;AAkBA;;;;;;;AAKA,UAAKC,cAAL,GAAsB,YAAM;AACxB,UAAMjH,IAAI,GAAG,MAAKmB,KAAL,CAAWqF,WAAX,GACP,MAAKjH,KAAL,CAAWQ,QADJ,GAEP,MAAKR,KAAL,CAAWS,IAAX,KAAoB,CAApB,GACI,MAAKT,KAAL,CAAWS,IADf,GAEI,CAAC,MAAKT,KAAL,CAAWO,KAAX,CAAiBwD,QAAjB,GAA4B,MAAK/D,KAAL,CAAWO,KAAX,CAAiB0D,QAA9C,IACE,MAAK1C,aALjB;AAMA,UAAIqE,QAAQ,GAAG,MAAKhE,KAAL,CAAW0F,WAAX,KAA2BxH,WAAW,CAACyD,UAAvC,GACT,MAAK3B,KAAL,CAAWsC,UAAX,GAAwBzD,IAAI,GAAG,MAAKmB,KAAL,CAAWoF,kBADjC,GAET,MAAKpF,KAAL,CAAWkC,UAAX,GAAwBrD,IAAI,GAAG,MAAKmB,KAAL,CAAWoF,kBAFhD;;AAGA,UAAI,MAAKhH,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACiF,UAA/B,IACAiC,QAAQ,GAAG,MAAKhE,KAAL,CAAWsC,UADtB,IAEA,MAAKtC,KAAL,CAAW0F,WAAX,KAA2BxH,WAAW,CAACyD,UAF3C,EAEuD;AACnDqC,QAAAA,QAAQ,GAAG,MAAKhE,KAAL,CAAWsC,UAAtB;AACH,OAJD,MAKK,IAAI,MAAKlE,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACiF,UAA/B,IACLiC,QAAQ,GAAG,MAAKhE,KAAL,CAAWkC,UADjB,IAEL,MAAKlC,KAAL,CAAW0F,WAAX,KAA2BxH,WAAW,CAAC0D,UAFtC,EAEkD;AACnDoC,QAAAA,QAAQ,GAAG,MAAKhE,KAAL,CAAWkC,UAAtB;AACH;;AACD,UAAI,MAAKlC,KAAL,CAAW0F,WAAX,KAA2BxH,WAAW,CAACyD,UAA3C,EAAuD;AACnD,cAAKM,YAAL,CAAkB,IAAlB,EAAwB+B,QAAxB;AACH,OAFD,MAGK;AACD,cAAK/B,YAAL,CAAkB+B,QAAlB,EAA4B,IAA5B;AACH;AACJ,KA1BD;AA2BA;;;;;AAGA,UAAK6B,qBAAL,GAA6B,YAAM;AAC/BE,MAAAA,YAAY,CAAC,MAAKJ,cAAN,CAAZ;;AACA,YAAKG,cAAL;;AACA,YAAKjG,kBAAL,GAA0B,MAAKA,kBAAL,GAA0B1B,MAAM,CAAC6H,qBAA3D;;AACA,UAAI,MAAKnG,kBAAL,GAA0B1B,MAAM,CAAC8H,iBAArC,EAAwD;AACpD,cAAKpG,kBAAL,GAA0B1B,MAAM,CAAC8H,iBAAjC;AACH;;AACD,YAAKN,cAAL,GAAsBC,UAAU,CAAC,YAAM;AACnC,cAAKC,qBAAL;AACH,OAF+B,EAE7B,MAAKhG,kBAFwB,CAAhC;AAGH,KAVD;AAWA;;;;;AAGA,UAAKqG,gBAAL,GAAwB,YAAM;AAC1B,UAAI,CAAC,MAAKlG,KAAL,CAAWsF,cAAhB,EAAgC;AAC5B;AACH;;AACDC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,OAA3B,EAAoC,MAAKV,iBAAzC;;AACA,YAAKlB,QAAL,CAAc;AACVc,QAAAA,WAAW,EAAE,KADH;AAEVC,QAAAA,cAAc,EAAE;AAFN,OAAd;;AAIAS,MAAAA,YAAY,CAAC,MAAKJ,cAAN,CAAZ;AACH,KAVD;AAWA;;;;;AAGA,UAAK1B,qBAAL,GAA6B,UAACmC,QAAD,EAAc;AACvC,UAAIC,GAAG,GAAG,CAAV;;AACA,UAAI,MAAKjI,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAAjD,EAA2D;AACvDwC,QAAAA,GAAG,GAAG,CAAC,MAAKzG,WAAL,GAAmBwG,QAApB,IAAgC,MAAKzG,aAA3C;AACH,OAFD,MAGK;AACD0G,QAAAA,GAAG,GAAG,CAACD,QAAQ,GAAG,MAAKxG,WAAjB,IAAgC,MAAKD,aAA3C;AACH;;AACD,UAAI0G,GAAG,GAAG,CAAV,EAAa;AACTA,QAAAA,GAAG,GAAG,CAAN;AACH,OAFD,MAGK,IAAIA,GAAG,GAAG,CAAV,EAAa;AACdA,QAAAA,GAAG,GAAG,CAAN;AACH;;AACD,UAAI,MAAKrG,KAAL,CAAWC,SAAX,KAAyBpC,SAAS,CAACgH,GAAnC,IACA,MAAKzG,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QADjD,EAC2D;AACvDwC,QAAAA,GAAG,GAAG,IAAIA,GAAV;AACH;;AACD,aAAOA,GAAP;AACH,KAnBD;AAoBA;;;;;AAGA,UAAKC,uBAAL,GAA+B,UAAChD,KAAD,EAAW;AACtC,YAAKiD,kBAAL,CAAwBjD,KAAxB,EAA+BpF,WAAW,CAACyD,UAA3C;AACH,KAFD;;AAGA,UAAK6E,uBAAL,GAA+B,UAAClD,KAAD,EAAW;AACtC,YAAKiD,kBAAL,CAAwBjD,KAAxB,EAA+BpF,WAAW,CAAC0D,UAA3C;AACH,KAFD;;AAGA,UAAK2E,kBAAL,GAA0B,UAACjD,KAAD,EAAQnE,KAAR,EAAkB;AACxC,UAAImE,KAAK,CAACE,gBAAN,IAA0B,MAAKC,gBAAL,EAA9B,EAAuD;AACnDH,QAAAA,KAAK,CAACI,cAAN;AACA;AACH;;AACD,cAAQJ,KAAK,CAACmD,OAAd;AACI,aAAKrJ,gBAAL;AACI,gBAAK+H,iBAAL,CAAuB,CAAC,CAAxB,EAA2B,KAA3B,EAAkChG,KAAlC,EAAyCmE,KAAzC;;AACA;;AACJ,aAAKhG,iBAAL;AACI,gBAAK6H,iBAAL,CAAuB,MAAKnF,KAAL,CAAWC,SAAX,KAAyBpC,SAAS,CAAC4G,GAAnC,GAAyC,CAAzC,GAA6C,CAAC,CAArE,EAAwE,KAAxE,EAA+EtF,KAA/E,EAAsFmE,KAAtF;;AACA;;AACJ,aAAK/F,cAAL;AACI,gBAAK4H,iBAAL,CAAuB,CAAvB,EAA0B,KAA1B,EAAiChG,KAAjC,EAAwCmE,KAAxC;;AACA;;AACJ,aAAKjG,gBAAL;AACI,gBAAK8H,iBAAL,CAAuB,MAAKnF,KAAL,CAAWC,SAAX,KAAyBpC,SAAS,CAAC4G,GAAnC,GAAyC,CAAC,CAA1C,GAA8C,CAArE,EAAwE,KAAxE,EAA+EtF,KAA/E,EAAsFmE,KAAtF;;AACA;;AACJ,aAAK5F,eAAL;AACI,cAAI,MAAKU,KAAL,CAAWQ,QAAX,KAAwB+D,SAA5B,EAAuC;AACnC,kBAAKwC,iBAAL,CAAuB,CAAC,CAAxB,EAA2B,IAA3B,EAAiChG,KAAjC,EAAwCmE,KAAxC;AACH;;AACD;;AACJ,aAAK3F,aAAL;AACI,cAAI,MAAKS,KAAL,CAAWQ,QAAX,KAAwB+D,SAA5B,EAAuC;AACnC,kBAAKwC,iBAAL,CAAuB,CAAvB,EAA0B,IAA1B,EAAgChG,KAAhC,EAAuCmE,KAAvC;AACH;;AACD;;AACJ,aAAK7F,WAAL;AACI,gBAAKiJ,WAAL,CAAiBvH,KAAjB;;AACA;;AACJ,aAAK3B,UAAL;AACI,gBAAKmJ,WAAL,CAAiBxH,KAAjB;;AACA;AA5BR;AA8BH,KAnCD;AAoCA;;;;;AAGA,UAAKuH,WAAL,GAAmB,UAACvH,KAAD,EAAW;AAC1B,UAAMyH,UAAU,GAAG,MAAKC,mBAAL,CAAyB,IAAzB,CAAnB;;AACA,UAAI1H,KAAK,KAAKjB,WAAW,CAACyD,UAA1B,EAAsC;AAClC,cAAKM,YAAL,CAAkB,IAAlB,EAAwB2E,UAAU,CAACvE,QAAnC;AACH,OAFD,MAGK;AACD,cAAKJ,YAAL,CAAkB2E,UAAU,CAACvE,QAA7B,EAAuC,IAAvC;AACH;AACJ,KARD;AASA;;;;;AAGA,UAAKsE,WAAL,GAAmB,UAACxH,KAAD,EAAW;AAC1B,UAAMyH,UAAU,GAAG,MAAKC,mBAAL,CAAyB,IAAzB,CAAnB;;AACA,UAAI1H,KAAK,KAAKjB,WAAW,CAACyD,UAA1B,EAAsC;AAClC,cAAKM,YAAL,CAAkB,IAAlB,EAAwB2E,UAAU,CAACzE,QAAnC;AACH,OAFD,MAGK;AACD,cAAKF,YAAL,CAAkB2E,UAAU,CAACzE,QAA7B,EAAuC,IAAvC;AACH;AACJ,KARD;AASA;;;;;AAGA,UAAK2E,yBAAL,GAAiC,UAACC,CAAD,EAAO;AACpC,YAAKC,oBAAL,CAA0BD,CAA1B,EAA6B7I,WAAW,CAACyD,UAAzC;AACH,KAFD;;AAGA,UAAKsF,yBAAL,GAAiC,UAACF,CAAD,EAAO;AACpC,YAAKC,oBAAL,CAA0BD,CAA1B,EAA6B7I,WAAW,CAAC0D,UAAzC;AACH,KAFD;;AAGA,UAAKoF,oBAAL,GAA4B,UAACD,CAAD,EAAI5H,KAAJ,EAAc;AACtC,UAAI4H,CAAC,CAACvD,gBAAF,IAAsB,MAAKC,gBAAL,EAA1B,EAAmD;AAC/C;AACH;;AACDsD,MAAAA,CAAC,CAACrD,cAAF;AACAqD,MAAAA,CAAC,CAACG,MAAF,CAASC,KAAT;AACA5B,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,MAAK4B,mBAAxC;AACA7B,MAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,MAAK6B,eAA1C;;AACA,YAAK9C,QAAL,CAAc;AACV+C,QAAAA,eAAe,EAAE,IADP;AAEV5B,QAAAA,WAAW,EAAEvG;AAFH,OAAd;;AAIA,YAAKoI,eAAL,CAAqB,MAAKC,YAAL,CAAkBT,CAAC,CAACU,WAApB,EAAiCtI,KAAjC,CAArB,EAA8DA,KAA9D;AACH,KAbD;AAcA;;;;;AAGA,UAAKkI,eAAL,GAAuB,UAAC/D,KAAD,EAAW;AAC9B,UAAI,MAAKlF,KAAL,CAAWE,QAAX,IAAuBgF,KAAK,CAACE,gBAAjC,EAAmD;AAC/C;AACH;;AACD,YAAK+D,eAAL,CAAqB,MAAKC,YAAL,CAAkBlE,KAAlB,EAAyB,MAAKtD,KAAL,CAAW0F,WAApC,CAArB,EAAuE,MAAK1F,KAAL,CAAW0F,WAAlF;AACH,KALD;AAMA;;;;;AAGA,UAAK8B,YAAL,GAAoB,UAAClE,KAAD,EAAQnE,KAAR,EAAkB;AAClC,YAAKwE,sBAAL;;AACA,UAAMC,eAAe,GAAG,MAAKxF,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAA7C,GAClBP,KAAK,CAACoE,OADY,GAElBpE,KAAK,CAACqE,OAFZ;;AAGA,UAAMC,SAAS,GAAG,CAAC,MAAKxJ,KAAL,CAAWO,KAAX,CAAiBwD,QAAjB,GAA4B,MAAK/D,KAAL,CAAWO,KAAX,CAAiB0D,QAA9C,IACd,MAAK4B,qBAAL,CAA2BL,eAA3B,CADc,GAEd,MAAKxF,KAAL,CAAWO,KAAX,CAAiB0D,QAFrB;;AAGA,aAAOuF,SAAP;AACH,KATD;AAUA;;;;;AAGA,UAAKC,0BAAL,GAAkC,UAACd,CAAD,EAAO;AACrC,YAAKe,qBAAL,CAA2Bf,CAA3B,EAA8B7I,WAAW,CAACyD,UAA1C;AACH,KAFD;;AAGA,UAAKoG,0BAAL,GAAkC,UAAChB,CAAD,EAAO;AACrC,YAAKe,qBAAL,CAA2Bf,CAA3B,EAA8B7I,WAAW,CAAC0D,UAA1C;AACH,KAFD;;AAGA,UAAKkG,qBAAL,GAA6B,UAACf,CAAD,EAAI5H,KAAJ,EAAc;AACvC,UAAI4H,CAAC,CAACvD,gBAAF,IAAsB,MAAKC,gBAAL,EAA1B,EAAmD;AAC/C;AACH;;AACDsD,MAAAA,CAAC,CAACrD,cAAF;AACAqD,MAAAA,CAAC,CAACG,MAAF,CAASC,KAAT;AACA5B,MAAAA,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAoC,MAAKwC,cAAzC;AACAzC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,aAAxB,EAAuC,MAAKwC,cAA5C;AACAzC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,MAAKyC,eAA1C;;AACA,YAAK1D,QAAL,CAAc;AACV2D,QAAAA,eAAe,EAAE,IADP;AAEVxC,QAAAA,WAAW,EAAEvG;AAFH,OAAd;;AAIA,UAAMgJ,SAAS,GAAGpB,CAAC,CAACU,WAAF,CAAcW,OAAd,CAAsBC,IAAtB,CAA2B,CAA3B,CAAlB;;AACA,YAAKd,eAAL,CAAqB,MAAKC,YAAL,CAAkBW,SAAlB,EAA6BhJ,KAA7B,CAArB,EAA0DA,KAA1D;AACH,KAfD;AAgBA;;;;;AAGA,UAAKmJ,aAAL,GAAqB,UAAChF,KAAD,EAAW;AAC5B,UAAIpG,KAAK,CAAC,MAAKsC,WAAL,CAAiBgF,OAAlB,CAAT,EAAqC;AACjC,eAAO,IAAP;AACH;;AACD,UAAM+D,UAAU,GAAGjF,KAAK,CAAC8E,OAAN,CAAcI,MAAjC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,YAAMN,SAAS,GAAG7E,KAAK,CAAC8E,OAAN,CAAcC,IAAd,CAAmBI,CAAnB,CAAlB;AACA,YAAMC,YAAY,GAAGP,SAAS,CAACjB,MAA/B;;AACA,YAAIwB,YAAY,CAACC,UAAb,CAAwBxK,MAAM,CAACyK,YAA/B,EAA6C9J,KAA7C,KAAuD,QAAvD,IACA4J,YAAY,CAACG,QAAb,KAA0B,CAD1B,IAEA,MAAKrJ,WAAL,CAAiBgF,OAAjB,CAAyBsE,QAAzB,CAAkCJ,YAAlC,CAFJ,EAEqD;AACjD,iBAAOP,SAAP;AACH;AACJ;;AACD,aAAO,IAAP;AACH,KAfD;AAgBA;;;;;AAGA,UAAKF,eAAL,GAAuB,UAAC3E,KAAD,EAAW;AAC9B,UAAI,MAAKlF,KAAL,CAAWE,QAAX,IAAuBgF,KAAK,CAACE,gBAAjC,EAAmD;AAC/C;AACH;;AACD,UAAMuF,UAAU,GAAG,MAAKT,aAAL,CAAmBhF,KAAnB,CAAnB;;AACA,UAAIyF,UAAU,KAAK,IAAnB,EAAyB;AACrB,cAAKC,iBAAL;;AACA;AACH;;AACD,YAAKzB,eAAL,CAAqB,MAAKC,YAAL,CAAkBuB,UAAlB,EAA8B,MAAK/I,KAAL,CAAW0F,WAAzC,CAArB,EAA4E,MAAK1F,KAAL,CAAW0F,WAAvF;AACH,KAVD;AAWA;;;;;AAGA,UAAKsC,cAAL,GAAsB,UAAC1E,KAAD,EAAW;AAC7BA,MAAAA,KAAK,CAACI,cAAN;;AACA,YAAKsF,iBAAL;AACH,KAHD;AAIA;;;;;AAGA,UAAKzB,eAAL,GAAuB,UAACK,SAAD,EAAYzI,KAAZ,EAAsB;AACzC,UAAMJ,gBAAgB,GAAG,MAAK8H,mBAAL,CAAyB,IAAzB,CAAzB;;AACA,UAAMoC,YAAY,GAAG,MAAKrG,gBAAL,CAAsBgF,SAAtB,EAAiC7I,gBAAjC,CAArB;;AACA,YAAKwF,QAAL,CAAc;AACVqD,QAAAA,SAAS,EAAEqB;AADD,OAAd;;AAGA,UAAI9J,KAAK,KAAKjB,WAAW,CAAC0D,UAA1B,EAAsC;AAClC,cAAKK,YAAL,CAAkBgH,YAAlB,EAAgC,IAAhC;AACH,OAFD,MAGK;AACD,cAAKhH,YAAL,CAAkB,IAAlB,EAAwBgH,YAAxB;AACH;AACJ,KAZD;AAaA;;;;;AAGA,UAAKpC,mBAAL,GAA2B,UAACqC,iCAAD,EAAuC;AAC9D,UAAIC,QAAQ,GAAG,MAAK/K,KAAL,CAAWO,KAAX,CAAiB0D,QAAhC;AACA,UAAI+G,QAAQ,GAAG,MAAKhL,KAAL,CAAWO,KAAX,CAAiBwD,QAAhC;;AACA,UAAI,MAAK/D,KAAL,CAAWW,gBAAX,KAAgC4D,SAApC,EAA+C;AAC3CwG,QAAAA,QAAQ,GACJ,MAAK/K,KAAL,CAAWW,gBAAX,CAA4BsD,QAA5B,GAAuC8G,QAAvC,GACM,MAAK/K,KAAL,CAAWW,gBAAX,CAA4BsD,QADlC,GAEM8G,QAHV;AAIAC,QAAAA,QAAQ,GACJ,MAAKhL,KAAL,CAAWW,gBAAX,CAA4BoD,QAA5B,GAAuCiH,QAAvC,GACM,MAAKhL,KAAL,CAAWW,gBAAX,CAA4BoD,QADlC,GAEMgH,QAHV;AAIH;;AACD,UAAI,MAAK/K,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACyF,WAA/B,IACA2G,iCADJ,EACuC;AACnC,YAAI,MAAKlJ,KAAL,CAAW0F,WAAX,KAA2BxH,WAAW,CAAC0D,UAA3C,EAAuD;AACnDwH,UAAAA,QAAQ,GAAG,MAAKpJ,KAAL,CAAWsC,UAAtB;AACH,SAFD,MAGK;AACD6G,UAAAA,QAAQ,GAAG,MAAKnJ,KAAL,CAAWkC,UAAtB;AACH;AACJ;;AACD,aAAO;AACHG,QAAAA,QAAQ,EAAE8G,QADP;AAEHhH,QAAAA,QAAQ,EAAEiH;AAFP,OAAP;AAIH,KA1BD;AA2BA;;;;;AAGA,UAAKtG,YAAL,GAAoB,UAAChE,KAAD,EAAW;AAC3B,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,gBAAQ,MAAKV,KAAL,CAAWK,IAAnB;AACI,eAAK3B,UAAU,CAACiF,UAAhB;AACA,eAAKjF,UAAU,CAACyF,WAAhB;AACI,mBAAO;AACHF,cAAAA,QAAQ,EAAEvD,KADP;AAEHqD,cAAAA,QAAQ,EAAErD;AAFP,aAAP;;AAIJ,eAAKhC,UAAU,CAACkF,eAAhB;AACI,mBAAO;AACHK,cAAAA,QAAQ,EAAEvD,KADP;AAEHqD,cAAAA,QAAQ,EAAE,MAAK/D,KAAL,CAAWO,KAAX,CAAiBwD;AAFxB,aAAP;;AAIJ,eAAKrF,UAAU,CAACsF,eAAhB;AACI,mBAAO;AACHC,cAAAA,QAAQ,EAAE,MAAKjE,KAAL,CAAWO,KAAX,CAAiB0D,QADxB;AAEHF,cAAAA,QAAQ,EAAErD;AAFP,aAAP;AAbR;AAkBH,OAnBD,MAoBK,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAChC,eAAOA,KAAP;AACH;AACJ,KAxBD;AAyBA;;;;;AAGA,UAAKmD,YAAL,GAAoB,UAACC,UAAD,EAAaI,UAAb,EAA4B;AAC5C,UAAI+G,aAAa,GAAG,MAAKrJ,KAAL,CAAWkC,UAA/B;AACA,UAAIoH,aAAa,GAAG,MAAKtJ,KAAL,CAAWsC,UAA/B;;AACA,UAAIJ,UAAU,KAAK,IAAnB,EAAyB;AACrBmH,QAAAA,aAAa,GAAG,MAAKzG,gBAAL,CAAsB,MAAKC,eAAL,CAAqBX,UAArB,EAAiC,MAAK9D,KAAL,CAAWS,IAA5C,CAAtB,EAAyE,MAAKT,KAAL,CAAWO,KAApF,CAAhB;AACH;;AACD,UAAI2D,UAAU,KAAK,IAAnB,EAAyB;AACrBgH,QAAAA,aAAa,GAAG,MAAK1G,gBAAL,CAAsB,MAAKC,eAAL,CAAqBP,UAArB,EAAiC,MAAKlE,KAAL,CAAWS,IAA5C,CAAtB,EAAyE,MAAKT,KAAL,CAAWO,KAApF,CAAhB;AACH;;AACD,UAAI,MAAKqB,KAAL,CAAWsC,UAAX,KAA0BgH,aAA1B,IACA,MAAKtJ,KAAL,CAAWkC,UAAX,KAA0BmH,aAD9B,EAC6C;AACzC;AACH;;AACD,YAAKE,iBAAL,CAAuBF,aAAvB,EAAsCC,aAAtC;;AACA,UAAI,MAAKlL,KAAL,CAAWU,KAAX,KAAqB6D,SAAzB,EAAoC;AAChC,cAAK4B,QAAL,CAAc;AACVrC,UAAAA,UAAU,EAAE,MAAK9D,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACyF,WAA/B,GACN+G,aADM,GAEND,aAHI;AAIV/G,UAAAA,UAAU,EAAEgH;AAJF,SAAd;AAMH;AACJ,KAtBD;AAuBA;;;;;AAGA,UAAKC,iBAAL,GAAyB,UAACrH,UAAD,EAAaI,UAAb,EAA4B;AACjD,UAAI,OAAO,MAAKlE,KAAL,CAAWY,aAAlB,KAAoC,UAAxC,EAAoD;AAChD,gBAAQ,MAAKZ,KAAL,CAAWK,IAAnB;AACI,eAAK3B,UAAU,CAACiF,UAAhB;AACI,kBAAK3D,KAAL,CAAWY,aAAX,CAAyB;AACrBqD,cAAAA,QAAQ,EAAEH,UADW;AAErBC,cAAAA,QAAQ,EAAEG;AAFW,aAAzB;;AAIA;;AACJ,eAAKxF,UAAU,CAACsF,eAAhB;AACA,eAAKtF,UAAU,CAACyF,WAAhB;AACI,kBAAKnE,KAAL,CAAWY,aAAX,CAAyBsD,UAAzB;;AACA;;AACJ,eAAKxF,UAAU,CAACkF,eAAhB;AACI,kBAAK5D,KAAL,CAAWY,aAAX,CAAyBkD,UAAzB;;AACA;AAbR;AAeH;AACJ,KAlBD;AAmBA;;;;;AAGA,UAAKkF,mBAAL,GAA2B,UAAC9D,KAAD,EAAW;AAClC,YAAKkG,YAAL;AACH,KAFD;AAGA;;;;;AAGA,UAAK/D,iBAAL,GAAyB,UAACnC,KAAD,EAAW;AAChC,cAAQA,KAAK,CAACmD,OAAd;AACI,aAAKrJ,gBAAL;AACA,aAAKE,iBAAL;AACA,aAAKC,cAAL;AACA,aAAKF,gBAAL;AACA,aAAKK,eAAL;AACA,aAAKC,aAAL;AACI,gBAAKuI,gBAAL;;AACA;AARR;AAUH,KAXD;AAYA;;;;;AAGA,UAAKsD,YAAL,GAAoB,YAAM;AACtB,UAAI,CAAC,MAAKxJ,KAAL,CAAWsH,eAAhB,EAAiC;AAC7B;AACH;;AACD/B,MAAAA,MAAM,CAACY,mBAAP,CAA2B,SAA3B,EAAsC,MAAKiB,mBAA3C;AACA7B,MAAAA,MAAM,CAACY,mBAAP,CAA2B,WAA3B,EAAwC,MAAKkB,eAA7C;;AACA,YAAK9C,QAAL,CAAc;AACV+C,QAAAA,eAAe,EAAE;AADP,OAAd;AAGH,KATD;AAUA;;;;;AAGA,UAAK0B,iBAAL,GAAyB,YAAM;AAC3B,UAAI,CAAC,MAAKhJ,KAAL,CAAWkI,eAAhB,EAAiC;AAC7B;AACH;;AACD3C,MAAAA,MAAM,CAACY,mBAAP,CAA2B,UAA3B,EAAuC,MAAK6B,cAA5C;AACAzC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,aAA3B,EAA0C,MAAK6B,cAA/C;AACAzC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,WAA3B,EAAwC,MAAK8B,eAA7C;;AACA,YAAK1D,QAAL,CAAc;AACV2D,QAAAA,eAAe,EAAE;AADP,OAAd;AAGH,KAVD;AAWA;;;;;AAGA,UAAK5D,uBAAL,GAA+B,YAAM;AACjC,YAAKkF,YAAL;;AACA,YAAKR,iBAAL;;AACA,YAAK9C,gBAAL;AACH,KAJD;AAKA;;;;;AAGA,UAAKtD,gBAAL,GAAwB,UAAC9D,KAAD,EAAQH,KAAR,EAAkB;AACtC,UAAIqF,QAAQ,GAAGlF,KAAf;;AACA,UAAIkF,QAAQ,GAAGrF,KAAK,CAACwD,QAArB,EAA+B;AAC3B6B,QAAAA,QAAQ,GAAGrF,KAAK,CAACwD,QAAjB;AACH,OAFD,MAGK,IAAI6B,QAAQ,GAAGrF,KAAK,CAAC0D,QAArB,EAA+B;AAChC2B,QAAAA,QAAQ,GAAGrF,KAAK,CAAC0D,QAAjB;AACH;;AACD,aAAO2B,QAAP;AACH,KATD;AAUA;;;;;AAGA,UAAKnB,eAAL,GAAuB,UAAC/D,KAAD,EAAQD,IAAR,EAAiB;AACpC;AACA;AACA;AACA;AACA,UAAI4K,gBAAgB,GAAG3K,KAAK,GAAG,MAAKV,KAAL,CAAWO,KAAX,CAAiB0D,QAAhD;AACA,UAAMqH,SAAS,GAAGD,gBAAgB,GAAG5K,IAArC;AACA4K,MAAAA,gBAAgB,GACZC,SAAS,IAAI7K,IAAI,GAAG,CAApB,CAAsB;AAAtB,QACM4K,gBAAgB,GAAGC,SAAnB,GAA+B7K,IADrC,CAC0C;AAD1C,QAEM4K,gBAAgB,GAAGC,SAH7B;AAIA,aAAOD,gBAAgB,GAAG,MAAKrL,KAAL,CAAWO,KAAX,CAAiB0D,QAA3C;AACH,KAZD;AAaA;;;;;AAGA,UAAK5B,cAAL,GAAsB,UAAC3B,KAAD,EAAW;AAC7B,aAAS,CAACA,KAAK,GAAG,MAAKV,KAAL,CAAWO,KAAX,CAAiB0D,QAA1B,KACJ,MAAKjE,KAAL,CAAWO,KAAX,CAAiBwD,QAAjB,GAA4B,MAAK/D,KAAL,CAAWO,KAAX,CAAiB0D,QADzC,CAAD,GAEJ,GAFJ;AAGH,KAJD;AAKA;;;;;AAGA,UAAKsH,cAAL,GAAsB,UAAC7K,KAAD,EAAW;AAC7B,aAAS,CAAC,MAAKV,KAAL,CAAWO,KAAX,CAAiBwD,QAAjB,GAA4B,MAAK/D,KAAL,CAAWO,KAAX,CAAiB0D,QAA9C,IAA0D,GAA3D,GAAkEvD,KAAlE,GACJ,MAAKV,KAAL,CAAWO,KAAX,CAAiB0D,QADrB;AAEH,KAHD;AAIA;;;;;AAGA,UAAKoB,gBAAL,GAAwB,YAAM;AAC1B,UAAI,MAAKrF,KAAL,CAAWE,QAAX,IACA,MAAK0B,KAAL,CAAWsH,eADX,IAEA,MAAKtH,KAAL,CAAWsF,cAFX,IAGA,MAAKtF,KAAL,CAAWkI,eAHf,EAGgC;AAC5B,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH,KARD;;AASA,QAAIxJ,YAAY,GAAG;AACf2D,MAAAA,QAAQ,EAAE,MAAKjE,KAAL,CAAWO,KAAX,CAAiB0D,QADZ;AAEfF,MAAAA,QAAQ,EAAE,MAAK/D,KAAL,CAAWO,KAAX,CAAiBwD;AAFZ,KAAnB;;AAIA,QAAI,MAAK/D,KAAL,CAAWU,KAAX,KAAqB6D,SAAzB,EAAoC;AAChCjE,MAAAA,YAAY,GAAG,MAAK8D,mBAAL,CAAyB,MAAKpE,KAAL,CAAWU,KAApC,EAA2C,MAAKV,KAAL,CAAWW,gBAAtD,EAAwE,MAAKX,KAAL,CAAWS,IAAnF,CAAf;AACH,KAFD,MAGK,IAAI,MAAKT,KAAL,CAAWM,YAAX,KAA4BiE,SAAhC,EAA2C;AAC5CjE,MAAAA,YAAY,GAAG,MAAK8D,mBAAL,CAAyB,MAAKpE,KAAL,CAAWM,YAApC,EAAkD,MAAKN,KAAL,CAAWW,gBAA7D,EAA+E,MAAKX,KAAL,CAAWS,IAA1F,CAAf;AACH,KAFI,MAGA;AACD,UAAI+K,YAAY,GAAG;AACfvH,QAAAA,QAAQ,EAAE,CADK;AAEfF,QAAAA,QAAQ,EAAE;AAFK,OAAnB;;AAIA,cAAQ,MAAK/D,KAAL,CAAWK,IAAnB;AACI,aAAK3B,UAAU,CAACyF,WAAhB;AACIqH,UAAAA,YAAY,GAAG;AACXvH,YAAAA,QAAQ,EAAE,MAAKsH,cAAL,CAAoB,EAApB,CADC;AAEXxH,YAAAA,QAAQ,EAAE,MAAKwH,cAAL,CAAoB,EAApB;AAFC,WAAf;AAIA;;AACJ,aAAK7M,UAAU,CAACiF,UAAhB;AACI6H,UAAAA,YAAY,GAAG;AACXvH,YAAAA,QAAQ,EAAE,MAAKsH,cAAL,CAAoB,EAApB,CADC;AAEXxH,YAAAA,QAAQ,EAAE,MAAKwH,cAAL,CAAoB,EAApB;AAFC,WAAf;AAIA;;AACJ,aAAK7M,UAAU,CAACkF,eAAhB;AACI4H,UAAAA,YAAY,GAAG;AACXvH,YAAAA,QAAQ,EAAE,MAAKsH,cAAL,CAAoB,EAApB,CADC;AAEXxH,YAAAA,QAAQ,EAAE,MAAK/D,KAAL,CAAWO,KAAX,CAAiBwD;AAFhB,WAAf;AAIA;;AACJ,aAAKrF,UAAU,CAACsF,eAAhB;AACIwH,UAAAA,YAAY,GAAG;AACXvH,YAAAA,QAAQ,EAAE,MAAKjE,KAAL,CAAWO,KAAX,CAAiB0D,QADhB;AAEXF,YAAAA,QAAQ,EAAE,MAAKwH,cAAL,CAAoB,EAApB;AAFC,WAAf;AAIA;AAxBR;;AA0BAjL,MAAAA,YAAY,GAAG,MAAK8D,mBAAL,CAAyBoH,YAAzB,EAAuC,MAAKxL,KAAL,CAAWW,gBAAlD,EAAoE,MAAKX,KAAL,CAAWS,IAA/E,CAAf;AACH;;AACD,UAAKmB,KAAL,GAAa;AACT4H,MAAAA,SAAS,EAAE,CAAC,CADH;AAETtF,MAAAA,UAAU,EAAE5D,YAAY,CAACyD,QAFhB;AAGTD,MAAAA,UAAU,EAAExD,YAAY,CAAC2D,QAHhB;AAITqD,MAAAA,WAAW,EAAE,IAJJ;AAKT4B,MAAAA,eAAe,EAAE,KALR;AAMTY,MAAAA,eAAe,EAAE,KANR;AAOT5C,MAAAA,cAAc,EAAE,KAPP;AAQTF,MAAAA,kBAAkB,EAAE,CARX;AASTC,MAAAA,WAAW,EAAE,KATJ;AAUTpF,MAAAA,SAAS,EAAE;AAVF,KAAb;AA3wBe;AAuxBlB;AACD;;;;;;;wCAGoB;AAChB,WAAKkE,eAAL;AACH;;;2CACsB;AACnB,WAAKG,uBAAL;AACH;;;uCACkBuF,S,EAAW;AAC1B,UAAIA,SAAS,CAACvL,QAAV,KAAuB,KAAKF,KAAL,CAAWE,QAAlC,IAA8C,KAAKF,KAAL,CAAWE,QAA7D,EAAuE;AACnE,aAAKgG,uBAAL;AACH;;AACD,UAAIuF,SAAS,CAAC/K,KAAV,KAAoB,KAAKV,KAAL,CAAWU,KAA/B,IAAwC,KAAKV,KAAL,CAAWU,KAAX,KAAqB6D,SAAjE,EAA4E;AACxE,YAAMqB,QAAQ,GAAG,KAAKxB,mBAAL,CAAyB,KAAKpE,KAAL,CAAWU,KAApC,EAA2C,KAAKV,KAAL,CAAWW,gBAAtD,EAAwE,KAAKX,KAAL,CAAWS,IAAnF,CAAjB;AACA,aAAK0F,QAAL,CAAc;AACVrC,UAAAA,UAAU,EAAE8B,QAAQ,CAAC3B,QADX;AAEVC,UAAAA,UAAU,EAAE0B,QAAQ,CAAC7B;AAFX,SAAd;AAIH,OAND,MAOK,IAAI0H,SAAS,CAAC9K,gBAAV,KAA+B,KAAKX,KAAL,CAAWW,gBAA1C,IACL8K,SAAS,CAAChL,IAAV,KAAmB,KAAKT,KAAL,CAAWS,IAD7B,EACmC;AACpC,aAAKyF,uBAAL;AACA,aAAKrC,YAAL,CAAkB,KAAKjC,KAAL,CAAWkC,UAA7B,EAAyC,KAAKlC,KAAL,CAAWsC,UAApD;AACH;;AACD,UAAIuH,SAAS,CAACpL,IAAV,KAAmB,KAAKL,KAAL,CAAWK,IAAlC,EAAwC;AACpC,aAAK6F,uBAAL;AACA,aAAKxC,yBAAL;AACH;;AACD,WAAKqC,eAAL;AACH;AACD;;;;;;6BAGS;AACL,aAAQnH,KAAK,CAACkD,aAAN,CAAoB,KAApB,EAA2B4J,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,cAAL,EAAlB,EAAyC;AAAE3I,QAAAA,GAAG,EAAE,KAAK7B,WAAZ;AAAyBmB,QAAAA,SAAS,EAAE,KAAKsJ,kBAAL;AAApC,OAAzC,CAA3B,EAAsI,KAAKlK,qBAAL,EAAtI,CAAR;AACH;AACD;;;;;;yCAGqB;AAAA,kCACqO,KAAK3B,KAAL,CAAWG,cADhP;AAAA,UACT2L,MADS,yBACTA,MADS;AAAA,UACDC,gBADC,yBACDA,gBADC;AAAA,UACiBC,gBADjB,yBACiBA,gBADjB;AAAA,UACmCC,qBADnC,yBACmCA,qBADnC;AAAA,UAC0DC,oBAD1D,yBAC0DA,oBAD1D;AAAA,UACgFC,gBADhF,yBACgFA,gBADhF;AAAA,UACkGC,kBADlG,yBACkGA,kBADlG;AAAA,UACsHC,WADtH,yBACsHA,WADtH;AAAA,UACmIC,kBADnI,yBACmIA,kBADnI;AAAA,UACuJC,uBADvJ,yBACuJA,uBADvJ;AAAA,UACgLC,uBADhL,yBACgLA,uBADhL;AAAA,UACyMC,sBADzM,yBACyMA,sBADzM;AAEjB,UAAMC,UAAU,GAAG,KAAK1M,KAAL,CAAWI,WAAX,KAA2BzB,iBAAiB,CAAC8G,QAAhE;AACA,4FAAgCjG,UAAU,CAACsM,MAAD,EAAS,CAACC,gBAAD,EAAmB,KAAK/L,KAAL,CAAWE,QAA9B,CAAT,EAAkD,CACxF8L,gBADwF,EAExF,KAAKpK,KAAL,CAAWsH,eAAX,IAA8B,KAAKtH,KAAL,CAAWkI,eAF+C,CAAlD,EAGvC,CAACmC,qBAAD,EAAwB,KAAKrK,KAAL,CAAWkI,eAAnC,CAHuC,EAGc,CAACoC,oBAAD,EAAuB,KAAKtK,KAAL,CAAWsF,cAAlC,CAHd,EAGiE,CAACiF,gBAAD,EAAmBO,UAAnB,CAHjE,EAGiG,CAACN,kBAAD,EAAqB,CAACM,UAAtB,CAHjG,EAGoI,CAACL,WAAD,EAAc,KAAKzK,KAAL,CAAWC,SAAX,KAAyBpC,SAAS,CAACgH,GAAjD,CAHpI,EAG2L,CAAC6F,kBAAD,EAAqB,KAAKtM,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACyF,WAApD,CAH3L,EAG6P,CAACoI,uBAAD,EAA0B,KAAKvM,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACsF,eAAzD,CAH7P,EAGwU,CAACwI,uBAAD,EAA0B,KAAKxM,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACkF,eAAzD,CAHxU,EAGmZ,CAAC6I,sBAAD,EAAyB,KAAKzM,KAAL,CAAWK,IAAX,KAAoB3B,UAAU,CAACiF,UAAxD,CAHnZ,CAA1C;AAIH;AACD;;;;;;gCAGY5C,K,EAAO;AACf,UAAI,CAAC,KAAKoE,iBAAL,CAAuBpE,KAAvB,CAAL,EAAoC;AAChC;AACH;;AACD,UAAM4L,iBAAiB,GAAG5L,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GACpB,KAAKmF,yBADe,GAEpB,KAAKG,yBAFX;AAGA,UAAM+D,eAAe,GAAG7L,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GAClB,KAAK2E,uBADa,GAElB,KAAKE,uBAFX;AAGA,UAAMyE,kBAAkB,GAAG9L,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GACrB,KAAKkG,0BADgB,GAErB,KAAKE,0BAFX;;AAGA,UAAI,OAAO,KAAK3J,KAAL,CAAWe,KAAlB,KAA4B,UAAhC,EAA4C;AACxC,eAAO,KAAKf,KAAL,CAAWe,KAAX,CAAiB,KAAKf,KAAtB,EAA6B,KAAK4B,KAAlC,EAAyC+K,iBAAzC,EAA4DC,eAA5D,EAA6E7L,KAA7E,EAAoF8L,kBAApF,CAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAKC,kBAAL,CAAwB,KAAK9M,KAA7B,EAAoC,KAAK4B,KAAzC,EAAgD+K,iBAAhD,EAAmEC,eAAnE,EAAoF7L,KAApF,EAA2F8L,kBAA3F,CAAP;AACH;AACJ;AACD;;;;;;uCAGmB7M,K,EAAO4B,K,EAAO+K,iB,EAAmBC,e,EAAiB7L,K,EAAO8L,kB,EAAoB;AAC5F,aAAQjO,KAAK,CAACkD,aAAN,CAAoBlC,eAApB,EAAqC8L,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKhH,sBAAL,CAA4B5D,KAA5B,CAAlB,EAAsD;AAAEgC,QAAAA,uBAAuB,EAAEhC,KAAK,KAAKjB,WAAW,CAAC0D,UAAtB,GACpH3D,qBAAqB,CAACmD,gBAD8F,GAEpHuB,SAFyF;AAE9E1B,QAAAA,uBAAuB,EAAE9B,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GACpC1D,qBAAqB,CAACiD,gBADc,GAEpCyB,SAJyF;AAI9EwI,QAAAA,SAAS,EAAE,KAJmE;AAI5DC,QAAAA,IAAI,EAAE,QAJsD;AAI5CvC,QAAAA,QAAQ,EAAEzK,KAAK,CAACE,QAAN,KAAmB,IAAnB,GAA0B,IAA1B,GAAiC,CAJC;AAIE+M,QAAAA,SAAS,EAAEL,eAJb;AAI8B1J,QAAAA,WAAW,EAAEyJ,iBAJ3C;AAI8DO,QAAAA,YAAY,EAAEL,kBAJ5E;AAIgG,yBAAiB,OAAO7M,KAAK,CAACmB,qBAAb,KAAuC,UAAvC,GAC1MnB,KAAK,CAACmB,qBAAN,CAA4BnB,KAAK,CAACO,KAAN,CAAY0D,QAAxC,CAD0M,GAE1MjE,KAAK,CAACO,KAAN,CAAY0D,QAN6E;AAMnE,yBAAiB,OAAOjE,KAAK,CAACmB,qBAAb,KAAuC,UAAvC,GACvCnB,KAAK,CAACmB,qBAAN,CAA4BnB,KAAK,CAACO,KAAN,CAAYwD,QAAxC,CADuC,GAEvC/D,KAAK,CAACO,KAAN,CAAYwD,QAR6E;AAQnE,yBAAiB,OAAO/D,KAAK,CAACmB,qBAAb,KAAuC,UAAvC,GACvCnB,KAAK,CAACmB,qBAAN,CAA4BJ,KAAK,KAAKjB,WAAW,CAAC0D,UAAtB,GACxB5B,KAAK,CAACkC,UADkB,GAExBlC,KAAK,CAACsC,UAFV,CADuC,GAIvCnD,KAAK,KAAKjB,WAAW,CAAC0D,UAAtB,GACI5B,KAAK,CAACkC,UADV,GAEIlC,KAAK,CAACsC,UAd+E;AAcnE,0BAAkB,OAAOlE,KAAK,CAACkB,wBAAb,KAA0C,UAA1C,GACxClB,KAAK,CAACkB,wBAAN,CAA+BlB,KAA/B,EAAsC4B,KAAtC,EAA6Cb,KAA7C,CADwC,GAExC,IAhByF;AAgBnF,sBAAcA,KAAK,KAAKjB,WAAW,CAACyD,UAAtB,GACpBvD,KAAK,CAACiB,aAAN,IAAuB,IADH,GAEpBjB,KAAK,CAACgB,aAAN,IAAuB;AAlBkE,OAAtD,CAArC,CAAR;AAmBH;AACD;;;;;;;+CAI2B;AACvB,UAAImM,cAAc,GAAG,EAArB;;AACA,cAAQ,KAAKnN,KAAL,CAAWK,IAAnB;AACI,aAAK3B,UAAU,CAACiF,UAAhB;AACIwJ,UAAAA,cAAc,cAAO,KAAKvL,KAAL,CAAWkC,UAAlB,cAAgC,KAAKlC,KAAL,CAAWsC,UAA3C,MAAd;AACA;;AACJ,aAAKxF,UAAU,CAACsF,eAAhB;AACA,aAAKtF,UAAU,CAACyF,WAAhB;AACIgJ,UAAAA,cAAc,aAAM,KAAKvL,KAAL,CAAWsC,UAAjB,CAAd;AACA;;AACJ,aAAKxF,UAAU,CAACkF,eAAhB;AACIuJ,UAAAA,cAAc,aAAM,KAAKvL,KAAL,CAAWkC,UAAjB,CAAd;AACA;AAVR;;AAYA,aAAQlF,KAAK,CAACkD,aAAN,CAAoB,OAApB,EAA6B;AAAEsL,QAAAA,IAAI,EAAE,OAAR;AAAiBvM,QAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,IAAX,IAAmB,IAA1C;AAAgDC,QAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWc,IAAX,IAAmB,IAAzE;AAA+EJ,QAAAA,KAAK,EAAEyM,cAAtF;AAAsGE,QAAAA,QAAQ,EAAE,KAAKpI,kBAArH;AAAyI/E,QAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QAAX,IAAuB,IAA1K;AAAgLuC,QAAAA,KAAK,EAAE;AACpN6K,UAAAA,OAAO,EAAE;AAD2M;AAAvL,OAA7B,CAAR;AAGH;;;;EAh5BgBvO,U;;AAk5BrBgB,MAAM,CAACwN,WAAP,aAAwB7N,iBAAxB;AACAK,MAAM,CAACyN,YAAP,GAAsB;AAClBtN,EAAAA,QAAQ,EAAE,KADQ;AAElBE,EAAAA,WAAW,EAAEzB,iBAAiB,CAAC8O,UAFb;AAGlBpN,EAAAA,IAAI,EAAE3B,UAAU,CAACyF,WAHC;AAIlB5D,EAAAA,KAAK,EAAE;AACH0D,IAAAA,QAAQ,EAAE,CADP;AAEHF,IAAAA,QAAQ,EAAE;AAFP,GAJW;AAQlBtD,EAAAA,IAAI,EAAE,CARY;AASlBN,EAAAA,cAAc,EAAE;AATE,CAAtB;AAWAJ,MAAM,CAAC2B,kBAAP,GAA4B,GAA5B;AACA3B,MAAM,CAAC8H,iBAAP,GAA2B,GAA3B;AACA9H,MAAM,CAAC6H,qBAAP,GAA+B,EAA/B;AACA7H,MAAM,CAACyK,YAAP,GAAsB,MAAtB;AACAzK,MAAM,CAACwG,sBAAP,GAAgC,KAAhC;AACA,eAAexG,MAAf;AACA,cAAc,gBAAd;AACA,SAASJ,aAAT","sourcesContent":["import { SliderMode, SliderOrientation, } from \"./slider.props\";\nimport React from \"react\";\nimport { get, isNil } from \"lodash-es\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome, keyCodePageDown, keyCodePageUp, } from \"@microsoft/fast-web-utilities\";\nimport { classNames, Direction } from \"@microsoft/fast-web-utilities\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { SliderContext } from \"./slider-context\";\nimport SliderTrackItem, { SliderTrackItemAnchor, } from \"../slider-track-item\";\nexport var SliderThumb;\n(function (SliderThumb) {\n    SliderThumb[\"upperThumb\"] = \"upperThumb\";\n    SliderThumb[\"lowerThumb\"] = \"lowerThumb\";\n})(SliderThumb || (SliderThumb = {}));\nclass Slider extends Foundation {\n    /**\n     * constructor\n     */\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            disabled: void 0,\n            managedClasses: void 0,\n            orientation: void 0,\n            mode: void 0,\n            initialValue: void 0,\n            range: void 0,\n            pageStep: void 0,\n            step: void 0,\n            value: void 0,\n            constrainedRange: void 0,\n            onValueChange: void 0,\n            name: void 0,\n            form: void 0,\n            thumb: void 0,\n            minThumbLabel: void 0,\n            maxThumbLabel: void 0,\n            valuetextStringFormatter: void 0,\n            displayValueConverter: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.sliderTrackElement = React.createRef();\n        this.rangeInPixels = 1;\n        this.barMinPixel = 0;\n        this.lastIncrementDelay = Slider.baseIncrementDelay;\n        /**\n         * Renders the internals of the component but skips the\n         * first render so we can determine direction before doing layout\n         * (avoids transition animations to get the layout right to begin with)\n         */\n        this.renderSliderInternals = () => {\n            if (this.state.direction === null) {\n                return null;\n            }\n            return (React.createElement(SliderContext.Provider, { value: {\n                    sliderOrientation: this.props.orientation,\n                    sliderMode: this.props.mode,\n                    sliderState: this.state,\n                    sliderConstrainedRange: this.props.constrainedRange,\n                    sliderValueAsPercent: this.valueAsPercent,\n                    sliderDirection: this.state.direction,\n                } },\n                React.createElement(\"div\", { className: classNames(this.props.managedClasses.slider_layoutRegion), style: {\n                        position: \"relative\",\n                    } },\n                    React.createElement(\"div\", { className: classNames(this.props.managedClasses.slider_backgroundTrack), style: {\n                            position: \"absolute\",\n                        } }),\n                    React.createElement(SliderTrackItem, { className: this.props.managedClasses.slider_foregroundTrack, maxValuePositionBinding: SliderTrackItemAnchor.selectedRangeMax, minValuePositionBinding: SliderTrackItemAnchor.selectedRangeMin }),\n                    React.createElement(\"div\", { ref: this.sliderTrackElement, onMouseDown: this.handleTrackMouseDown, className: classNames(this.props.managedClasses.slider_track), style: {\n                            position: \"absolute\",\n                        } }),\n                    this.props.children,\n                    this.renderThumb(SliderThumb.upperThumb),\n                    this.renderThumb(SliderThumb.lowerThumb)),\n                this.renderHiddenInputElement()));\n        };\n        /**\n         * Updates values when mode is switched in props\n         */\n        this.updateValuesForModeSwitch = () => {\n            switch (this.props.mode) {\n                case SliderMode.adjustBoth:\n                    break;\n                case SliderMode.adustLowerValue:\n                    this.updateValues(this.state.lowerValue, this.props.range.maxValue);\n                    break;\n                case SliderMode.adustUpperValue:\n                    this.updateValues(this.props.range.minValue, this.state.upperValue);\n                    break;\n                case SliderMode.singleValue:\n                    this.updateValues(this.state.upperValue, this.state.upperValue);\n                    break;\n            }\n        };\n        /**\n         *  Constrains a value to be within the provided constraint range and step\n         */\n        this.getConstrainedValue = (baseValue, constraint, step) => {\n            if (constraint === null || constraint === undefined) {\n                constraint = this.props.range;\n            }\n            const constrainedRange = {\n                minValue: this.constrainToRange(this.constrainToStep(this.valueAsRange(baseValue).minValue, step), constraint),\n                maxValue: this.constrainToRange(this.constrainToStep(this.valueAsRange(baseValue).maxValue, step), constraint),\n            };\n            return constrainedRange;\n        };\n        /**\n         *  Maps the default thumb managed classes to the appropriate slider managed classes\n         */\n        this.getThumbManagedClasses = (thumb) => {\n            const thumbBaseClass = get(this.props, \"managedClasses.slider_thumb\", \"\");\n            return {\n                managedClasses: {\n                    sliderTrackItem: thumb === SliderThumb.upperThumb\n                        ? get(this.props, \"managedClasses.slider_thumb__upperValue\", \"\").concat(\" \", thumbBaseClass)\n                        : get(this.props, \"managedClasses.slider_thumb__lowerValue\", \"\").concat(\" \", thumbBaseClass),\n                    sliderTrackItem_horizontal: get(this.props, \"managedClasses.slider_thumb__horizontal\", \"\"),\n                    sliderTrackItem_vertical: get(this.props, \"managedClasses.slider_thumb__vertical\", \"\"),\n                },\n            };\n        };\n        /**\n         * This exists only to suppress a build warning\n         */\n        this.onInputValueChange = (event) => {\n            return null;\n        };\n        /**\n         *  Determines whether a particular thumb should render in the current mode\n         */\n        this.shouldRenderThumb = (thumb) => {\n            if ((this.props.mode === SliderMode.adustLowerValue &&\n                thumb === SliderThumb.upperThumb) ||\n                (this.props.mode === SliderMode.adustUpperValue &&\n                    thumb === SliderThumb.lowerThumb) ||\n                (this.props.mode === SliderMode.singleValue &&\n                    thumb === SliderThumb.lowerThumb)) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Handles track clicks\n         */\n        this.handleTrackMouseDown = (event) => {\n            if (event.defaultPrevented || this.isBusyOrDisabled()) {\n                return;\n            }\n            event.preventDefault();\n            this.updateSliderDimensions();\n            const pixelCoordinate = this.props.orientation === SliderOrientation.vertical\n                ? event.pageY\n                : event.pageX;\n            const newValue = (this.props.range.maxValue - this.props.range.minValue) *\n                this.convertPixelToPercent(pixelCoordinate) +\n                this.props.range.minValue;\n            switch (this.props.mode) {\n                case SliderMode.singleValue:\n                    this.updateValues(newValue, newValue);\n                    break;\n                case SliderMode.adjustBoth:\n                    this.handleMultiThumbTrackClick(newValue);\n                    break;\n                case SliderMode.adustLowerValue:\n                    this.updateValues(newValue, null);\n                    break;\n                case SliderMode.adustUpperValue:\n                    this.updateValues(null, newValue);\n                    break;\n            }\n        };\n        /**\n         *  Handles track clicks when there are multiple thumbs\n         */\n        this.handleMultiThumbTrackClick = (value) => {\n            if (value <= this.state.lowerValue) {\n                this.updateValues(value, null);\n            }\n            else if (value >= this.state.upperValue) {\n                this.updateValues(null, value);\n            }\n            else {\n                // between values move the closest thumb to the click\n                if (value - this.state.lowerValue < this.state.upperValue - value) {\n                    this.updateValues(value, null);\n                }\n                else {\n                    this.updateValues(null, value);\n                }\n            }\n        };\n        /**\n         *  updates the direction in state if necessary\n         */\n        this.updateDirection = () => {\n            const newDirection = this.getDirection();\n            if (newDirection !== this.state.direction) {\n                this.suspendActiveOperations();\n                this.setState({\n                    direction: newDirection,\n                });\n            }\n        };\n        /**\n         *  gets the current direction\n         */\n        this.getDirection = () => {\n            if (this.rootElement.current === null) {\n                return Direction.ltr;\n            }\n            const closest = this.rootElement.current.closest(`[${Slider.DirectionAttributeName}]`);\n            return closest === null ||\n                closest.getAttribute(Slider.DirectionAttributeName) === Direction.ltr\n                ? Direction.ltr\n                : Direction.rtl;\n        };\n        /**\n         * Measures the slider dimensions and stores them\n         */\n        this.updateSliderDimensions = () => {\n            if (this.sliderTrackElement.current === null) {\n                return;\n            }\n            this.rangeInPixels =\n                this.props.orientation === SliderOrientation.vertical\n                    ? this.sliderTrackElement.current.clientHeight\n                    : this.sliderTrackElement.current.clientWidth;\n            if (this.rangeInPixels === 0) {\n                this.rangeInPixels = 1;\n            }\n            this.barMinPixel =\n                this.props.orientation === SliderOrientation.vertical\n                    ? this.sliderTrackElement.current.getBoundingClientRect().bottom\n                    : this.sliderTrackElement.current.getBoundingClientRect().left;\n        };\n        /**\n         * Start timed incrementing from\n         */\n        this.startIncrementing = (incrementDirection, usePageStep, thumb, event) => {\n            event.preventDefault();\n            if (this.state.isIncrementing) {\n                return;\n            }\n            this.updateSliderDimensions();\n            window.addEventListener(\"keyup\", this.handleWindowKeyUp);\n            this.setState({\n                usePageStep,\n                activeThumb: thumb,\n                isIncrementing: true,\n                incrementDirection,\n            });\n            this.lastIncrementDelay = Slider.baseIncrementDelay;\n            this.incrementTimer = setTimeout(() => {\n                this.incrementTimerExpired();\n            }, 50);\n        };\n        /**\n         * Increments the value by one step (or pageStep)\n         * when step is set to 0 we increment based on the current pixel width\n         * of the component\n         */\n        this.incrementValue = () => {\n            const step = this.state.usePageStep\n                ? this.props.pageStep\n                : this.props.step !== 0\n                    ? this.props.step\n                    : (this.props.range.maxValue - this.props.range.minValue) /\n                        this.rangeInPixels;\n            let newValue = this.state.activeThumb === SliderThumb.upperThumb\n                ? this.state.upperValue + step * this.state.incrementDirection\n                : this.state.lowerValue + step * this.state.incrementDirection;\n            if (this.props.mode === SliderMode.adjustBoth &&\n                newValue > this.state.upperValue &&\n                this.state.activeThumb !== SliderThumb.upperThumb) {\n                newValue = this.state.upperValue;\n            }\n            else if (this.props.mode === SliderMode.adjustBoth &&\n                newValue < this.state.lowerValue &&\n                this.state.activeThumb !== SliderThumb.lowerThumb) {\n                newValue = this.state.lowerValue;\n            }\n            if (this.state.activeThumb === SliderThumb.upperThumb) {\n                this.updateValues(null, newValue);\n            }\n            else {\n                this.updateValues(newValue, null);\n            }\n        };\n        /**\n         *  Increment timer tick\n         */\n        this.incrementTimerExpired = () => {\n            clearTimeout(this.incrementTimer);\n            this.incrementValue();\n            this.lastIncrementDelay = this.lastIncrementDelay - Slider.incrementAcceleration;\n            if (this.lastIncrementDelay < Slider.minIncrementDelay) {\n                this.lastIncrementDelay = Slider.minIncrementDelay;\n            }\n            this.incrementTimer = setTimeout(() => {\n                this.incrementTimerExpired();\n            }, this.lastIncrementDelay);\n        };\n        /**\n         *  Stop incrementing\n         */\n        this.stopIncrementing = () => {\n            if (!this.state.isIncrementing) {\n                return;\n            }\n            window.removeEventListener(\"keyup\", this.handleWindowKeyUp);\n            this.setState({\n                usePageStep: false,\n                isIncrementing: false,\n            });\n            clearTimeout(this.incrementTimer);\n        };\n        /**\n         * Converts a pixel coordinate on the track to a percent of the track's range\n         */\n        this.convertPixelToPercent = (pixelPos) => {\n            let pct = 0;\n            if (this.props.orientation === SliderOrientation.vertical) {\n                pct = (this.barMinPixel - pixelPos) / this.rangeInPixels;\n            }\n            else {\n                pct = (pixelPos - this.barMinPixel) / this.rangeInPixels;\n            }\n            if (pct < 0) {\n                pct = 0;\n            }\n            else if (pct > 1) {\n                pct = 1;\n            }\n            if (this.state.direction === Direction.rtl &&\n                this.props.orientation !== SliderOrientation.vertical) {\n                pct = 1 - pct;\n            }\n            return pct;\n        };\n        /**\n         * Handles thumb key events\n         */\n        this.handleUpperThumbKeyDown = (event) => {\n            this.handleThumbKeydown(event, SliderThumb.upperThumb);\n        };\n        this.handleLowerThumbKeyDown = (event) => {\n            this.handleThumbKeydown(event, SliderThumb.lowerThumb);\n        };\n        this.handleThumbKeydown = (event, thumb) => {\n            if (event.defaultPrevented || this.isBusyOrDisabled()) {\n                event.preventDefault();\n                return;\n            }\n            switch (event.keyCode) {\n                case keyCodeArrowDown:\n                    this.startIncrementing(-1, false, thumb, event);\n                    break;\n                case keyCodeArrowRight:\n                    this.startIncrementing(this.state.direction === Direction.ltr ? 1 : -1, false, thumb, event);\n                    break;\n                case keyCodeArrowUp:\n                    this.startIncrementing(1, false, thumb, event);\n                    break;\n                case keyCodeArrowLeft:\n                    this.startIncrementing(this.state.direction === Direction.ltr ? -1 : 1, false, thumb, event);\n                    break;\n                case keyCodePageDown:\n                    if (this.props.pageStep !== undefined) {\n                        this.startIncrementing(-1, true, thumb, event);\n                    }\n                    break;\n                case keyCodePageUp:\n                    if (this.props.pageStep !== undefined) {\n                        this.startIncrementing(1, true, thumb, event);\n                    }\n                    break;\n                case keyCodeHome:\n                    this.setMinValue(thumb);\n                    break;\n                case keyCodeEnd:\n                    this.setMaxValue(thumb);\n                    break;\n            }\n        };\n        /**\n         * sets the active thumb to its minimum value\n         */\n        this.setMinValue = (thumb) => {\n            const thumbRange = this.getConstrainedRange(true);\n            if (thumb === SliderThumb.upperThumb) {\n                this.updateValues(null, thumbRange.minValue);\n            }\n            else {\n                this.updateValues(thumbRange.minValue, null);\n            }\n        };\n        /**\n         * sets the active thumb to it's maximum value\n         */\n        this.setMaxValue = (thumb) => {\n            const thumbRange = this.getConstrainedRange(true);\n            if (thumb === SliderThumb.upperThumb) {\n                this.updateValues(null, thumbRange.maxValue);\n            }\n            else {\n                this.updateValues(thumbRange.maxValue, null);\n            }\n        };\n        /**\n         * Handles thumb clicks\n         */\n        this.handleUpperThumbMouseDown = (e) => {\n            this.handleThumbMouseDown(e, SliderThumb.upperThumb);\n        };\n        this.handleLowerThumbMouseDown = (e) => {\n            this.handleThumbMouseDown(e, SliderThumb.lowerThumb);\n        };\n        this.handleThumbMouseDown = (e, thumb) => {\n            if (e.defaultPrevented || this.isBusyOrDisabled()) {\n                return;\n            }\n            e.preventDefault();\n            e.target.focus();\n            window.addEventListener(\"mouseup\", this.handleWindowMouseUp);\n            window.addEventListener(\"mousemove\", this.handleMouseMove);\n            this.setState({\n                isMouseDragging: true,\n                activeThumb: thumb,\n            });\n            this.updateDragValue(this.getDragValue(e.nativeEvent, thumb), thumb);\n        };\n        /**\n         *  Handle mouse moves during a thumb drag operation\n         */\n        this.handleMouseMove = (event) => {\n            if (this.props.disabled || event.defaultPrevented) {\n                return;\n            }\n            this.updateDragValue(this.getDragValue(event, this.state.activeThumb), this.state.activeThumb);\n        };\n        /**\n         *  Get dragvalue from mouse event or touch\n         */\n        this.getDragValue = (event, thumb) => {\n            this.updateSliderDimensions();\n            const pixelCoordinate = this.props.orientation === SliderOrientation.vertical\n                ? event.clientY\n                : event.clientX;\n            const dragValue = (this.props.range.maxValue - this.props.range.minValue) *\n                this.convertPixelToPercent(pixelCoordinate) +\n                this.props.range.minValue;\n            return dragValue;\n        };\n        /**\n         * Handles touch dragging\n         */\n        this.handleUpperThumbTouchStart = (e) => {\n            this.handleThumbTouchStart(e, SliderThumb.upperThumb);\n        };\n        this.handleLowerThumbTouchStart = (e) => {\n            this.handleThumbTouchStart(e, SliderThumb.lowerThumb);\n        };\n        this.handleThumbTouchStart = (e, thumb) => {\n            if (e.defaultPrevented || this.isBusyOrDisabled()) {\n                return;\n            }\n            e.preventDefault();\n            e.target.focus();\n            window.addEventListener(\"touchend\", this.handleTouchEnd);\n            window.addEventListener(\"touchcancel\", this.handleTouchEnd);\n            window.addEventListener(\"touchmove\", this.handleTouchMove);\n            this.setState({\n                isTouchDragging: true,\n                activeThumb: thumb,\n            });\n            const thisTouch = e.nativeEvent.touches.item(0);\n            this.updateDragValue(this.getDragValue(thisTouch, thumb), thumb);\n        };\n        /**\n         *  Returns first valid touch found in a touch event\n         */\n        this.getValidTouch = (event) => {\n            if (isNil(this.rootElement.current)) {\n                return null;\n            }\n            const touchCount = event.touches.length;\n            for (let i = 0; i < touchCount; i++) {\n                const thisTouch = event.touches.item(i);\n                const touchElement = thisTouch.target;\n                if (touchElement.attributes[Slider.rolePropName].value === \"slider\" &&\n                    touchElement.tabIndex === 0 &&\n                    this.rootElement.current.contains(touchElement)) {\n                    return thisTouch;\n                }\n            }\n            return null;\n        };\n        /**\n         *  Handle touch moves during a thumb drag operation\n         */\n        this.handleTouchMove = (event) => {\n            if (this.props.disabled || event.defaultPrevented) {\n                return;\n            }\n            const validTouch = this.getValidTouch(event);\n            if (validTouch === null) {\n                this.stopTouchDragging();\n                return;\n            }\n            this.updateDragValue(this.getDragValue(validTouch, this.state.activeThumb), this.state.activeThumb);\n        };\n        /**\n         * Handle touch end\n         */\n        this.handleTouchEnd = (event) => {\n            event.preventDefault();\n            this.stopTouchDragging();\n        };\n        /**\n         *  Updates the current drag value\n         */\n        this.updateDragValue = (dragValue, thumb) => {\n            const constrainedRange = this.getConstrainedRange(true);\n            const newDragValue = this.constrainToRange(dragValue, constrainedRange);\n            this.setState({\n                dragValue: newDragValue,\n            });\n            if (thumb === SliderThumb.lowerThumb) {\n                this.updateValues(newDragValue, null);\n            }\n            else {\n                this.updateValues(null, newDragValue);\n            }\n        };\n        /**\n         *  Gets the range of values the active thumb is actually allowed to traverse\n         */\n        this.getConstrainedRange = (constrainToOppositeEndOfSelection) => {\n            let rangeMin = this.props.range.minValue;\n            let rangeMax = this.props.range.maxValue;\n            if (this.props.constrainedRange !== undefined) {\n                rangeMin =\n                    this.props.constrainedRange.minValue > rangeMin\n                        ? this.props.constrainedRange.minValue\n                        : rangeMin;\n                rangeMax =\n                    this.props.constrainedRange.maxValue < rangeMax\n                        ? this.props.constrainedRange.maxValue\n                        : rangeMin;\n            }\n            if (this.props.mode !== SliderMode.singleValue &&\n                constrainToOppositeEndOfSelection) {\n                if (this.state.activeThumb === SliderThumb.lowerThumb) {\n                    rangeMax = this.state.upperValue;\n                }\n                else {\n                    rangeMin = this.state.lowerValue;\n                }\n            }\n            return {\n                minValue: rangeMin,\n                maxValue: rangeMax,\n            };\n        };\n        /**\n         *  Converts a single number value to a SliderRange based on current mode\n         */\n        this.valueAsRange = (value) => {\n            if (typeof value === \"number\") {\n                switch (this.props.mode) {\n                    case SliderMode.adjustBoth:\n                    case SliderMode.singleValue:\n                        return {\n                            minValue: value,\n                            maxValue: value,\n                        };\n                    case SliderMode.adustLowerValue:\n                        return {\n                            minValue: value,\n                            maxValue: this.props.range.maxValue,\n                        };\n                    case SliderMode.adustUpperValue:\n                        return {\n                            minValue: this.props.range.minValue,\n                            maxValue: value,\n                        };\n                }\n            }\n            else if (typeof value === \"object\") {\n                return value;\n            }\n        };\n        /**\n         *  Apply value changes to state, only place this should happen outside of constructor and ComponentDidUpdate\n         */\n        this.updateValues = (lowerValue, upperValue) => {\n            let newLowerValue = this.state.lowerValue;\n            let newUpperValue = this.state.upperValue;\n            if (lowerValue !== null) {\n                newLowerValue = this.constrainToRange(this.constrainToStep(lowerValue, this.props.step), this.props.range);\n            }\n            if (upperValue !== null) {\n                newUpperValue = this.constrainToRange(this.constrainToStep(upperValue, this.props.step), this.props.range);\n            }\n            if (this.state.upperValue === newUpperValue &&\n                this.state.lowerValue === newLowerValue) {\n                return;\n            }\n            this.invokeValueChange(newLowerValue, newUpperValue);\n            if (this.props.value === undefined) {\n                this.setState({\n                    lowerValue: this.props.mode === SliderMode.singleValue\n                        ? newUpperValue\n                        : newLowerValue,\n                    upperValue: newUpperValue,\n                });\n            }\n        };\n        /**\n         *  Invokes the value change event and formats params based on current mode\n         */\n        this.invokeValueChange = (lowerValue, upperValue) => {\n            if (typeof this.props.onValueChange === \"function\") {\n                switch (this.props.mode) {\n                    case SliderMode.adjustBoth:\n                        this.props.onValueChange({\n                            minValue: lowerValue,\n                            maxValue: upperValue,\n                        });\n                        break;\n                    case SliderMode.adustUpperValue:\n                    case SliderMode.singleValue:\n                        this.props.onValueChange(upperValue);\n                        break;\n                    case SliderMode.adustLowerValue:\n                        this.props.onValueChange(lowerValue);\n                        break;\n                }\n            }\n        };\n        /**\n         * Handle a window mouse up during a drag operation\n         */\n        this.handleWindowMouseUp = (event) => {\n            this.stopDragging();\n        };\n        /**\n         *  Handle window key up during an incrementing operation\n         */\n        this.handleWindowKeyUp = (event) => {\n            switch (event.keyCode) {\n                case keyCodeArrowDown:\n                case keyCodeArrowRight:\n                case keyCodeArrowUp:\n                case keyCodeArrowLeft:\n                case keyCodePageDown:\n                case keyCodePageUp:\n                    this.stopIncrementing();\n                    break;\n            }\n        };\n        /**\n         *  Ends a thumb drag operation\n         */\n        this.stopDragging = () => {\n            if (!this.state.isMouseDragging) {\n                return;\n            }\n            window.removeEventListener(\"mouseup\", this.handleWindowMouseUp);\n            window.removeEventListener(\"mousemove\", this.handleMouseMove);\n            this.setState({\n                isMouseDragging: false,\n            });\n        };\n        /**\n         *  Ends a thumb touch drag operation\n         */\n        this.stopTouchDragging = () => {\n            if (!this.state.isTouchDragging) {\n                return;\n            }\n            window.removeEventListener(\"touchend\", this.handleTouchEnd);\n            window.removeEventListener(\"touchcancel\", this.handleTouchEnd);\n            window.removeEventListener(\"touchmove\", this.handleTouchMove);\n            this.setState({\n                isTouchDragging: false,\n            });\n        };\n        /**\n         *  Ends active drag/increment operations\n         */\n        this.suspendActiveOperations = () => {\n            this.stopDragging();\n            this.stopTouchDragging();\n            this.stopIncrementing();\n        };\n        /**\n         * Ensures a value falls within the provided range\n         */\n        this.constrainToRange = (value, range) => {\n            let newValue = value;\n            if (newValue > range.maxValue) {\n                newValue = range.maxValue;\n            }\n            else if (newValue < range.minValue) {\n                newValue = range.minValue;\n            }\n            return newValue;\n        };\n        /**\n         * Ensures a value is an even multiple of the slider step increment\n         */\n        this.constrainToStep = (value, step) => {\n            // we remove then restore the slider range min value to\n            // ensure that the remainder calculates correctly in case the minValue\n            // is not based off 0, eg. range minValue 7.5, step 2.  Slider steps increment off\n            // of the min value of the slider's range, not 0.\n            let constrainedValue = value - this.props.range.minValue;\n            const remainder = constrainedValue % step;\n            constrainedValue =\n                remainder >= step / 2 // check to see if this is over half a single step\n                    ? constrainedValue - remainder + step // if so add a step\n                    : constrainedValue - remainder;\n            return constrainedValue + this.props.range.minValue;\n        };\n        /**\n         * Converts value to a percent of slider range\n         */\n        this.valueAsPercent = (value) => {\n            return (((value - this.props.range.minValue) /\n                (this.props.range.maxValue - this.props.range.minValue)) *\n                100);\n        };\n        /**\n         *  Converts a percent value to the equivalent value on the bar range\n         */\n        this.percentAsValue = (value) => {\n            return (((this.props.range.maxValue - this.props.range.minValue) / 100) * value +\n                this.props.range.minValue);\n        };\n        /**\n         *  Checks if the component is busy with an active operation or disabled\n         */\n        this.isBusyOrDisabled = () => {\n            if (this.props.disabled ||\n                this.state.isMouseDragging ||\n                this.state.isIncrementing ||\n                this.state.isTouchDragging) {\n                return true;\n            }\n            return false;\n        };\n        let initialValue = {\n            minValue: this.props.range.minValue,\n            maxValue: this.props.range.maxValue,\n        };\n        if (this.props.value !== undefined) {\n            initialValue = this.getConstrainedValue(this.props.value, this.props.constrainedRange, this.props.step);\n        }\n        else if (this.props.initialValue !== undefined) {\n            initialValue = this.getConstrainedValue(this.props.initialValue, this.props.constrainedRange, this.props.step);\n        }\n        else {\n            let defaultValue = {\n                minValue: 0,\n                maxValue: 0,\n            };\n            switch (this.props.mode) {\n                case SliderMode.singleValue:\n                    defaultValue = {\n                        minValue: this.percentAsValue(50),\n                        maxValue: this.percentAsValue(50),\n                    };\n                    break;\n                case SliderMode.adjustBoth:\n                    defaultValue = {\n                        minValue: this.percentAsValue(40),\n                        maxValue: this.percentAsValue(60),\n                    };\n                    break;\n                case SliderMode.adustLowerValue:\n                    defaultValue = {\n                        minValue: this.percentAsValue(50),\n                        maxValue: this.props.range.maxValue,\n                    };\n                    break;\n                case SliderMode.adustUpperValue:\n                    defaultValue = {\n                        minValue: this.props.range.minValue,\n                        maxValue: this.percentAsValue(50),\n                    };\n                    break;\n            }\n            initialValue = this.getConstrainedValue(defaultValue, this.props.constrainedRange, this.props.step);\n        }\n        this.state = {\n            dragValue: -1,\n            upperValue: initialValue.maxValue,\n            lowerValue: initialValue.minValue,\n            activeThumb: null,\n            isMouseDragging: false,\n            isTouchDragging: false,\n            isIncrementing: false,\n            incrementDirection: 1,\n            usePageStep: false,\n            direction: null,\n        };\n    }\n    /**\n     * React lifecycle methods\n     */\n    componentDidMount() {\n        this.updateDirection();\n    }\n    componentWillUnmount() {\n        this.suspendActiveOperations();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.disabled !== this.props.disabled && this.props.disabled) {\n            this.suspendActiveOperations();\n        }\n        if (prevProps.value !== this.props.value && this.props.value !== undefined) {\n            const newValue = this.getConstrainedValue(this.props.value, this.props.constrainedRange, this.props.step);\n            this.setState({\n                lowerValue: newValue.minValue,\n                upperValue: newValue.maxValue,\n            });\n        }\n        else if (prevProps.constrainedRange !== this.props.constrainedRange ||\n            prevProps.step !== this.props.step) {\n            this.suspendActiveOperations();\n            this.updateValues(this.state.lowerValue, this.state.upperValue);\n        }\n        if (prevProps.mode !== this.props.mode) {\n            this.suspendActiveOperations();\n            this.updateValuesForModeSwitch();\n        }\n        this.updateDirection();\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, className: this.generateClassNames() }), this.renderSliderInternals()));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { slider, slider__disabled, slider__dragging, slider__touchDragging, slider__incrementing, slider__vertical, slider__horizontal, slider__rtl, slider__modeSingle, slider__modeAdjustUpper, slider__modeAdjustLower, slider__modeAdjustBoth, } = this.props.managedClasses;\n        const isVertical = this.props.orientation === SliderOrientation.vertical;\n        return super.generateClassNames(classNames(slider, [slider__disabled, this.props.disabled], [\n            slider__dragging,\n            this.state.isMouseDragging || this.state.isTouchDragging,\n        ], [slider__touchDragging, this.state.isTouchDragging], [slider__incrementing, this.state.isIncrementing], [slider__vertical, isVertical], [slider__horizontal, !isVertical], [slider__rtl, this.state.direction === Direction.rtl], [slider__modeSingle, this.props.mode === SliderMode.singleValue], [slider__modeAdjustUpper, this.props.mode === SliderMode.adustUpperValue], [slider__modeAdjustLower, this.props.mode === SliderMode.adustLowerValue], [slider__modeAdjustBoth, this.props.mode === SliderMode.adjustBoth]));\n    }\n    /**\n     *  Renders the appropriate thumb\n     */\n    renderThumb(thumb) {\n        if (!this.shouldRenderThumb(thumb)) {\n            return;\n        }\n        const mouseDownCallback = thumb === SliderThumb.upperThumb\n            ? this.handleUpperThumbMouseDown\n            : this.handleLowerThumbMouseDown;\n        const keyDownCallback = thumb === SliderThumb.upperThumb\n            ? this.handleUpperThumbKeyDown\n            : this.handleLowerThumbKeyDown;\n        const touchStartCallback = thumb === SliderThumb.upperThumb\n            ? this.handleUpperThumbTouchStart\n            : this.handleLowerThumbTouchStart;\n        if (typeof this.props.thumb === \"function\") {\n            return this.props.thumb(this.props, this.state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback);\n        }\n        else {\n            return this.renderDefaultThumb(this.props, this.state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback);\n        }\n    }\n    /**\n     *  Renders the default thumb\n     */\n    renderDefaultThumb(props, state, mouseDownCallback, keyDownCallback, thumb, touchStartCallback) {\n        return (React.createElement(SliderTrackItem, Object.assign({}, this.getThumbManagedClasses(thumb), { minValuePositionBinding: thumb === SliderThumb.lowerThumb\n                ? SliderTrackItemAnchor.selectedRangeMin\n                : undefined, maxValuePositionBinding: thumb === SliderThumb.upperThumb\n                ? SliderTrackItemAnchor.selectedRangeMax\n                : undefined, draggable: false, role: \"slider\", tabIndex: props.disabled === true ? null : 0, onKeyDown: keyDownCallback, onMouseDown: mouseDownCallback, onTouchStart: touchStartCallback, \"aria-valuemin\": typeof props.displayValueConverter === \"function\"\n                ? props.displayValueConverter(props.range.minValue)\n                : props.range.minValue, \"aria-valuemax\": typeof props.displayValueConverter === \"function\"\n                ? props.displayValueConverter(props.range.maxValue)\n                : props.range.maxValue, \"aria-valuenow\": typeof props.displayValueConverter === \"function\"\n                ? props.displayValueConverter(thumb === SliderThumb.lowerThumb\n                    ? state.lowerValue\n                    : state.upperValue)\n                : thumb === SliderThumb.lowerThumb\n                    ? state.lowerValue\n                    : state.upperValue, \"aria-valuetext\": typeof props.valuetextStringFormatter === \"function\"\n                ? props.valuetextStringFormatter(props, state, thumb)\n                : null, \"aria-label\": thumb === SliderThumb.upperThumb\n                ? props.maxThumbLabel || null\n                : props.minThumbLabel || null })));\n    }\n    /**\n     * Renders a hidden input element which can interact with a\n     * form hosting this component\n     */\n    renderHiddenInputElement() {\n        let formattedValue = \"\";\n        switch (this.props.mode) {\n            case SliderMode.adjustBoth:\n                formattedValue = `[${this.state.lowerValue},${this.state.upperValue}]`;\n                break;\n            case SliderMode.adustUpperValue:\n            case SliderMode.singleValue:\n                formattedValue = `${this.state.upperValue}`;\n                break;\n            case SliderMode.adustLowerValue:\n                formattedValue = `${this.state.lowerValue}`;\n                break;\n        }\n        return (React.createElement(\"input\", { type: \"range\", name: this.props.name || null, form: this.props.form || null, value: formattedValue, onChange: this.onInputValueChange, disabled: this.props.disabled || null, style: {\n                display: \"none\",\n            } }));\n    }\n}\nSlider.displayName = `${DisplayNamePrefix}Slider`;\nSlider.defaultProps = {\n    disabled: false,\n    orientation: SliderOrientation.horizontal,\n    mode: SliderMode.singleValue,\n    range: {\n        minValue: 0,\n        maxValue: 100,\n    },\n    step: 1,\n    managedClasses: {},\n};\nSlider.baseIncrementDelay = 300;\nSlider.minIncrementDelay = 100;\nSlider.incrementAcceleration = 50;\nSlider.rolePropName = \"role\";\nSlider.DirectionAttributeName = \"dir\";\nexport default Slider;\nexport * from \"./slider.props\";\nexport { SliderContext };\n"]},"metadata":{},"sourceType":"module"}