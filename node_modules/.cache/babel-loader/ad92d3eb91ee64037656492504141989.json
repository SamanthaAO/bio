{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\n// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\"; // CIELCH color space\n// https://en.wikipedia.org/wiki/CIELAB_color_space\n// This is a cylindrical representation of the CIELAB space useful for saturation operations\n// This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n// This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n// https://en.wikipedia.org/wiki/Illuminant_D65\n// These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\n\nexport var ColorLCH =\n/*#__PURE__*/\nfunction () {\n  _createClass(ColorLCH, null, [{\n    key: \"fromObject\",\n    value: function fromObject(data) {\n      if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {\n        return new ColorLCH(data.l, data.c, data.h);\n      }\n\n      return null;\n    }\n  }]);\n\n  function ColorLCH(l, c, h) {\n    _classCallCheck(this, ColorLCH);\n\n    this.l = l;\n    this.c = c;\n    this.h = h;\n  }\n\n  _createClass(ColorLCH, [{\n    key: \"equalValue\",\n    value: function equalValue(rhs) {\n      return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;\n    }\n  }, {\n    key: \"roundToPrecision\",\n    value: function roundToPrecision(precision) {\n      return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        l: this.l,\n        c: this.c,\n        h: this.h\n      };\n    }\n  }]);\n\n  return ColorLCH;\n}();","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-lch.js"],"names":["roundToPrecisionSmall","ColorLCH","data","isNaN","l","c","h","rhs","precision"],"mappings":";;AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA,+BACsBC,IADtB,EAC4B;AACpB,UAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,CAAN,CAAd,IAA0B,CAACD,KAAK,CAACD,IAAI,CAACG,CAAN,CAAhC,IAA4C,CAACF,KAAK,CAACD,IAAI,CAACI,CAAN,CAAtD,EAAgE;AAC5D,eAAO,IAAIL,QAAJ,CAAaC,IAAI,CAACE,CAAlB,EAAqBF,IAAI,CAACG,CAA1B,EAA6BH,IAAI,CAACI,CAAlC,CAAP;AACH;;AACD,aAAO,IAAP;AACH;AANL;;AAOI,oBAAYF,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAAA;;AACjB,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACH;;AAXL;AAAA;AAAA,+BAYeC,GAZf,EAYoB;AACZ,aAAO,KAAKH,CAAL,KAAWG,GAAG,CAACH,CAAf,IAAoB,KAAKC,CAAL,KAAWE,GAAG,CAACF,CAAnC,IAAwC,KAAKC,CAAL,KAAWC,GAAG,CAACD,CAA9D;AACH;AAdL;AAAA;AAAA,qCAeqBE,SAfrB,EAegC;AACxB,aAAO,IAAIP,QAAJ,CAAaD,qBAAqB,CAAC,KAAKI,CAAN,EAASI,SAAT,CAAlC,EAAuDR,qBAAqB,CAAC,KAAKK,CAAN,EAASG,SAAT,CAA5E,EAAiGR,qBAAqB,CAAC,KAAKM,CAAN,EAASE,SAAT,CAAtH,CAAP;AACH;AAjBL;AAAA;AAAA,+BAkBe;AACP,aAAO;AAAEJ,QAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,QAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,QAAAA,CAAC,EAAE,KAAKA;AAAhC,OAAP;AACH;AApBL;;AAAA;AAAA","sourcesContent":["// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\";\n// CIELCH color space\n// https://en.wikipedia.org/wiki/CIELAB_color_space\n// This is a cylindrical representation of the CIELAB space useful for saturation operations\n// This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n// This implementation uses the D65 constants for 2 degrees. That determines the constants used for the pure white point of the XYZ space of 0.95047, 1.0, 1.08883.\n// https://en.wikipedia.org/wiki/Illuminant_D65\n// These constants determine how the XYZ, LCH and LAB colors convert to/from RGB.\nexport class ColorLCH {\n    static fromObject(data) {\n        if (data && !isNaN(data.l) && !isNaN(data.c) && !isNaN(data.h)) {\n            return new ColorLCH(data.l, data.c, data.h);\n        }\n        return null;\n    }\n    constructor(l, c, h) {\n        this.l = l;\n        this.c = c;\n        this.h = h;\n    }\n    equalValue(rhs) {\n        return this.l === rhs.l && this.c === rhs.c && this.h === rhs.h;\n    }\n    roundToPrecision(precision) {\n        return new ColorLCH(roundToPrecisionSmall(this.l, precision), roundToPrecisionSmall(this.c, precision), roundToPrecisionSmall(this.h, precision));\n    }\n    toObject() {\n        return { l: this.l, c: this.c, h: this.h };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}