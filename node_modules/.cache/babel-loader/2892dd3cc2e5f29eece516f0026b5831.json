{"ast":null,"code":"import { findClosestSwatchIndex, findSwatchIndex, getSwatch, isDarkMode, swatchByContrast } from \"./palette\";\nimport { colorRecipeFactory, swatchFamilyToSwatchRecipeFactory, SwatchFamilyType } from \"./common\";\nimport { accentBaseColor, accentForegroundActiveDelta, accentForegroundFocusDelta, accentForegroundHoverDelta, accentForegroundRestDelta, accentPalette, backgroundColor } from \"../design-system\";\n\nfunction accentForegroundAlgorithm(contrastTarget) {\n  return designSystem => {\n    const palette = accentPalette(designSystem);\n    const accent = accentBaseColor(designSystem);\n    const accentIndex = findClosestSwatchIndex(accentPalette, accent)(designSystem);\n    const stateDeltas = {\n      rest: accentForegroundRestDelta(designSystem),\n      hover: accentForegroundHoverDelta(designSystem),\n      active: accentForegroundActiveDelta(designSystem),\n      focus: accentForegroundFocusDelta(designSystem)\n    };\n    const direction = isDarkMode(designSystem) ? -1 : 1;\n    const startIndex = accentIndex + (direction === 1 ? Math.min(stateDeltas.rest, stateDeltas.hover) : Math.max(direction * stateDeltas.rest, direction * stateDeltas.hover));\n    const accessibleSwatch = swatchByContrast(backgroundColor // Compare swatches against the background\n    )(accentPalette // Use the accent palette\n    )(() => startIndex // Begin searching based on accent index, direction, and deltas\n    )(() => direction // Search direction based on light/dark mode\n    )(swatchContrast => swatchContrast >= contrastTarget // A swatch is only valid if the contrast is greater than indicated\n    )(designSystem // Pass the design system\n    ); // One of these will be rest, the other will be hover. Depends on the offsets and the direction.\n\n    const accessibleIndex1 = findSwatchIndex(accentPalette, accessibleSwatch)(designSystem);\n    const accessibleIndex2 = accessibleIndex1 + direction * Math.abs(stateDeltas.rest - stateDeltas.hover);\n    const indexOneIsRestState = direction === 1 ? stateDeltas.rest < stateDeltas.hover : direction * stateDeltas.rest > direction * stateDeltas.hover;\n    const restIndex = indexOneIsRestState ? accessibleIndex1 : accessibleIndex2;\n    const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex1;\n    const activeIndex = restIndex + direction * stateDeltas.active;\n    const focusIndex = restIndex + direction * stateDeltas.focus;\n    return {\n      rest: getSwatch(restIndex, palette),\n      hover: getSwatch(hoverIndex, palette),\n      active: getSwatch(activeIndex, palette),\n      focus: getSwatch(focusIndex, palette)\n    };\n  };\n}\n\nexport const accentForeground = colorRecipeFactory(accentForegroundAlgorithm(4.5));\nexport const accentForegroundLarge = colorRecipeFactory(accentForegroundAlgorithm(3));\nexport const accentForegroundRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForeground);\nexport const accentForegroundHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForeground);\nexport const accentForegroundActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForeground);\nexport const accentForegroundFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForeground);\nexport const accentForegroundLargeRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForegroundLarge);\nexport const accentForegroundLargeHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForegroundLarge);\nexport const accentForegroundLargeActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForegroundLarge);\nexport const accentForegroundLargeFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForegroundLarge);","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/color/accent-foreground.js"],"names":["findClosestSwatchIndex","findSwatchIndex","getSwatch","isDarkMode","swatchByContrast","colorRecipeFactory","swatchFamilyToSwatchRecipeFactory","SwatchFamilyType","accentBaseColor","accentForegroundActiveDelta","accentForegroundFocusDelta","accentForegroundHoverDelta","accentForegroundRestDelta","accentPalette","backgroundColor","accentForegroundAlgorithm","contrastTarget","designSystem","palette","accent","accentIndex","stateDeltas","rest","hover","active","focus","direction","startIndex","Math","min","max","accessibleSwatch","swatchContrast","accessibleIndex1","accessibleIndex2","abs","indexOneIsRestState","restIndex","hoverIndex","activeIndex","focusIndex","accentForeground","accentForegroundLarge","accentForegroundRest","accentForegroundHover","accentForegroundActive","accentForegroundFocus","accentForegroundLargeRest","accentForegroundLargeHover","accentForegroundLargeActive","accentForegroundLargeFocus"],"mappings":"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","sourcesContent":["import { findClosestSwatchIndex, findSwatchIndex, getSwatch, isDarkMode, swatchByContrast, } from \"./palette\";\nimport { colorRecipeFactory, swatchFamilyToSwatchRecipeFactory, SwatchFamilyType, } from \"./common\";\nimport { accentBaseColor, accentForegroundActiveDelta, accentForegroundFocusDelta, accentForegroundHoverDelta, accentForegroundRestDelta, accentPalette, backgroundColor, } from \"../design-system\";\nfunction accentForegroundAlgorithm(contrastTarget) {\n    return (designSystem) => {\n        const palette = accentPalette(designSystem);\n        const accent = accentBaseColor(designSystem);\n        const accentIndex = findClosestSwatchIndex(accentPalette, accent)(designSystem);\n        const stateDeltas = {\n            rest: accentForegroundRestDelta(designSystem),\n            hover: accentForegroundHoverDelta(designSystem),\n            active: accentForegroundActiveDelta(designSystem),\n            focus: accentForegroundFocusDelta(designSystem),\n        };\n        const direction = isDarkMode(designSystem) ? -1 : 1;\n        const startIndex = accentIndex +\n            (direction === 1\n                ? Math.min(stateDeltas.rest, stateDeltas.hover)\n                : Math.max(direction * stateDeltas.rest, direction * stateDeltas.hover));\n        const accessibleSwatch = swatchByContrast(backgroundColor // Compare swatches against the background\n        )(accentPalette // Use the accent palette\n        )(() => startIndex // Begin searching based on accent index, direction, and deltas\n        )(() => direction // Search direction based on light/dark mode\n        )((swatchContrast) => swatchContrast >= contrastTarget // A swatch is only valid if the contrast is greater than indicated\n        )(designSystem // Pass the design system\n        );\n        // One of these will be rest, the other will be hover. Depends on the offsets and the direction.\n        const accessibleIndex1 = findSwatchIndex(accentPalette, accessibleSwatch)(designSystem);\n        const accessibleIndex2 = accessibleIndex1 + direction * Math.abs(stateDeltas.rest - stateDeltas.hover);\n        const indexOneIsRestState = direction === 1\n            ? stateDeltas.rest < stateDeltas.hover\n            : direction * stateDeltas.rest > direction * stateDeltas.hover;\n        const restIndex = indexOneIsRestState\n            ? accessibleIndex1\n            : accessibleIndex2;\n        const hoverIndex = indexOneIsRestState\n            ? accessibleIndex2\n            : accessibleIndex1;\n        const activeIndex = restIndex + direction * stateDeltas.active;\n        const focusIndex = restIndex + direction * stateDeltas.focus;\n        return {\n            rest: getSwatch(restIndex, palette),\n            hover: getSwatch(hoverIndex, palette),\n            active: getSwatch(activeIndex, palette),\n            focus: getSwatch(focusIndex, palette),\n        };\n    };\n}\nexport const accentForeground = colorRecipeFactory(accentForegroundAlgorithm(4.5));\nexport const accentForegroundLarge = colorRecipeFactory(accentForegroundAlgorithm(3));\nexport const accentForegroundRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForeground);\nexport const accentForegroundHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForeground);\nexport const accentForegroundActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForeground);\nexport const accentForegroundFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForeground);\nexport const accentForegroundLargeRest = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.rest, accentForegroundLarge);\nexport const accentForegroundLargeHover = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.hover, accentForegroundLarge);\nexport const accentForegroundLargeActive = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.active, accentForegroundLarge);\nexport const accentForegroundLargeFocus = swatchFamilyToSwatchRecipeFactory(SwatchFamilyType.focus, accentForegroundLarge);\n"]},"metadata":{},"sourceType":"module"}