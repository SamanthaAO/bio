{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { actionToggleButtonOverrides } from \"@microsoft/fast-components-styles-msft\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { isBoolean, isFunction, isNil } from \"lodash-es\";\nimport React from \"react\";\nimport { Button, ButtonAppearance } from \"../button\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ActionToggleAppearance } from \"./action-toggle.props\";\n\nvar ActionToggle =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(ActionToggle, _Foundation);\n\n  /**\n   * Define constructor\n   */\n  function ActionToggle(props) {\n    var _this;\n\n    _classCallCheck(this, ActionToggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ActionToggle).call(this, props));\n    _this.handledProps = {\n      managedClasses: void 0,\n      appearance: void 0,\n      disabled: void 0,\n      selected: void 0,\n      selectedGlyph: void 0,\n      unselectedGlyph: void 0,\n      selectedContent: void 0,\n      unselectedContent: void 0,\n      selectedLabel: void 0,\n      unselectedLabel: void 0\n    };\n    /**\n     * Render Glyphs\n     */\n\n    _this.renderGlyph = function () {\n      var glyph;\n      var className;\n\n      if (_this.state.selected) {\n        glyph = _this.props.selectedGlyph;\n        className = _this.props.managedClasses.actionToggle_selectedGlyph;\n      } else {\n        glyph = _this.props.unselectedGlyph;\n        className = _this.props.managedClasses.actionToggle_unselectedGlyph;\n      }\n\n      return isFunction(_this.props.selectedGlyph) ? glyph(classNames(_this.props.managedClasses.actionToggle_glyph, className)) : null;\n    };\n    /**\n     * Handles onClick\n     */\n\n\n    _this.handleToggleChange = function (e) {\n      if (!isBoolean(_this.props.selected)) {\n        _this.setState({\n          selected: !_this.state.selected\n        });\n      }\n\n      if (_this.props.onToggle) {\n        _this.props.onToggle(e, _this.props);\n      }\n    };\n\n    _this.state = {\n      selected: !!_this.props.selected\n    };\n    return _this;\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  _createClass(ActionToggle, [{\n    key: \"render\",\n\n    /**\n     * Renders the component\n     */\n    value: function render() {\n      var selected = this.state.selected;\n      return React.createElement(Button, Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames(),\n        disabled: this.props.disabled,\n        onClick: this.handleToggleChange,\n        \"aria-label\": selected ? this.props.selectedLabel : this.props.unselectedLabel,\n        appearance: ButtonAppearance[ActionToggleAppearance[this.props.appearance]],\n        jssStyleSheet: actionToggleButtonOverrides,\n        beforeContent: this.renderGlyph\n      }), selected ? this.props.selectedContent : this.props.unselectedContent);\n    }\n    /**\n     * Generates class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          actionToggle = _this$props$managedCl.actionToggle,\n          actionToggle__disabled = _this$props$managedCl.actionToggle__disabled,\n          actionToggle__selected = _this$props$managedCl.actionToggle__selected,\n          actionToggle__hasGlyphAndContent = _this$props$managedCl.actionToggle__hasGlyphAndContent;\n      return _get(_getPrototypeOf(ActionToggle.prototype), \"generateClassNames\", this).call(this, classNames(actionToggle, this.props.managedClasses[\"actionToggle__\".concat(this.props.appearance)], [actionToggle__disabled, this.props.disabled], [actionToggle__selected, this.state.selected], [actionToggle__hasGlyphAndContent, this.hasGlyphAndContent()]));\n    }\n    /**\n     * Checks to see if the toggle is displaying both glyph and content or not\n     */\n\n  }, {\n    key: \"hasGlyphAndContent\",\n    value: function hasGlyphAndContent() {\n      return this.state.selected ? !isNil(this.props.selectedGlyph) && !isNil(this.props.selectedContent) : !isNil(this.props.unselectedGlyph) && !isNil(this.props.unselectedContent);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var selected = nextProps.selected;\n      return isBoolean(selected) && selected !== prevState.selected ? {\n        selected: selected\n      } : null;\n    }\n  }]);\n\n  return ActionToggle;\n}(Foundation);\n\nActionToggle.displayName = \"\".concat(DisplayNamePrefix, \"ActionToggle\");\nActionToggle.defaultProps = {\n  managedClasses: {}\n};\nexport default ActionToggle;\nexport * from \"./action-toggle.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-msft/dist/action-toggle/action-toggle.js"],"names":["Foundation","actionToggleButtonOverrides","classNames","isBoolean","isFunction","isNil","React","Button","ButtonAppearance","DisplayNamePrefix","ActionToggleAppearance","ActionToggle","props","handledProps","managedClasses","appearance","disabled","selected","selectedGlyph","unselectedGlyph","selectedContent","unselectedContent","selectedLabel","unselectedLabel","renderGlyph","glyph","className","state","actionToggle_selectedGlyph","actionToggle_unselectedGlyph","actionToggle_glyph","handleToggleChange","e","setState","onToggle","createElement","Object","assign","unhandledProps","generateClassNames","onClick","jssStyleSheet","beforeContent","actionToggle","actionToggle__disabled","actionToggle__selected","actionToggle__hasGlyphAndContent","hasGlyphAndContent","nextProps","prevState","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { actionToggleButtonOverrides } from \"@microsoft/fast-components-styles-msft\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { isBoolean, isFunction, isNil } from \"lodash-es\";\nimport React from \"react\";\nimport { Button, ButtonAppearance } from \"../button\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ActionToggleAppearance, } from \"./action-toggle.props\";\nclass ActionToggle extends Foundation {\n    /**\n     * Define constructor\n     */\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            managedClasses: void 0,\n            appearance: void 0,\n            disabled: void 0,\n            selected: void 0,\n            selectedGlyph: void 0,\n            unselectedGlyph: void 0,\n            selectedContent: void 0,\n            unselectedContent: void 0,\n            selectedLabel: void 0,\n            unselectedLabel: void 0,\n        };\n        /**\n         * Render Glyphs\n         */\n        this.renderGlyph = () => {\n            let glyph;\n            let className;\n            if (this.state.selected) {\n                glyph = this.props.selectedGlyph;\n                className = this.props.managedClasses.actionToggle_selectedGlyph;\n            }\n            else {\n                glyph = this.props.unselectedGlyph;\n                className = this.props.managedClasses.actionToggle_unselectedGlyph;\n            }\n            return isFunction(this.props.selectedGlyph)\n                ? glyph(classNames(this.props.managedClasses.actionToggle_glyph, className))\n                : null;\n        };\n        /**\n         * Handles onClick\n         */\n        this.handleToggleChange = (e) => {\n            if (!isBoolean(this.props.selected)) {\n                this.setState({\n                    selected: !this.state.selected,\n                });\n            }\n            if (this.props.onToggle) {\n                this.props.onToggle(e, this.props);\n            }\n        };\n        this.state = {\n            selected: !!this.props.selected,\n        };\n    }\n    /**\n     * React life-cycle method\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const selected = nextProps.selected;\n        return isBoolean(selected) && selected !== prevState.selected\n            ? { selected }\n            : null;\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const selected = this.state.selected;\n        return (React.createElement(Button, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), disabled: this.props.disabled, onClick: this.handleToggleChange, \"aria-label\": selected ? this.props.selectedLabel : this.props.unselectedLabel, appearance: ButtonAppearance[ActionToggleAppearance[this.props.appearance]], jssStyleSheet: actionToggleButtonOverrides, beforeContent: this.renderGlyph }), selected ? this.props.selectedContent : this.props.unselectedContent));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { actionToggle, actionToggle__disabled, actionToggle__selected, actionToggle__hasGlyphAndContent, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(actionToggle, this.props.managedClasses[`actionToggle__${this.props.appearance}`], [actionToggle__disabled, this.props.disabled], [actionToggle__selected, this.state.selected], [actionToggle__hasGlyphAndContent, this.hasGlyphAndContent()]));\n    }\n    /**\n     * Checks to see if the toggle is displaying both glyph and content or not\n     */\n    hasGlyphAndContent() {\n        return this.state.selected\n            ? !isNil(this.props.selectedGlyph) && !isNil(this.props.selectedContent)\n            : !isNil(this.props.unselectedGlyph) && !isNil(this.props.unselectedContent);\n    }\n}\nActionToggle.displayName = `${DisplayNamePrefix}ActionToggle`;\nActionToggle.defaultProps = {\n    managedClasses: {},\n};\nexport default ActionToggle;\nexport * from \"./action-toggle.props\";\n"]},"metadata":{},"sourceType":"module"}