{"ast":null,"code":"// tslint:disable:prefer-for-of\nimport { rgbToHSL } from \"./color-converters\";\nexport var defaultPaletteExtractionConfig = {\n  saturationWeight: 6,\n  luminosityWeight: 3,\n  populationWeight: 1,\n  volumeWeight: 0.1,\n  constraints: [{\n    id: \"Vibrant\",\n    targetSaturation: 1,\n    minSaturation: 0.35,\n    maxSaturation: 1,\n    targetLuminosity: 0.5,\n    minLuminosity: 0.3,\n    maxLuminosity: 0.7\n  }, {\n    id: \"LightVibrant\",\n    targetSaturation: 1,\n    minSaturation: 0.35,\n    maxSaturation: 1,\n    targetLuminosity: 0.74,\n    minLuminosity: 0.55,\n    maxLuminosity: 1\n  }, {\n    id: \"DarkVibrant\",\n    targetSaturation: 1,\n    minSaturation: 0.35,\n    maxSaturation: 1,\n    targetLuminosity: 0.26,\n    minLuminosity: 0,\n    maxLuminosity: 0.45\n  }, {\n    id: \"Muted\",\n    targetSaturation: 0.3,\n    minSaturation: 0,\n    maxSaturation: 0.4,\n    targetLuminosity: 0.5,\n    minLuminosity: 0.3,\n    maxLuminosity: 0.7\n  }, {\n    id: \"LightMuted\",\n    targetSaturation: 0.3,\n    minSaturation: 0,\n    maxSaturation: 0.4,\n    targetLuminosity: 0.74,\n    minLuminosity: 0.55,\n    maxLuminosity: 1\n  }, {\n    id: \"DarkMuted\",\n    targetSaturation: 0.3,\n    minSaturation: 0,\n    maxSaturation: 0.4,\n    targetLuminosity: 0.26,\n    minLuminosity: 0,\n    maxLuminosity: 0.45\n  }]\n};\nexport function extractPalette(colors) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPaletteExtractionConfig;\n\n  if (config.constraints.length === 0) {\n    return [];\n  }\n\n  var totalPixelCount = 0;\n  var totalVolume = 0;\n\n  for (var i = 0; i < colors.length; i++) {\n    totalPixelCount += colors[i].pixelCount;\n    totalVolume += colors[i].colorVolume;\n  }\n\n  var retVal = new Array(config.constraints.length);\n  var bestFitValues = new Array(config.constraints.length);\n\n  for (var _i = 0; _i < retVal.length; _i++) {\n    bestFitValues[_i] = 0;\n    retVal[_i] = {\n      found: false,\n      constraint: config.constraints[_i]\n    };\n  }\n\n  var totalWeight = config.saturationWeight + config.luminosityWeight + config.populationWeight + config.volumeWeight;\n\n  for (var _i2 = 0; _i2 < colors.length; _i2++) {\n    var hsl = rgbToHSL(colors[_i2].color);\n\n    for (var j = 0; j < config.constraints.length; j++) {\n      // Check for min and max saturation / luminosity\n      if (hsl.s >= config.constraints[j].minSaturation && hsl.s <= config.constraints[j].maxSaturation && hsl.l >= config.constraints[j].minLuminosity && hsl.l <= config.constraints[j].maxLuminosity) {\n        var populationFactor = colors[_i2].pixelCount / totalPixelCount;\n        var volumeFactor = colors[_i2].colorVolume / totalVolume;\n        var saturationFactor = 1 - Math.abs(hsl.s - config.constraints[j].targetSaturation);\n        var luminosityFactor = 1 - Math.abs(hsl.l - config.constraints[j].targetLuminosity);\n        var fitValue = (populationFactor * config.populationWeight + volumeFactor * config.volumeWeight + saturationFactor * config.saturationWeight + luminosityFactor * config.luminosityWeight) / totalWeight;\n\n        if (fitValue > bestFitValues[j]) {\n          // Check if this color is already in use\n          var dupe = false;\n\n          for (var k = 0; k < j; k++) {\n            if (retVal[k].found && retVal[k].color.color.equalValue(colors[_i2].color)) {\n              dupe = true;\n              break;\n            }\n          }\n\n          if (!dupe) {\n            bestFitValues[j] = fitValue;\n            retVal[j].found = true;\n            retVal[j].color = colors[_i2];\n          }\n        }\n      }\n    }\n  }\n\n  return retVal;\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/palette-extractor.js"],"names":["rgbToHSL","defaultPaletteExtractionConfig","saturationWeight","luminosityWeight","populationWeight","volumeWeight","constraints","id","targetSaturation","minSaturation","maxSaturation","targetLuminosity","minLuminosity","maxLuminosity","extractPalette","colors","config","length","totalPixelCount","totalVolume","i","pixelCount","colorVolume","retVal","Array","bestFitValues","found","constraint","totalWeight","hsl","color","j","s","l","populationFactor","volumeFactor","saturationFactor","Math","abs","luminosityFactor","fitValue","dupe","k","equalValue"],"mappings":"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","sourcesContent":["// tslint:disable:prefer-for-of\nimport { rgbToHSL } from \"./color-converters\";\nexport const defaultPaletteExtractionConfig = {\n    saturationWeight: 6,\n    luminosityWeight: 3,\n    populationWeight: 1,\n    volumeWeight: 0.1,\n    constraints: [\n        {\n            id: \"Vibrant\",\n            targetSaturation: 1,\n            minSaturation: 0.35,\n            maxSaturation: 1,\n            targetLuminosity: 0.5,\n            minLuminosity: 0.3,\n            maxLuminosity: 0.7,\n        },\n        {\n            id: \"LightVibrant\",\n            targetSaturation: 1,\n            minSaturation: 0.35,\n            maxSaturation: 1,\n            targetLuminosity: 0.74,\n            minLuminosity: 0.55,\n            maxLuminosity: 1,\n        },\n        {\n            id: \"DarkVibrant\",\n            targetSaturation: 1,\n            minSaturation: 0.35,\n            maxSaturation: 1,\n            targetLuminosity: 0.26,\n            minLuminosity: 0,\n            maxLuminosity: 0.45,\n        },\n        {\n            id: \"Muted\",\n            targetSaturation: 0.3,\n            minSaturation: 0,\n            maxSaturation: 0.4,\n            targetLuminosity: 0.5,\n            minLuminosity: 0.3,\n            maxLuminosity: 0.7,\n        },\n        {\n            id: \"LightMuted\",\n            targetSaturation: 0.3,\n            minSaturation: 0,\n            maxSaturation: 0.4,\n            targetLuminosity: 0.74,\n            minLuminosity: 0.55,\n            maxLuminosity: 1,\n        },\n        {\n            id: \"DarkMuted\",\n            targetSaturation: 0.3,\n            minSaturation: 0,\n            maxSaturation: 0.4,\n            targetLuminosity: 0.26,\n            minLuminosity: 0,\n            maxLuminosity: 0.45,\n        },\n    ],\n};\nexport function extractPalette(colors, config = defaultPaletteExtractionConfig) {\n    if (config.constraints.length === 0) {\n        return [];\n    }\n    let totalPixelCount = 0;\n    let totalVolume = 0;\n    for (let i = 0; i < colors.length; i++) {\n        totalPixelCount += colors[i].pixelCount;\n        totalVolume += colors[i].colorVolume;\n    }\n    const retVal = new Array(config.constraints.length);\n    const bestFitValues = new Array(config.constraints.length);\n    for (let i = 0; i < retVal.length; i++) {\n        bestFitValues[i] = 0;\n        retVal[i] = {\n            found: false,\n            constraint: config.constraints[i],\n        };\n    }\n    const totalWeight = config.saturationWeight +\n        config.luminosityWeight +\n        config.populationWeight +\n        config.volumeWeight;\n    for (let i = 0; i < colors.length; i++) {\n        const hsl = rgbToHSL(colors[i].color);\n        for (let j = 0; j < config.constraints.length; j++) {\n            // Check for min and max saturation / luminosity\n            if (hsl.s >= config.constraints[j].minSaturation &&\n                hsl.s <= config.constraints[j].maxSaturation &&\n                hsl.l >= config.constraints[j].minLuminosity &&\n                hsl.l <= config.constraints[j].maxLuminosity) {\n                const populationFactor = colors[i].pixelCount / totalPixelCount;\n                const volumeFactor = colors[i].colorVolume / totalVolume;\n                const saturationFactor = 1 - Math.abs(hsl.s - config.constraints[j].targetSaturation);\n                const luminosityFactor = 1 - Math.abs(hsl.l - config.constraints[j].targetLuminosity);\n                const fitValue = (populationFactor * config.populationWeight +\n                    volumeFactor * config.volumeWeight +\n                    saturationFactor * config.saturationWeight +\n                    luminosityFactor * config.luminosityWeight) /\n                    totalWeight;\n                if (fitValue > bestFitValues[j]) {\n                    // Check if this color is already in use\n                    let dupe = false;\n                    for (let k = 0; k < j; k++) {\n                        if (retVal[k].found &&\n                            retVal[k].color.color.equalValue(colors[i].color)) {\n                            dupe = true;\n                            break;\n                        }\n                    }\n                    if (!dupe) {\n                        bestFitValues[j] = fitValue;\n                        retVal[j].found = true;\n                        retVal[j].color = colors[i];\n                    }\n                }\n            }\n        }\n    }\n    return retVal;\n}\n"]},"metadata":{},"sourceType":"module"}