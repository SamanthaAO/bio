{"ast":null,"code":"import { hslToRGB, hsvToRGB, labToRGB, lchToRGB, rgbToHSL, rgbToHSV, rgbToLAB, rgbToLCH, rgbToXYZ, xyzToRGB } from \"./color-converters\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorHSV } from \"./color-hsv\";\nimport { ColorLAB } from \"./color-lab\";\nimport { ColorLCH } from \"./color-lch\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorXYZ } from \"./color-xyz\";\nimport { lerp, lerpAnglesInDegrees } from \"./math-utilities\";\nexport function interpolateRGB(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorRGBA64(lerp(position, left.r, right.r), lerp(position, left.g, right.g), lerp(position, left.b, right.b), lerp(position, left.a, right.a));\n}\nexport function interpolateHSL(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorHSL(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.l, right.l));\n}\nexport function interpolateHSV(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorHSV(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.v, right.v));\n}\nexport function interpolateXYZ(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorXYZ(lerp(position, left.x, right.x), lerp(position, left.y, right.y), lerp(position, left.z, right.z));\n}\nexport function interpolateLAB(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorLAB(lerp(position, left.l, right.l), lerp(position, left.a, right.a), lerp(position, left.b, right.b));\n}\nexport function interpolateLCH(position, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  return new ColorLCH(lerp(position, left.l, right.l), lerp(position, left.c, right.c), lerpAnglesInDegrees(position, left.h, right.h));\n}\nexport var ColorInterpolationSpace;\n\n(function (ColorInterpolationSpace) {\n  ColorInterpolationSpace[ColorInterpolationSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorInterpolationSpace[ColorInterpolationSpace[\"HSL\"] = 1] = \"HSL\";\n  ColorInterpolationSpace[ColorInterpolationSpace[\"HSV\"] = 2] = \"HSV\";\n  ColorInterpolationSpace[ColorInterpolationSpace[\"XYZ\"] = 3] = \"XYZ\";\n  ColorInterpolationSpace[ColorInterpolationSpace[\"LAB\"] = 4] = \"LAB\";\n  ColorInterpolationSpace[ColorInterpolationSpace[\"LCH\"] = 5] = \"LCH\";\n})(ColorInterpolationSpace || (ColorInterpolationSpace = {}));\n\nexport function interpolateByColorSpace(position, space, left, right) {\n  if (isNaN(position) || position <= 0) {\n    return left;\n  } else if (position >= 1) {\n    return right;\n  }\n\n  switch (space) {\n    case ColorInterpolationSpace.HSL:\n      return hslToRGB(interpolateHSL(position, rgbToHSL(left), rgbToHSL(right)));\n\n    case ColorInterpolationSpace.HSV:\n      return hsvToRGB(interpolateHSV(position, rgbToHSV(left), rgbToHSV(right)));\n\n    case ColorInterpolationSpace.XYZ:\n      return xyzToRGB(interpolateXYZ(position, rgbToXYZ(left), rgbToXYZ(right)));\n\n    case ColorInterpolationSpace.LAB:\n      return labToRGB(interpolateLAB(position, rgbToLAB(left), rgbToLAB(right)));\n\n    case ColorInterpolationSpace.LCH:\n      return lchToRGB(interpolateLCH(position, rgbToLCH(left), rgbToLCH(right)));\n\n    default:\n      return interpolateRGB(position, left, right);\n  }\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-interpolation.js"],"names":["hslToRGB","hsvToRGB","labToRGB","lchToRGB","rgbToHSL","rgbToHSV","rgbToLAB","rgbToLCH","rgbToXYZ","xyzToRGB","ColorHSL","ColorHSV","ColorLAB","ColorLCH","ColorRGBA64","ColorXYZ","lerp","lerpAnglesInDegrees","interpolateRGB","position","left","right","isNaN","r","g","b","a","interpolateHSL","h","s","l","interpolateHSV","v","interpolateXYZ","x","y","z","interpolateLAB","interpolateLCH","c","ColorInterpolationSpace","interpolateByColorSpace","space","HSL","HSV","XYZ","LAB","LCH"],"mappings":"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","sourcesContent":["import { hslToRGB, hsvToRGB, labToRGB, lchToRGB, rgbToHSL, rgbToHSV, rgbToLAB, rgbToLCH, rgbToXYZ, xyzToRGB, } from \"./color-converters\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorHSV } from \"./color-hsv\";\nimport { ColorLAB } from \"./color-lab\";\nimport { ColorLCH } from \"./color-lch\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorXYZ } from \"./color-xyz\";\nimport { lerp, lerpAnglesInDegrees } from \"./math-utilities\";\nexport function interpolateRGB(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorRGBA64(lerp(position, left.r, right.r), lerp(position, left.g, right.g), lerp(position, left.b, right.b), lerp(position, left.a, right.a));\n}\nexport function interpolateHSL(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorHSL(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.l, right.l));\n}\nexport function interpolateHSV(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorHSV(lerpAnglesInDegrees(position, left.h, right.h), lerp(position, left.s, right.s), lerp(position, left.v, right.v));\n}\nexport function interpolateXYZ(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorXYZ(lerp(position, left.x, right.x), lerp(position, left.y, right.y), lerp(position, left.z, right.z));\n}\nexport function interpolateLAB(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorLAB(lerp(position, left.l, right.l), lerp(position, left.a, right.a), lerp(position, left.b, right.b));\n}\nexport function interpolateLCH(position, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    return new ColorLCH(lerp(position, left.l, right.l), lerp(position, left.c, right.c), lerpAnglesInDegrees(position, left.h, right.h));\n}\nexport var ColorInterpolationSpace;\n(function (ColorInterpolationSpace) {\n    ColorInterpolationSpace[ColorInterpolationSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorInterpolationSpace[ColorInterpolationSpace[\"HSL\"] = 1] = \"HSL\";\n    ColorInterpolationSpace[ColorInterpolationSpace[\"HSV\"] = 2] = \"HSV\";\n    ColorInterpolationSpace[ColorInterpolationSpace[\"XYZ\"] = 3] = \"XYZ\";\n    ColorInterpolationSpace[ColorInterpolationSpace[\"LAB\"] = 4] = \"LAB\";\n    ColorInterpolationSpace[ColorInterpolationSpace[\"LCH\"] = 5] = \"LCH\";\n})(ColorInterpolationSpace || (ColorInterpolationSpace = {}));\nexport function interpolateByColorSpace(position, space, left, right) {\n    if (isNaN(position) || position <= 0) {\n        return left;\n    }\n    else if (position >= 1) {\n        return right;\n    }\n    switch (space) {\n        case ColorInterpolationSpace.HSL:\n            return hslToRGB(interpolateHSL(position, rgbToHSL(left), rgbToHSL(right)));\n        case ColorInterpolationSpace.HSV:\n            return hsvToRGB(interpolateHSV(position, rgbToHSV(left), rgbToHSV(right)));\n        case ColorInterpolationSpace.XYZ:\n            return xyzToRGB(interpolateXYZ(position, rgbToXYZ(left), rgbToXYZ(right)));\n        case ColorInterpolationSpace.LAB:\n            return labToRGB(interpolateLAB(position, rgbToLAB(left), rgbToLAB(right)));\n        case ColorInterpolationSpace.LCH:\n            return lchToRGB(interpolateLCH(position, rgbToLCH(left), rgbToLCH(right)));\n        default:\n            return interpolateRGB(position, left, right);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}