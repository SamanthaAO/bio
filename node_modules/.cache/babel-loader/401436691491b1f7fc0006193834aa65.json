{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { defaultBreakpoints, identifyBreakpoint } from \"./breakpoints\";\n\nvar BreakpointTracker =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor for the BreakpointTracker component.\n   * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth\n   */\n  function BreakpointTracker() {\n    var _this = this;\n\n    _classCallCheck(this, BreakpointTracker);\n\n    /**\n     * The default array of breakpoint values\n     */\n    this._breakpoints = defaultBreakpoints;\n    /**\n     * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)\n     */\n\n    this._defaultBreakpoint = 0;\n    /**\n     * The subscriptions\n     */\n\n    this.subscriptions = [];\n    /**\n     * Notifies subscribes if a breakpoint threshold has been crossed\n     */\n\n    this.update = function () {\n      var breakpoint = canUseDOM() ? identifyBreakpoint(window.innerWidth, _this._breakpoints) : _this.defaultBreakpoint;\n\n      if (_this.breakpoint !== breakpoint) {\n        _this.breakpoint = breakpoint;\n\n        _this.notifySubscribers(_this.breakpoint);\n      }\n\n      _this.openRequestAnimationFrame = false;\n    };\n    /**\n     * Returns the current breakpoint\n     */\n\n\n    this.currentBreakpoint = function () {\n      return _this.breakpoint;\n    };\n    /**\n     * Request's an animation frame if there are currently no open animation frame requests\n     */\n\n\n    this.requestFrame = function () {\n      if (_this.openRequestAnimationFrame) {\n        return;\n      }\n\n      _this.openRequestAnimationFrame = true;\n      window.requestAnimationFrame(_this.update);\n    };\n\n    if (canUseDOM()) {\n      this.breakpoint = identifyBreakpoint(window.innerWidth, this._breakpoints);\n      window.addEventListener(\"resize\", this.requestFrame);\n    } else {\n      this.breakpoint = this.defaultBreakpoint;\n    }\n  }\n  /**\n   * Gets breakpoint values\n   */\n\n\n  _createClass(BreakpointTracker, [{\n    key: \"subscribe\",\n\n    /**\n     * Subscribes a callback to be called when breakpoints change\n     */\n    value: function subscribe(callback) {\n      if (!this.subscriptions.includes(callback)) {\n        this.subscriptions.push(callback);\n      }\n    }\n    /**\n     * Unsubscribes a callback from the breakpoint tracker\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(callback) {\n      this.subscriptions = this.subscriptions.filter(function (subscription) {\n        return callback !== subscription;\n      });\n    }\n    /**\n     * Call all subscribed callbacks\n     */\n\n  }, {\n    key: \"notifySubscribers\",\n    value: function notifySubscribers(breakpoint) {\n      this.subscriptions.forEach(function (subscription) {\n        subscription(breakpoint);\n      });\n    }\n  }, {\n    key: \"breakpoints\",\n    get: function get() {\n      return this._breakpoints;\n    }\n    /**\n     * Sets breakpoint values\n     */\n    ,\n    set: function set(breakpointConfig) {\n      this._breakpoints = breakpointConfig;\n      this.update();\n    }\n    /**\n     * Gets the default breakpoint value\n     */\n\n  }, {\n    key: \"defaultBreakpoint\",\n    get: function get() {\n      return this._defaultBreakpoint;\n    }\n    /**\n     * Sets the default breakpoint value\n     */\n    ,\n    set: function set(breakpoint) {\n      this._defaultBreakpoint = breakpoint;\n      this.update();\n    }\n  }]);\n\n  return BreakpointTracker;\n}();\n\nexport default new BreakpointTracker();","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/utilities/breakpoint-tracker.js"],"names":["canUseDOM","defaultBreakpoints","identifyBreakpoint","BreakpointTracker","_breakpoints","_defaultBreakpoint","subscriptions","update","breakpoint","window","innerWidth","defaultBreakpoint","notifySubscribers","openRequestAnimationFrame","currentBreakpoint","requestFrame","requestAnimationFrame","addEventListener","callback","includes","push","filter","subscription","forEach","breakpointConfig"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAwD,eAAxD;;IACMC,iB;;;AACF;;;;AAIA,+BAAc;AAAA;;AAAA;;AACV;;;AAGA,SAAKC,YAAL,GAAoBH,kBAApB;AACA;;;;AAGA,SAAKI,kBAAL,GAA0B,CAA1B;AACA;;;;AAGA,SAAKC,aAAL,GAAqB,EAArB;AACA;;;;AAGA,SAAKC,MAAL,GAAc,YAAM;AAChB,UAAMC,UAAU,GAAGR,SAAS,KACtBE,kBAAkB,CAACO,MAAM,CAACC,UAAR,EAAoB,KAAI,CAACN,YAAzB,CADI,GAEtB,KAAI,CAACO,iBAFX;;AAGA,UAAI,KAAI,CAACH,UAAL,KAAoBA,UAAxB,EAAoC;AAChC,QAAA,KAAI,CAACA,UAAL,GAAkBA,UAAlB;;AACA,QAAA,KAAI,CAACI,iBAAL,CAAuB,KAAI,CAACJ,UAA5B;AACH;;AACD,MAAA,KAAI,CAACK,yBAAL,GAAiC,KAAjC;AACH,KATD;AAUA;;;;;AAGA,SAAKC,iBAAL,GAAyB,YAAM;AAC3B,aAAO,KAAI,CAACN,UAAZ;AACH,KAFD;AAGA;;;;;AAGA,SAAKO,YAAL,GAAoB,YAAM;AACtB,UAAI,KAAI,CAACF,yBAAT,EAAoC;AAChC;AACH;;AACD,MAAA,KAAI,CAACA,yBAAL,GAAiC,IAAjC;AACAJ,MAAAA,MAAM,CAACO,qBAAP,CAA6B,KAAI,CAACT,MAAlC;AACH,KAND;;AAOA,QAAIP,SAAS,EAAb,EAAiB;AACb,WAAKQ,UAAL,GAAkBN,kBAAkB,CAACO,MAAM,CAACC,UAAR,EAAoB,KAAKN,YAAzB,CAApC;AACAK,MAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,YAAvC;AACH,KAHD,MAIK;AACD,WAAKP,UAAL,GAAkB,KAAKG,iBAAvB;AACH;AACJ;AACD;;;;;;;;AA0BA;;;8BAGUO,Q,EAAU;AAChB,UAAI,CAAC,KAAKZ,aAAL,CAAmBa,QAAnB,CAA4BD,QAA5B,CAAL,EAA4C;AACxC,aAAKZ,aAAL,CAAmBc,IAAnB,CAAwBF,QAAxB;AACH;AACJ;AACD;;;;;;gCAGYA,Q,EAAU;AAClB,WAAKZ,aAAL,GAAqB,KAAKA,aAAL,CAAmBe,MAAnB,CAA0B,UAACC,YAAD;AAAA,eAAkBJ,QAAQ,KAAKI,YAA/B;AAAA,OAA1B,CAArB;AACH;AACD;;;;;;sCAGkBd,U,EAAY;AAC1B,WAAKF,aAAL,CAAmBiB,OAAnB,CAA2B,UAACD,YAAD,EAAkB;AACzCA,QAAAA,YAAY,CAACd,UAAD,CAAZ;AACH,OAFD;AAGH;;;wBA5CiB;AACd,aAAO,KAAKJ,YAAZ;AACH;AACD;;;;sBAGgBoB,gB,EAAkB;AAC9B,WAAKpB,YAAL,GAAoBoB,gBAApB;AACA,WAAKjB,MAAL;AACH;AACD;;;;;;wBAGwB;AACpB,aAAO,KAAKF,kBAAZ;AACH;AACD;;;;sBAGsBG,U,EAAY;AAC9B,WAAKH,kBAAL,GAA0BG,UAA1B;AACA,WAAKD,MAAL;AACH;;;;;;AAwBL,eAAe,IAAIJ,iBAAJ,EAAf","sourcesContent":["import { canUseDOM } from \"exenv-es6\";\nimport { defaultBreakpoints, identifyBreakpoint, } from \"./breakpoints\";\nclass BreakpointTracker {\n    /**\n     * Constructor for the BreakpointTracker component.\n     * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth\n     */\n    constructor() {\n        /**\n         * The default array of breakpoint values\n         */\n        this._breakpoints = defaultBreakpoints;\n        /**\n         * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)\n         */\n        this._defaultBreakpoint = 0;\n        /**\n         * The subscriptions\n         */\n        this.subscriptions = [];\n        /**\n         * Notifies subscribes if a breakpoint threshold has been crossed\n         */\n        this.update = () => {\n            const breakpoint = canUseDOM()\n                ? identifyBreakpoint(window.innerWidth, this._breakpoints)\n                : this.defaultBreakpoint;\n            if (this.breakpoint !== breakpoint) {\n                this.breakpoint = breakpoint;\n                this.notifySubscribers(this.breakpoint);\n            }\n            this.openRequestAnimationFrame = false;\n        };\n        /**\n         * Returns the current breakpoint\n         */\n        this.currentBreakpoint = () => {\n            return this.breakpoint;\n        };\n        /**\n         * Request's an animation frame if there are currently no open animation frame requests\n         */\n        this.requestFrame = () => {\n            if (this.openRequestAnimationFrame) {\n                return;\n            }\n            this.openRequestAnimationFrame = true;\n            window.requestAnimationFrame(this.update);\n        };\n        if (canUseDOM()) {\n            this.breakpoint = identifyBreakpoint(window.innerWidth, this._breakpoints);\n            window.addEventListener(\"resize\", this.requestFrame);\n        }\n        else {\n            this.breakpoint = this.defaultBreakpoint;\n        }\n    }\n    /**\n     * Gets breakpoint values\n     */\n    get breakpoints() {\n        return this._breakpoints;\n    }\n    /**\n     * Sets breakpoint values\n     */\n    set breakpoints(breakpointConfig) {\n        this._breakpoints = breakpointConfig;\n        this.update();\n    }\n    /**\n     * Gets the default breakpoint value\n     */\n    get defaultBreakpoint() {\n        return this._defaultBreakpoint;\n    }\n    /**\n     * Sets the default breakpoint value\n     */\n    set defaultBreakpoint(breakpoint) {\n        this._defaultBreakpoint = breakpoint;\n        this.update();\n    }\n    /**\n     * Subscribes a callback to be called when breakpoints change\n     */\n    subscribe(callback) {\n        if (!this.subscriptions.includes(callback)) {\n            this.subscriptions.push(callback);\n        }\n    }\n    /**\n     * Unsubscribes a callback from the breakpoint tracker\n     */\n    unsubscribe(callback) {\n        this.subscriptions = this.subscriptions.filter((subscription) => callback !== subscription);\n    }\n    /**\n     * Call all subscribed callbacks\n     */\n    notifySubscribers(breakpoint) {\n        this.subscriptions.forEach((subscription) => {\n            subscription(breakpoint);\n        });\n    }\n}\nexport default new BreakpointTracker();\n"]},"metadata":{},"sourceType":"module"}