{"ast":null,"code":"import { checkDesignSystemResolver } from \"../design-system\";\nimport { getDesignSystemValue } from \"../utilities/design-system\";\nimport { toPx, toUnit } from \"@microsoft/fast-jss-utilities\";\nimport { baseHeightMultiplier, baseHorizontalSpacingMultiplier, designUnit } from \"../utilities/design-system\";\nexport var DensityCategory;\n\n(function (DensityCategory) {\n  DensityCategory[\"compact\"] = \"compact\";\n  DensityCategory[\"normal\"] = \"normal\";\n  DensityCategory[\"spacious\"] = \"spacious\";\n})(DensityCategory || (DensityCategory = {}));\n/**\n * Returns the component height formatted in the provided unit or px by default.\n *\n * @param lines The logical number of lines the component takes, typically 1.\n * @param unit The unit of measurement; px by default.\n */\n\n\nexport function height(lines = 1, unit) {\n  return designSystem => toUnit(unit)(heightNumber(lines)(designSystem));\n}\n/**\n * Returns the component height as a number.\n *\n * @param lines The logical number of lines the component takes, typically 1.\n */\n\nexport function heightNumber(lines = 1) {\n  return designSystem => {\n    return (baseHeightMultiplier(designSystem) + getDesignSystemValue(\"density\")(designSystem)) * designUnit(designSystem) * lines;\n  };\n}\n/**\n * Returns the higher-level category for the density setting.\n *\n * @param designSystem The design system config.\n */\n\nexport function getDensityCategory(designSystem) {\n  const densityValue = getDesignSystemValue(\"density\")(designSystem);\n  return densityValue >= 2 ? DensityCategory.spacious : densityValue <= -2 ? DensityCategory.compact : DensityCategory.normal;\n}\n/**\n * Returns a value based on the higher-level category for the density setting.\n * Used to adjust things like type size and sizing that is based on the category rather than individual density.\n *\n * @param compactValue The adjustment when the category is \"compact\"\n * @param normalValue The adjustment when the category is \"normal\"\n * @param spaciousValue The adjustment when the category is \"spacious\"\n */\n\nexport function densityCategorySwitch(compactValue, normalValue, spaciousValue) {\n  return designSystem => {\n    const category = getDensityCategory(designSystem);\n    return checkDesignSystemResolver(category === DensityCategory.compact ? compactValue : category === DensityCategory.spacious ? spaciousValue : normalValue, designSystem);\n  };\n}\n/**\n * Returns the standard horizontal spacing for text and icons formatted in the provided unit or px by default.\n *\n * @param adjustment Any border that should be removed from the overall content spacing.\n * @param unit The unit of measurement; px by default.\n */\n\nexport function horizontalSpacing(adjustment = 0, unit) {\n  return designSystem => {\n    return toUnit(unit)(horizontalSpacingNumber(checkDesignSystemResolver(adjustment, designSystem))(designSystem));\n  };\n}\n/**\n * Returns the standard horizontal spacing for text and icons as a number.\n *\n * @param adjustment Any border that should be removed from the overall content spacing.\n */\n\nexport function horizontalSpacingNumber(adjustment = 0) {\n  return designSystem => {\n    return (baseHorizontalSpacingMultiplier(designSystem) + densityCategorySwitch(-1, 0, 1)(designSystem)) * designUnit(designSystem) - adjustment;\n  };\n}\nexport function glyphSize(arg) {\n  return typeof arg === \"string\" ? designSystem => toUnit(arg)(glyphSizeNumber(designSystem)) : toPx(glyphSizeNumber(arg));\n}\n/**\n * Returns the width and height for an icon as a number.\n */\n\nexport function glyphSizeNumber(designSystem) {\n  const halfDesignUnit = designUnit(designSystem) / 2;\n  const sizeOffset = densityCategorySwitch(halfDesignUnit * -1, 0, halfDesignUnit)(designSystem);\n  return baseHeightMultiplier(designSystem) / 2 * designUnit(designSystem) + sizeOffset;\n}\n/**\n * @deprecated Use height instead.\n * @param value\n * @param unit\n */\n\nexport function density(value, unit) {\n  return config => toUnit(unit)(value * 1);\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/density.js"],"names":["checkDesignSystemResolver","getDesignSystemValue","toPx","toUnit","baseHeightMultiplier","baseHorizontalSpacingMultiplier","designUnit","DensityCategory","height","lines","unit","designSystem","heightNumber","getDensityCategory","densityValue","spacious","compact","normal","densityCategorySwitch","compactValue","normalValue","spaciousValue","category","horizontalSpacing","adjustment","horizontalSpacingNumber","glyphSize","arg","glyphSizeNumber","halfDesignUnit","sizeOffset","density","value","config"],"mappings":"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","sourcesContent":["import { checkDesignSystemResolver, } from \"../design-system\";\nimport { getDesignSystemValue } from \"../utilities/design-system\";\nimport { toPx, toUnit } from \"@microsoft/fast-jss-utilities\";\nimport { baseHeightMultiplier, baseHorizontalSpacingMultiplier, designUnit, } from \"../utilities/design-system\";\nexport var DensityCategory;\n(function (DensityCategory) {\n    DensityCategory[\"compact\"] = \"compact\";\n    DensityCategory[\"normal\"] = \"normal\";\n    DensityCategory[\"spacious\"] = \"spacious\";\n})(DensityCategory || (DensityCategory = {}));\n/**\n * Returns the component height formatted in the provided unit or px by default.\n *\n * @param lines The logical number of lines the component takes, typically 1.\n * @param unit The unit of measurement; px by default.\n */\nexport function height(lines = 1, unit) {\n    return (designSystem) => toUnit(unit)(heightNumber(lines)(designSystem));\n}\n/**\n * Returns the component height as a number.\n *\n * @param lines The logical number of lines the component takes, typically 1.\n */\nexport function heightNumber(lines = 1) {\n    return (designSystem) => {\n        return ((baseHeightMultiplier(designSystem) +\n            getDesignSystemValue(\"density\")(designSystem)) *\n            designUnit(designSystem) *\n            lines);\n    };\n}\n/**\n * Returns the higher-level category for the density setting.\n *\n * @param designSystem The design system config.\n */\nexport function getDensityCategory(designSystem) {\n    const densityValue = getDesignSystemValue(\"density\")(designSystem);\n    return densityValue >= 2\n        ? DensityCategory.spacious\n        : densityValue <= -2\n            ? DensityCategory.compact\n            : DensityCategory.normal;\n}\n/**\n * Returns a value based on the higher-level category for the density setting.\n * Used to adjust things like type size and sizing that is based on the category rather than individual density.\n *\n * @param compactValue The adjustment when the category is \"compact\"\n * @param normalValue The adjustment when the category is \"normal\"\n * @param spaciousValue The adjustment when the category is \"spacious\"\n */\nexport function densityCategorySwitch(compactValue, normalValue, spaciousValue) {\n    return (designSystem) => {\n        const category = getDensityCategory(designSystem);\n        return checkDesignSystemResolver(category === DensityCategory.compact\n            ? compactValue\n            : category === DensityCategory.spacious\n                ? spaciousValue\n                : normalValue, designSystem);\n    };\n}\n/**\n * Returns the standard horizontal spacing for text and icons formatted in the provided unit or px by default.\n *\n * @param adjustment Any border that should be removed from the overall content spacing.\n * @param unit The unit of measurement; px by default.\n */\nexport function horizontalSpacing(adjustment = 0, unit) {\n    return (designSystem) => {\n        return toUnit(unit)(horizontalSpacingNumber(checkDesignSystemResolver(adjustment, designSystem))(designSystem));\n    };\n}\n/**\n * Returns the standard horizontal spacing for text and icons as a number.\n *\n * @param adjustment Any border that should be removed from the overall content spacing.\n */\nexport function horizontalSpacingNumber(adjustment = 0) {\n    return (designSystem) => {\n        return ((baseHorizontalSpacingMultiplier(designSystem) +\n            densityCategorySwitch(-1, 0, 1)(designSystem)) *\n            designUnit(designSystem) -\n            adjustment);\n    };\n}\nexport function glyphSize(arg) {\n    return typeof arg === \"string\"\n        ? (designSystem) => toUnit(arg)(glyphSizeNumber(designSystem))\n        : toPx(glyphSizeNumber(arg));\n}\n/**\n * Returns the width and height for an icon as a number.\n */\nexport function glyphSizeNumber(designSystem) {\n    const halfDesignUnit = designUnit(designSystem) / 2;\n    const sizeOffset = densityCategorySwitch(halfDesignUnit * -1, 0, halfDesignUnit)(designSystem);\n    return ((baseHeightMultiplier(designSystem) / 2) * designUnit(designSystem) + sizeOffset);\n}\n/**\n * @deprecated Use height instead.\n * @param value\n * @param unit\n */\nexport function density(value, unit) {\n    return (config) => toUnit(unit)(value * 1);\n}\n"]},"metadata":{},"sourceType":"module"}