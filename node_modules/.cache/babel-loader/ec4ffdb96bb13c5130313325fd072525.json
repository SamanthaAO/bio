{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { SliderContext } from \"../slider/slider-context\";\nimport { SliderThumb } from \"../slider/slider\";\nimport { SliderOrientation } from \"../slider/slider.props\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { SliderTrackItemAnchor } from \"./slider-track-item.props\";\n\nclass SliderTrackItem extends Foundation {\n  constructor() {\n    super(...arguments);\n    this.handledProps = {\n      maxValuePositionBinding: void 0,\n      minValuePositionBinding: void 0,\n      managedClasses: void 0\n    };\n    /**\n     * Gets the appropriate absolute positioning\n     */\n\n    this.applyPositioningValues = () => {\n      const minValue = this.getPositionAsPercent(this.props.minValuePositionBinding);\n      const maxValue = this.getPositionAsPercent(this.props.maxValuePositionBinding);\n\n      if (this.context.sliderOrientation === SliderOrientation.vertical) {\n        return {\n          top: `${100 - maxValue}%`,\n          bottom: `${minValue}%`\n        };\n      } else if (this.context.sliderDirection === \"rtl\") {\n        return {\n          left: maxValue !== undefined ? `${100 - maxValue}%` : undefined,\n          right: minValue !== undefined ? `${minValue}%` : undefined\n        };\n      } else {\n        return {\n          left: minValue !== undefined ? `${minValue}%` : undefined,\n          right: maxValue !== undefined ? `${100 - maxValue}%` : undefined\n        };\n      }\n    };\n    /**\n     *  Returns a percent value to use for positioning based on the selected anchor type\n     */\n\n\n    this.getPositionAsPercent = anchor => {\n      if (anchor === undefined || typeof this.context.sliderValueAsPercent !== \"function\" || this.context.sliderState === null) {\n        return undefined;\n      }\n\n      if (typeof anchor === \"number\") {\n        return this.context.sliderValueAsPercent(anchor);\n      }\n\n      switch (anchor) {\n        case SliderTrackItemAnchor.selectedRangeMax:\n          return this.context.sliderValueAsPercent((this.context.sliderState.isDragging || this.context.sliderState.isTouchDragging) && this.context.sliderState.activeThumb === SliderThumb.upperThumb ? this.context.sliderState.dragValue : this.context.sliderState.upperValue);\n\n        case SliderTrackItemAnchor.selectedRangeMin:\n          return this.context.sliderValueAsPercent((this.context.sliderState.isDragging || this.context.sliderState.isTouchDragging) && this.context.sliderState.activeThumb === SliderThumb.lowerThumb ? this.context.sliderState.dragValue : this.context.sliderState.lowerValue);\n\n        case SliderTrackItemAnchor.totalRangeMax:\n          return 100;\n\n        case SliderTrackItemAnchor.totalRangeMin:\n          return 0;\n\n        case SliderTrackItemAnchor.constrainedRangeMax:\n          return this.context.sliderConstrainedRange !== null ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.maxValue) : 100;\n\n        case SliderTrackItemAnchor.constrainedRangeMin:\n          return this.context.sliderConstrainedRange !== null ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.minValue) : 0;\n      }\n    };\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      className: this.generateClassNames(),\n      style: Object.assign({\n        position: \"absolute\"\n      }, this.applyPositioningValues())\n    }), this.props.children);\n  }\n  /**\n   * Create class-names\n   */\n\n\n  generateClassNames() {\n    const _this$props$managedCl = this.props.managedClasses,\n          sliderTrackItem = _this$props$managedCl.sliderTrackItem,\n          sliderTrackItem_vertical = _this$props$managedCl.sliderTrackItem_vertical,\n          sliderTrackItem_horizontal = _this$props$managedCl.sliderTrackItem_horizontal;\n    const orientation = this.context.sliderOrientation || SliderOrientation.horizontal;\n    return super.generateClassNames(classNames(sliderTrackItem, [sliderTrackItem_vertical, orientation === SliderOrientation.vertical], [sliderTrackItem_horizontal, orientation === SliderOrientation.horizontal]));\n  }\n\n}\n\nSliderTrackItem.displayName = `${DisplayNamePrefix}SliderTrackItem`;\nSliderTrackItem.defaultProps = {\n  managedClasses: {}\n};\nSliderTrackItem.contextType = SliderContext;\nSliderTrackItem.contextType = SliderContext;\nexport default SliderTrackItem;\nexport * from \"./slider-track-item.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/slider-track-item/slider-track-item.js"],"names":["Foundation","classNames","React","SliderContext","SliderThumb","SliderOrientation","DisplayNamePrefix","SliderTrackItemAnchor","SliderTrackItem","constructor","arguments","handledProps","maxValuePositionBinding","minValuePositionBinding","managedClasses","applyPositioningValues","minValue","getPositionAsPercent","props","maxValue","context","sliderOrientation","vertical","top","bottom","sliderDirection","left","undefined","right","anchor","sliderValueAsPercent","sliderState","selectedRangeMax","isDragging","isTouchDragging","activeThumb","upperThumb","dragValue","upperValue","selectedRangeMin","lowerThumb","lowerValue","totalRangeMax","totalRangeMin","constrainedRangeMax","sliderConstrainedRange","constrainedRangeMin","render","createElement","Object","assign","unhandledProps","className","generateClassNames","style","position","children","sliderTrackItem","sliderTrackItem_vertical","sliderTrackItem_horizontal","orientation","horizontal","displayName","defaultProps","contextType"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { SliderContext } from \"../slider/slider-context\";\nimport { SliderThumb } from \"../slider/slider\";\nimport { SliderOrientation } from \"../slider/slider.props\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { SliderTrackItemAnchor, } from \"./slider-track-item.props\";\nclass SliderTrackItem extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            maxValuePositionBinding: void 0,\n            minValuePositionBinding: void 0,\n            managedClasses: void 0,\n        };\n        /**\n         * Gets the appropriate absolute positioning\n         */\n        this.applyPositioningValues = () => {\n            const minValue = this.getPositionAsPercent(this.props.minValuePositionBinding);\n            const maxValue = this.getPositionAsPercent(this.props.maxValuePositionBinding);\n            if (this.context.sliderOrientation === SliderOrientation.vertical) {\n                return {\n                    top: `${100 - maxValue}%`,\n                    bottom: `${minValue}%`,\n                };\n            }\n            else if (this.context.sliderDirection === \"rtl\") {\n                return {\n                    left: maxValue !== undefined ? `${100 - maxValue}%` : undefined,\n                    right: minValue !== undefined ? `${minValue}%` : undefined,\n                };\n            }\n            else {\n                return {\n                    left: minValue !== undefined ? `${minValue}%` : undefined,\n                    right: maxValue !== undefined ? `${100 - maxValue}%` : undefined,\n                };\n            }\n        };\n        /**\n         *  Returns a percent value to use for positioning based on the selected anchor type\n         */\n        this.getPositionAsPercent = (anchor) => {\n            if (anchor === undefined ||\n                typeof this.context.sliderValueAsPercent !== \"function\" ||\n                this.context.sliderState === null) {\n                return undefined;\n            }\n            if (typeof anchor === \"number\") {\n                return this.context.sliderValueAsPercent(anchor);\n            }\n            switch (anchor) {\n                case SliderTrackItemAnchor.selectedRangeMax:\n                    return this.context.sliderValueAsPercent((this.context.sliderState.isDragging ||\n                        this.context.sliderState.isTouchDragging) &&\n                        this.context.sliderState.activeThumb === SliderThumb.upperThumb\n                        ? this.context.sliderState.dragValue\n                        : this.context.sliderState.upperValue);\n                case SliderTrackItemAnchor.selectedRangeMin:\n                    return this.context.sliderValueAsPercent((this.context.sliderState.isDragging ||\n                        this.context.sliderState.isTouchDragging) &&\n                        this.context.sliderState.activeThumb === SliderThumb.lowerThumb\n                        ? this.context.sliderState.dragValue\n                        : this.context.sliderState.lowerValue);\n                case SliderTrackItemAnchor.totalRangeMax:\n                    return 100;\n                case SliderTrackItemAnchor.totalRangeMin:\n                    return 0;\n                case SliderTrackItemAnchor.constrainedRangeMax:\n                    return this.context.sliderConstrainedRange !== null\n                        ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.maxValue)\n                        : 100;\n                case SliderTrackItemAnchor.constrainedRangeMin:\n                    return this.context.sliderConstrainedRange !== null\n                        ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.minValue)\n                        : 0;\n            }\n        };\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: Object.assign({ position: \"absolute\" }, this.applyPositioningValues()) }), this.props.children));\n    }\n    /**\n     * Create class-names\n     */\n    generateClassNames() {\n        const { sliderTrackItem, sliderTrackItem_vertical, sliderTrackItem_horizontal, } = this.props.managedClasses;\n        const orientation = this.context.sliderOrientation || SliderOrientation.horizontal;\n        return super.generateClassNames(classNames(sliderTrackItem, [sliderTrackItem_vertical, orientation === SliderOrientation.vertical], [sliderTrackItem_horizontal, orientation === SliderOrientation.horizontal]));\n    }\n}\nSliderTrackItem.displayName = `${DisplayNamePrefix}SliderTrackItem`;\nSliderTrackItem.defaultProps = {\n    managedClasses: {},\n};\nSliderTrackItem.contextType = SliderContext;\nSliderTrackItem.contextType = SliderContext;\nexport default SliderTrackItem;\nexport * from \"./slider-track-item.props\";\n"]},"metadata":{},"sourceType":"module"}