{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeEnter, keyCodeEscape, keyCodeHome, keyCodeSpace, keyCodeTab, startsWith } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, isEqual } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ListboxContext } from \"./listbox-context\";\n\nclass Listbox extends Foundation {\n  constructor(props) {\n    super(props);\n    this.handledProps = {\n      children: void 0,\n      defaultSelection: void 0,\n      disabled: void 0,\n      labelledBy: void 0,\n      managedClasses: void 0,\n      multiselectable: void 0,\n      onItemInvoked: void 0,\n      onSelectedItemsChanged: void 0,\n      selectedItems: void 0,\n      typeAheadEnabled: void 0,\n      typeAheadPropertyKey: void 0,\n      focusItemOnMount: void 0,\n      selectOnFocus: void 0\n    };\n    this.rootElement = React.createRef();\n    this.typeAheadString = \"\";\n    this.shiftRangeSelectStartIndex = -1;\n    /**\n     * Render a single child\n     */\n\n    this.renderChild = (child, index) => {\n      return React.cloneElement(child, {\n        tabIndex: index === this.state.focusIndex ? 0 : -1\n      });\n    };\n    /**\n     * Determines if a given element should be focusable by the menu\n     */\n\n\n    this.isFocusableElement = element => {\n      return element instanceof HTMLElement && element.getAttribute(\"role\") === \"option\" && !this.isDisabledElement(element) && !this.props.disabled;\n    };\n    /**\n     * Determines if a given element is disabled\n     */\n\n\n    this.isDisabledElement = element => {\n      return element instanceof HTMLElement && element.getAttribute(\"aria-disabled\") === \"true\";\n    };\n    /**\n     * sets focus state and selection when component is initially mounted\n     * or when default selection changes\n     */\n\n\n    this.setInitialFocus = selection => {\n      let focusIndex = -1;\n      focusIndex = selection.length > 0 ? Listbox.getItemIndexById(selection[0].id, this.props.children) : this.domChildren().findIndex(this.isFocusableElement);\n\n      if (focusIndex !== -1) {\n        if (this.props.focusItemOnMount) {\n          this.setFocus(focusIndex, +1);\n        }\n\n        this.setState({\n          focusIndex\n        });\n      }\n    };\n    /**\n     * gets the initial selection state based on props\n     */\n\n\n    this.getInitialSelection = () => {\n      let initialSelection;\n\n      if (this.props.selectedItems !== undefined) {\n        initialSelection = Listbox.getListboxItemDataFromIds(this.props.selectedItems, this.props.children);\n      } else {\n        initialSelection = Listbox.getListboxItemDataFromIds(this.props.defaultSelection, this.props.children);\n      }\n\n      if (!this.props.multiselectable && initialSelection.length > 1) {\n        initialSelection = initialSelection.slice(0, 1);\n      }\n\n      return initialSelection;\n    };\n    /**\n     * Function called by child select options when they have been focused\n     */\n\n\n    this.listboxItemfocused = (item, event) => {\n      if (this.props.disabled) {\n        return;\n      }\n\n      const target = event.currentTarget;\n      const focusIndex = this.domChildren().indexOf(target);\n\n      if (this.isDisabledElement(target)) {\n        target.blur();\n        return;\n      }\n\n      this.setState({\n        focusIndex,\n        focussedItemId: item.id\n      });\n\n      if (!this.props.multiselectable && this.props.selectOnFocus) {\n        this.updateSelection([item]);\n      }\n    };\n    /**\n     * Handle the keydown event of the root menu\n     */\n\n\n    this.handleMenuKeyDown = event => {\n      if (typeof this.props.onKeyDown === \"function\") {\n        this.props.onKeyDown(event);\n      }\n\n      if (event.defaultPrevented || this.props.disabled) {\n        return;\n      }\n\n      let focusItemId;\n\n      switch (event.keyCode) {\n        case keyCodeEscape:\n        case keyCodeEnter:\n        case keyCodeSpace:\n        case keyCodeTab:\n          return;\n\n        case keyCodeArrowDown:\n        case keyCodeArrowRight:\n          focusItemId = this.setFocus(this.state.focusIndex + 1, 1);\n\n          if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n            const itemProps = Listbox.getItemPropsById(focusItemId, this.props.children);\n\n            if (itemProps !== null) {\n              this.toggleItem(itemProps);\n            }\n          }\n\n          event.preventDefault();\n          break;\n\n        case keyCodeArrowUp:\n        case keyCodeArrowLeft:\n          focusItemId = this.setFocus(this.state.focusIndex - 1, -1);\n\n          if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n            const itemData = Listbox.getItemPropsById(focusItemId, this.props.children);\n\n            if (itemData !== null) {\n              this.toggleItem(itemData);\n            }\n          }\n\n          event.preventDefault();\n          break;\n\n        case keyCodeEnd:\n          if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n            this.selectRange(this.state.focusIndex, this.domChildren().length - 1);\n          }\n\n          this.setFocus(this.domChildren().length - 1, -1);\n          break;\n\n        case keyCodeHome:\n          if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n            this.selectRange(0, this.state.focusIndex);\n          }\n\n          this.setFocus(0, 1);\n          break;\n\n        default:\n          if (event.key === \"A\") {\n            this.selectRange(0, this.domChildren().length);\n          } else if (!event.ctrlKey && this.props.typeAheadEnabled) {\n            this.processTypeAhead(event);\n          }\n\n      }\n    };\n    /**\n     * Sets focus based on characters typed\n     */\n\n\n    this.processTypeAhead = e => {\n      clearTimeout(this.typeAheadTimer);\n      this.typeAheadString = this.typeAheadString + e.key.toLowerCase();\n      let matchIndex = -1;\n      const children = React.Children.toArray(this.props.children);\n      children.some((child, index) => {\n        if (child.props[this.props.typeAheadPropertyKey] === undefined) {\n          return false;\n        }\n\n        if (startsWith(child.props[this.props.typeAheadPropertyKey].toLowerCase(), this.typeAheadString)) {\n          matchIndex = index;\n          return true;\n        }\n      });\n\n      if (matchIndex !== -1) {\n        this.typeAheadTimer = setTimeout(() => {\n          this.typeAheadTimerExpired();\n        }, 1000);\n        this.setFocus(matchIndex, 1);\n      } else {\n        this.typeAheadString = \"\";\n      }\n    };\n    /**\n     * clears the type ahead buffer after specified time of no typing\n     */\n\n\n    this.typeAheadTimerExpired = () => {\n      this.typeAheadString = \"\";\n      clearTimeout(this.typeAheadTimer);\n    };\n    /**\n     * Function called by child items when they have been invoked\n     */\n\n\n    this.listboxItemInvoked = (item, event) => {\n      if (this.props.disabled) {\n        return;\n      }\n\n      if (typeof this.props.onItemInvoked === \"function\") {\n        this.props.onItemInvoked(item);\n      }\n\n      const target = event.currentTarget;\n      const itemIndex = this.domChildren().indexOf(target);\n\n      if (this.props.multiselectable && event.type === \"click\") {\n        if (!event.shiftKey || this.shiftRangeSelectStartIndex === -1) {\n          this.shiftRangeSelectStartIndex = itemIndex;\n        }\n\n        if (event.ctrlKey) {\n          this.toggleItem(item);\n        } else if (event.shiftKey) {\n          this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n        } else {\n          this.updateSelection([item]);\n        }\n      } else if (this.props.multiselectable && event.type === \"keydown\") {\n        if (event.shiftKey) {\n          this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n        } else {\n          this.toggleItem(item);\n        }\n      } else {\n        this.updateSelection([item]);\n      }\n    };\n    /**\n     * Toggle the selection state of the item\n     */\n\n\n    this.toggleItem = item => {\n      const culledSelection = this.state.selectedItems.filter(listboxItem => {\n        return listboxItem.id !== item.id;\n      });\n\n      if (culledSelection.length < this.state.selectedItems.length) {\n        this.updateSelection(culledSelection);\n      } else {\n        const newSelectedItems = this.state.selectedItems.concat([item]);\n        this.updateSelection(newSelectedItems);\n      }\n    };\n    /**\n     * Select a range of items\n     */\n\n\n    this.selectRange = (startIndex, endIndex) => {\n      const children = React.Children.toArray(this.props.children);\n      const childrenInRange = children.slice(startIndex >= endIndex ? endIndex : startIndex, startIndex >= endIndex ? startIndex + 1 : endIndex + 1);\n      const newSelectedItems = childrenInRange.map(child => {\n        return child.props;\n      });\n      this.updateSelection(newSelectedItems);\n    };\n    /**\n     * Updates selection state (should be the only place this is done outside of initialization)\n     */\n\n\n    this.updateSelection = newSelection => {\n      const validatedSelection = Listbox.validateSelection(newSelection, this.props.children);\n\n      if (isEqual(validatedSelection, this.state.selectedItems)) {\n        return;\n      }\n\n      if (this.props.selectedItems === undefined) {\n        this.setState({\n          selectedItems: validatedSelection\n        });\n      }\n\n      if (this.props.onSelectedItemsChanged) {\n        this.props.onSelectedItemsChanged(validatedSelection);\n      }\n    };\n\n    this.state = {\n      focusIndex: -1,\n      focussedItemId: \"\",\n      selectedItems: this.getInitialSelection()\n    };\n  }\n  /**\n   * converts an array of item id's to an array of ListboxItemProps objects populated by data\n   * extracted from the provided children based on id match\n   */\n\n\n  static getListboxItemDataFromIds(selectedIds, children) {\n    const selectedItems = Listbox.validateSelection(selectedIds, children);\n    return selectedItems;\n  }\n  /**\n   * Gets the index of an item from it's id by examining children props\n   */\n\n\n  static getItemIndexById(itemId, children) {\n    const childrenAsArray = React.Children.toArray(children);\n    return childrenAsArray.findIndex(child => {\n      if (child.props[Listbox.idPropertyKey] === undefined || child.props[Listbox.idPropertyKey] !== itemId) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\n   * tests whether a React.ReactElement is a valid item to select\n   * (ie. such an option id exists and the option is not disabled),\n   * the values of the returned data objects are updated to reflect values of child object\n   * with matching id.\n   */\n\n\n  static isValidSelectedItem(itemNode) {\n    if (itemNode === undefined || itemNode.props[Listbox.disabledPropertyKey] === true || itemNode.props[Listbox.valuePropertyKey] === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Gets a child node from it's id by examining provided children\n   */\n\n\n  static getNodeById(itemId, children) {\n    const childrenAsArray = React.Children.toArray(children);\n    const matchNode = childrenAsArray.find(child => {\n      if (child.props[Listbox.idPropertyKey] === undefined || child.props[Listbox.idPropertyKey] !== itemId) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchNode;\n  }\n  /**\n   * Gets the listItemData of an item from it's id by examining children props\n   */\n\n\n  static getItemPropsById(itemId, children) {\n    const matchNode = this.getNodeById(itemId, children);\n\n    if (matchNode !== undefined) {\n      return matchNode.props;\n    }\n\n    return null;\n  }\n  /**\n   * validates selected options against child props and returns only the valid ones\n   * (ie. such an option id exists and the option is not disabled),\n   * the values of the returned data objects are updated to reflect values of child object\n   * with matching id.\n   */\n\n\n  static validateSelection(items, children) {\n    const validSelection = items.map(item => {\n      let itemId = \"\";\n\n      if (typeof item === \"string\") {\n        itemId = item;\n      } else {\n        itemId = item.id;\n      }\n\n      const itemNode = this.getNodeById(itemId, children);\n\n      if (!Listbox.isValidSelectedItem(itemNode)) {\n        return null;\n      }\n\n      return itemNode.props;\n    }).filter(listboxItem => {\n      return listboxItem !== null;\n    });\n    return validSelection;\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      ref: this.rootElement,\n      role: \"listbox\",\n      \"aria-disabled\": this.props.disabled || null,\n      \"aria-multiselectable\": this.props.multiselectable || null,\n      \"aria-activedescendant\": this.state.focussedItemId,\n      \"aria-labelledby\": this.props.labelledBy || null,\n      className: this.generateClassNames(),\n      onKeyDown: this.handleMenuKeyDown\n    }), React.createElement(ListboxContext.Provider, {\n      value: {\n        listboxSelectedItems: this.state.selectedItems,\n        listboxItemFocused: this.listboxItemfocused,\n        listboxItemInvoked: this.listboxItemInvoked,\n        listboxMultiselectable: this.props.multiselectable\n      }\n    }, this.renderChildren()));\n  }\n\n  componentDidUpdate(prevProps) {\n    // if default selection changes between renders we treat as a effective reset\n    // of selection and focus in uncontrolled mode\n    if (!isEqual(prevProps.defaultSelection, this.props.defaultSelection) && this.props.selectedItems === undefined) {\n      const updatedSelection = this.getInitialSelection();\n      this.updateSelection(updatedSelection);\n      this.setInitialFocus(updatedSelection);\n    }\n  }\n\n  componentDidMount() {\n    this.setInitialFocus(this.state.selectedItems);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typeAheadTimer);\n  }\n  /**\n   * Create class names\n   */\n\n\n  generateClassNames() {\n    const _this$props$managedCl = this.props.managedClasses,\n          listbox = _this$props$managedCl.listbox,\n          listbox__disabled = _this$props$managedCl.listbox__disabled;\n    return super.generateClassNames(classNames(listbox, [listbox__disabled, this.props.disabled]));\n  }\n  /**\n   * Render all child elements\n   */\n\n\n  renderChildren() {\n    return React.Children.map(this.props.children, this.renderChild);\n  }\n  /**\n   * Return an array of all focusabled elements that are children\n   * of the context menu\n   */\n\n\n  domChildren() {\n    return canUseDOM() && this.rootElement.current instanceof HTMLElement ? Array.from(this.rootElement.current.children) : [];\n  }\n  /**\n   * Sets focus to the nearest focusable element to the supplied focusIndex.\n   * The adjustment controls how the function searches for other focusable elements\n   * if the element at the focusIndex is not focusable. A positive number will search\n   * towards the end of the children array, whereas a negative number will search towards\n   * the beginning of the children array.  Returns the focussed item id or an empty string\n   * if none found\n   */\n\n\n  setFocus(focusIndex, adjustment) {\n    const children = this.domChildren();\n    let focusItemId = \"\";\n\n    while (inRange(focusIndex, children.length)) {\n      const child = children[focusIndex];\n      focusItemId = child.id;\n\n      if (this.isFocusableElement(child)) {\n        if (!this.props.disabled) {\n          child.focus();\n        }\n\n        break;\n      }\n\n      focusIndex += adjustment;\n    }\n\n    return focusItemId;\n  }\n\n}\n\nListbox.displayName = `${DisplayNamePrefix}Listbox`;\nListbox.defaultProps = {\n  multiselectable: false,\n  defaultSelection: [],\n  typeAheadPropertyKey: \"displayString\",\n  typeAheadEnabled: true,\n  focusItemOnMount: false,\n  managedClasses: {},\n  selectOnFocus: true\n};\n/**\n * returns the first selectable item in the provided array of children\n */\n\nListbox.getFirstValidOptionInRange = (startIndex, endIndex, childrenAsArray, increment) => {\n  for (let i = startIndex; i !== endIndex + increment; i = i + increment) {\n    const thisOption = childrenAsArray[i];\n\n    if (Listbox.isValidSelectedItem(thisOption)) {\n      return thisOption;\n    }\n\n    return null;\n  }\n};\n/**\n * returns all the selectable items in the provided array of children\n */\n\n\nListbox.getValidOptions = childrenAsArray => {\n  return childrenAsArray.filter(itemNode => {\n    return Listbox.isValidSelectedItem(itemNode);\n  });\n};\n\nListbox.valuePropertyKey = \"value\";\nListbox.idPropertyKey = \"id\";\nListbox.displayStringPropertyKey = \"displayString\";\nListbox.disabledPropertyKey = \"disabled\";\nexport default Listbox;\nexport { ListboxContext };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/listbox/listbox.js"],"names":["Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnd","keyCodeEnter","keyCodeEscape","keyCodeHome","keyCodeSpace","keyCodeTab","startsWith","canUseDOM","inRange","isEqual","React","DisplayNamePrefix","ListboxContext","Listbox","constructor","props","handledProps","children","defaultSelection","disabled","labelledBy","managedClasses","multiselectable","onItemInvoked","onSelectedItemsChanged","selectedItems","typeAheadEnabled","typeAheadPropertyKey","focusItemOnMount","selectOnFocus","rootElement","createRef","typeAheadString","shiftRangeSelectStartIndex","renderChild","child","index","cloneElement","tabIndex","state","focusIndex","isFocusableElement","element","HTMLElement","getAttribute","isDisabledElement","setInitialFocus","selection","length","getItemIndexById","id","domChildren","findIndex","setFocus","setState","getInitialSelection","initialSelection","undefined","getListboxItemDataFromIds","slice","listboxItemfocused","item","event","target","currentTarget","indexOf","blur","focussedItemId","updateSelection","handleMenuKeyDown","onKeyDown","defaultPrevented","focusItemId","keyCode","shiftKey","itemProps","getItemPropsById","toggleItem","preventDefault","itemData","ctrlKey","selectRange","key","processTypeAhead","e","clearTimeout","typeAheadTimer","toLowerCase","matchIndex","Children","toArray","some","setTimeout","typeAheadTimerExpired","listboxItemInvoked","itemIndex","type","culledSelection","filter","listboxItem","newSelectedItems","concat","startIndex","endIndex","childrenInRange","map","newSelection","validatedSelection","validateSelection","selectedIds","itemId","childrenAsArray","idPropertyKey","isValidSelectedItem","itemNode","disabledPropertyKey","valuePropertyKey","getNodeById","matchNode","find","items","validSelection","render","createElement","Object","assign","unhandledProps","ref","role","className","generateClassNames","Provider","value","listboxSelectedItems","listboxItemFocused","listboxMultiselectable","renderChildren","componentDidUpdate","prevProps","updatedSelection","componentDidMount","componentWillUnmount","listbox","listbox__disabled","current","Array","from","adjustment","focus","displayName","defaultProps","getFirstValidOptionInRange","increment","i","thisOption","getValidOptions","displayStringPropertyKey"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeEnter, keyCodeEscape, keyCodeHome, keyCodeSpace, keyCodeTab, startsWith, } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, isEqual } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ListboxContext } from \"./listbox-context\";\nclass Listbox extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            children: void 0,\n            defaultSelection: void 0,\n            disabled: void 0,\n            labelledBy: void 0,\n            managedClasses: void 0,\n            multiselectable: void 0,\n            onItemInvoked: void 0,\n            onSelectedItemsChanged: void 0,\n            selectedItems: void 0,\n            typeAheadEnabled: void 0,\n            typeAheadPropertyKey: void 0,\n            focusItemOnMount: void 0,\n            selectOnFocus: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.typeAheadString = \"\";\n        this.shiftRangeSelectStartIndex = -1;\n        /**\n         * Render a single child\n         */\n        this.renderChild = (child, index) => {\n            return React.cloneElement(child, {\n                tabIndex: index === this.state.focusIndex ? 0 : -1,\n            });\n        };\n        /**\n         * Determines if a given element should be focusable by the menu\n         */\n        this.isFocusableElement = (element) => {\n            return (element instanceof HTMLElement &&\n                element.getAttribute(\"role\") === \"option\" &&\n                !this.isDisabledElement(element) &&\n                !this.props.disabled);\n        };\n        /**\n         * Determines if a given element is disabled\n         */\n        this.isDisabledElement = (element) => {\n            return (element instanceof HTMLElement &&\n                element.getAttribute(\"aria-disabled\") === \"true\");\n        };\n        /**\n         * sets focus state and selection when component is initially mounted\n         * or when default selection changes\n         */\n        this.setInitialFocus = (selection) => {\n            let focusIndex = -1;\n            focusIndex =\n                selection.length > 0\n                    ? Listbox.getItemIndexById(selection[0].id, this.props.children)\n                    : this.domChildren().findIndex(this.isFocusableElement);\n            if (focusIndex !== -1) {\n                if (this.props.focusItemOnMount) {\n                    this.setFocus(focusIndex, +1);\n                }\n                this.setState({\n                    focusIndex,\n                });\n            }\n        };\n        /**\n         * gets the initial selection state based on props\n         */\n        this.getInitialSelection = () => {\n            let initialSelection;\n            if (this.props.selectedItems !== undefined) {\n                initialSelection = Listbox.getListboxItemDataFromIds(this.props.selectedItems, this.props.children);\n            }\n            else {\n                initialSelection = Listbox.getListboxItemDataFromIds(this.props.defaultSelection, this.props.children);\n            }\n            if (!this.props.multiselectable && initialSelection.length > 1) {\n                initialSelection = initialSelection.slice(0, 1);\n            }\n            return initialSelection;\n        };\n        /**\n         * Function called by child select options when they have been focused\n         */\n        this.listboxItemfocused = (item, event) => {\n            if (this.props.disabled) {\n                return;\n            }\n            const target = event.currentTarget;\n            const focusIndex = this.domChildren().indexOf(target);\n            if (this.isDisabledElement(target)) {\n                target.blur();\n                return;\n            }\n            this.setState({\n                focusIndex,\n                focussedItemId: item.id,\n            });\n            if (!this.props.multiselectable && this.props.selectOnFocus) {\n                this.updateSelection([item]);\n            }\n        };\n        /**\n         * Handle the keydown event of the root menu\n         */\n        this.handleMenuKeyDown = (event) => {\n            if (typeof this.props.onKeyDown === \"function\") {\n                this.props.onKeyDown(event);\n            }\n            if (event.defaultPrevented || this.props.disabled) {\n                return;\n            }\n            let focusItemId;\n            switch (event.keyCode) {\n                case keyCodeEscape:\n                case keyCodeEnter:\n                case keyCodeSpace:\n                case keyCodeTab:\n                    return;\n                case keyCodeArrowDown:\n                case keyCodeArrowRight:\n                    focusItemId = this.setFocus(this.state.focusIndex + 1, 1);\n                    if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n                        const itemProps = Listbox.getItemPropsById(focusItemId, this.props.children);\n                        if (itemProps !== null) {\n                            this.toggleItem(itemProps);\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                case keyCodeArrowUp:\n                case keyCodeArrowLeft:\n                    focusItemId = this.setFocus(this.state.focusIndex - 1, -1);\n                    if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n                        const itemData = Listbox.getItemPropsById(focusItemId, this.props.children);\n                        if (itemData !== null) {\n                            this.toggleItem(itemData);\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                case keyCodeEnd:\n                    if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n                        this.selectRange(this.state.focusIndex, this.domChildren().length - 1);\n                    }\n                    this.setFocus(this.domChildren().length - 1, -1);\n                    break;\n                case keyCodeHome:\n                    if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n                        this.selectRange(0, this.state.focusIndex);\n                    }\n                    this.setFocus(0, 1);\n                    break;\n                default:\n                    if (event.key === \"A\") {\n                        this.selectRange(0, this.domChildren().length);\n                    }\n                    else if (!event.ctrlKey && this.props.typeAheadEnabled) {\n                        this.processTypeAhead(event);\n                    }\n            }\n        };\n        /**\n         * Sets focus based on characters typed\n         */\n        this.processTypeAhead = (e) => {\n            clearTimeout(this.typeAheadTimer);\n            this.typeAheadString = this.typeAheadString + e.key.toLowerCase();\n            let matchIndex = -1;\n            const children = React.Children.toArray(this.props.children);\n            children.some((child, index) => {\n                if (child.props[this.props.typeAheadPropertyKey] === undefined) {\n                    return false;\n                }\n                if (startsWith(child.props[this.props.typeAheadPropertyKey].toLowerCase(), this.typeAheadString)) {\n                    matchIndex = index;\n                    return true;\n                }\n            });\n            if (matchIndex !== -1) {\n                this.typeAheadTimer = setTimeout(() => {\n                    this.typeAheadTimerExpired();\n                }, 1000);\n                this.setFocus(matchIndex, 1);\n            }\n            else {\n                this.typeAheadString = \"\";\n            }\n        };\n        /**\n         * clears the type ahead buffer after specified time of no typing\n         */\n        this.typeAheadTimerExpired = () => {\n            this.typeAheadString = \"\";\n            clearTimeout(this.typeAheadTimer);\n        };\n        /**\n         * Function called by child items when they have been invoked\n         */\n        this.listboxItemInvoked = (item, event) => {\n            if (this.props.disabled) {\n                return;\n            }\n            if (typeof this.props.onItemInvoked === \"function\") {\n                this.props.onItemInvoked(item);\n            }\n            const target = event.currentTarget;\n            const itemIndex = this.domChildren().indexOf(target);\n            if (this.props.multiselectable && event.type === \"click\") {\n                if (!event.shiftKey || this.shiftRangeSelectStartIndex === -1) {\n                    this.shiftRangeSelectStartIndex = itemIndex;\n                }\n                if (event.ctrlKey) {\n                    this.toggleItem(item);\n                }\n                else if (event.shiftKey) {\n                    this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n                }\n                else {\n                    this.updateSelection([item]);\n                }\n            }\n            else if (this.props.multiselectable && event.type === \"keydown\") {\n                if (event.shiftKey) {\n                    this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n                }\n                else {\n                    this.toggleItem(item);\n                }\n            }\n            else {\n                this.updateSelection([item]);\n            }\n        };\n        /**\n         * Toggle the selection state of the item\n         */\n        this.toggleItem = (item) => {\n            const culledSelection = this.state.selectedItems.filter((listboxItem) => {\n                return listboxItem.id !== item.id;\n            });\n            if (culledSelection.length < this.state.selectedItems.length) {\n                this.updateSelection(culledSelection);\n            }\n            else {\n                const newSelectedItems = this.state.selectedItems.concat([\n                    item,\n                ]);\n                this.updateSelection(newSelectedItems);\n            }\n        };\n        /**\n         * Select a range of items\n         */\n        this.selectRange = (startIndex, endIndex) => {\n            const children = React.Children.toArray(this.props.children);\n            const childrenInRange = children.slice(startIndex >= endIndex ? endIndex : startIndex, startIndex >= endIndex ? startIndex + 1 : endIndex + 1);\n            const newSelectedItems = childrenInRange.map((child) => {\n                return child.props;\n            });\n            this.updateSelection(newSelectedItems);\n        };\n        /**\n         * Updates selection state (should be the only place this is done outside of initialization)\n         */\n        this.updateSelection = (newSelection) => {\n            const validatedSelection = Listbox.validateSelection(newSelection, this.props.children);\n            if (isEqual(validatedSelection, this.state.selectedItems)) {\n                return;\n            }\n            if (this.props.selectedItems === undefined) {\n                this.setState({\n                    selectedItems: validatedSelection,\n                });\n            }\n            if (this.props.onSelectedItemsChanged) {\n                this.props.onSelectedItemsChanged(validatedSelection);\n            }\n        };\n        this.state = {\n            focusIndex: -1,\n            focussedItemId: \"\",\n            selectedItems: this.getInitialSelection(),\n        };\n    }\n    /**\n     * converts an array of item id's to an array of ListboxItemProps objects populated by data\n     * extracted from the provided children based on id match\n     */\n    static getListboxItemDataFromIds(selectedIds, children) {\n        const selectedItems = Listbox.validateSelection(selectedIds, children);\n        return selectedItems;\n    }\n    /**\n     * Gets the index of an item from it's id by examining children props\n     */\n    static getItemIndexById(itemId, children) {\n        const childrenAsArray = React.Children.toArray(children);\n        return childrenAsArray.findIndex((child) => {\n            if (child.props[Listbox.idPropertyKey] === undefined ||\n                child.props[Listbox.idPropertyKey] !== itemId) {\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\n     * tests whether a React.ReactElement is a valid item to select\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n    static isValidSelectedItem(itemNode) {\n        if (itemNode === undefined ||\n            itemNode.props[Listbox.disabledPropertyKey] === true ||\n            itemNode.props[Listbox.valuePropertyKey] === undefined) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Gets a child node from it's id by examining provided children\n     */\n    static getNodeById(itemId, children) {\n        const childrenAsArray = React.Children.toArray(children);\n        const matchNode = childrenAsArray.find((child) => {\n            if (child.props[Listbox.idPropertyKey] === undefined ||\n                child.props[Listbox.idPropertyKey] !== itemId) {\n                return false;\n            }\n            return true;\n        });\n        return matchNode;\n    }\n    /**\n     * Gets the listItemData of an item from it's id by examining children props\n     */\n    static getItemPropsById(itemId, children) {\n        const matchNode = this.getNodeById(itemId, children);\n        if (matchNode !== undefined) {\n            return matchNode.props;\n        }\n        return null;\n    }\n    /**\n     * validates selected options against child props and returns only the valid ones\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n    static validateSelection(items, children) {\n        const validSelection = items\n            .map((item) => {\n            let itemId = \"\";\n            if (typeof item === \"string\") {\n                itemId = item;\n            }\n            else {\n                itemId = item.id;\n            }\n            const itemNode = this.getNodeById(itemId, children);\n            if (!Listbox.isValidSelectedItem(itemNode)) {\n                return null;\n            }\n            return itemNode.props;\n        })\n            .filter((listboxItem) => {\n            return listboxItem !== null;\n        });\n        return validSelection;\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, role: \"listbox\", \"aria-disabled\": this.props.disabled || null, \"aria-multiselectable\": this.props.multiselectable || null, \"aria-activedescendant\": this.state.focussedItemId, \"aria-labelledby\": this.props.labelledBy || null, className: this.generateClassNames(), onKeyDown: this.handleMenuKeyDown }),\n            React.createElement(ListboxContext.Provider, { value: {\n                    listboxSelectedItems: this.state.selectedItems,\n                    listboxItemFocused: this.listboxItemfocused,\n                    listboxItemInvoked: this.listboxItemInvoked,\n                    listboxMultiselectable: this.props.multiselectable,\n                } }, this.renderChildren())));\n    }\n    componentDidUpdate(prevProps) {\n        // if default selection changes between renders we treat as a effective reset\n        // of selection and focus in uncontrolled mode\n        if (!isEqual(prevProps.defaultSelection, this.props.defaultSelection) &&\n            this.props.selectedItems === undefined) {\n            const updatedSelection = this.getInitialSelection();\n            this.updateSelection(updatedSelection);\n            this.setInitialFocus(updatedSelection);\n        }\n    }\n    componentDidMount() {\n        this.setInitialFocus(this.state.selectedItems);\n    }\n    componentWillUnmount() {\n        clearTimeout(this.typeAheadTimer);\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        const { listbox, listbox__disabled, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(listbox, [listbox__disabled, this.props.disabled]));\n    }\n    /**\n     * Render all child elements\n     */\n    renderChildren() {\n        return React.Children.map(this.props.children, this.renderChild);\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n    domChildren() {\n        return canUseDOM() && this.rootElement.current instanceof HTMLElement\n            ? Array.from(this.rootElement.current.children)\n            : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.  Returns the focussed item id or an empty string\n     * if none found\n     */\n    setFocus(focusIndex, adjustment) {\n        const children = this.domChildren();\n        let focusItemId = \"\";\n        while (inRange(focusIndex, children.length)) {\n            const child = children[focusIndex];\n            focusItemId = child.id;\n            if (this.isFocusableElement(child)) {\n                if (!this.props.disabled) {\n                    child.focus();\n                }\n                break;\n            }\n            focusIndex += adjustment;\n        }\n        return focusItemId;\n    }\n}\nListbox.displayName = `${DisplayNamePrefix}Listbox`;\nListbox.defaultProps = {\n    multiselectable: false,\n    defaultSelection: [],\n    typeAheadPropertyKey: \"displayString\",\n    typeAheadEnabled: true,\n    focusItemOnMount: false,\n    managedClasses: {},\n    selectOnFocus: true,\n};\n/**\n * returns the first selectable item in the provided array of children\n */\nListbox.getFirstValidOptionInRange = (startIndex, endIndex, childrenAsArray, increment) => {\n    for (let i = startIndex; i !== endIndex + increment; i = i + increment) {\n        const thisOption = childrenAsArray[i];\n        if (Listbox.isValidSelectedItem(thisOption)) {\n            return thisOption;\n        }\n        return null;\n    }\n};\n/**\n * returns all the selectable items in the provided array of children\n */\nListbox.getValidOptions = (childrenAsArray) => {\n    return childrenAsArray.filter((itemNode) => {\n        return Listbox.isValidSelectedItem(itemNode);\n    });\n};\nListbox.valuePropertyKey = \"value\";\nListbox.idPropertyKey = \"id\";\nListbox.displayStringPropertyKey = \"displayString\";\nListbox.disabledPropertyKey = \"disabled\";\nexport default Listbox;\nexport { ListboxContext };\n"]},"metadata":{},"sourceType":"module"}