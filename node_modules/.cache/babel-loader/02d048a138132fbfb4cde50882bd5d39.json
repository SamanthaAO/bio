{"ast":null,"code":"import { checkDesignSystemResolver } from \"../../design-system\";\nimport { backgroundColor } from \"../design-system\";\nimport { findSwatchIndex, getSwatch, isDarkMode, minContrastTargetFactory, referenceColorInitialIndexResolver, swatchByContrast } from \"./palette\";\n\nfunction indexToSwatchFamily(accessibleIndex, palette, direction, restDelta, hoverDelta, activeDelta, focusDelta) {\n  // One of the indexes will be rest, the other will be hover. Depends on the offsets and the direction.\n  const accessibleIndex2 = accessibleIndex + direction * Math.abs(restDelta - hoverDelta);\n  const indexOneIsRestState = direction === 1 ? restDelta < hoverDelta : direction * restDelta > direction * hoverDelta;\n  const restIndex = indexOneIsRestState ? accessibleIndex : accessibleIndex2;\n  const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex;\n  const activeIndex = restIndex + direction * activeDelta;\n  const focusIndex = restIndex + direction * focusDelta;\n  return {\n    rest: getSwatch(restIndex, palette),\n    hover: getSwatch(hoverIndex, palette),\n    active: getSwatch(activeIndex, palette),\n    focus: getSwatch(focusIndex, palette)\n  };\n}\n/**\n * Function to derive accessible colors from contrast and delta configuration.\n * Performs a simple contrast check against the colors and returns\n * the color that has the most contrast against the background. If contrast\n * cannot be retrieved correctly, function returns black.\n */\n\n\nexport function accessibleAlgorithm(palette, minContrast, restDelta, hoverDelta, activeDelta, focusDelta) {\n  return designSystem => {\n    const resolvedPalette = checkDesignSystemResolver(palette, designSystem);\n    const direction = isDarkMode(designSystem) ? -1 : 1;\n    const accessibleSwatch = swatchByContrast(backgroundColor // Compare swatches against the background\n    )(resolvedPalette // Use the provided palette\n    )(referenceColorInitialIndexResolver // Begin searching from the background color\n    )(() => direction // Search direction based on light/dark mode\n    )(minContrastTargetFactory(checkDesignSystemResolver(minContrast, designSystem)) // A swatch is only valid if the contrast is greater than indicated\n    )(designSystem // Pass the design system\n    );\n    const accessibleIndex = findSwatchIndex(palette, accessibleSwatch)(designSystem);\n    const resolvedRest = checkDesignSystemResolver(restDelta, designSystem);\n    const resolvedHover = checkDesignSystemResolver(hoverDelta, designSystem);\n    const resolvedActive = checkDesignSystemResolver(activeDelta, designSystem);\n    const resolvedFocus = checkDesignSystemResolver(focusDelta, designSystem);\n    return indexToSwatchFamily(accessibleIndex, resolvedPalette, direction, resolvedRest, resolvedHover, resolvedActive, resolvedFocus);\n  };\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/color/accessible-recipe.js"],"names":["checkDesignSystemResolver","backgroundColor","findSwatchIndex","getSwatch","isDarkMode","minContrastTargetFactory","referenceColorInitialIndexResolver","swatchByContrast","indexToSwatchFamily","accessibleIndex","palette","direction","restDelta","hoverDelta","activeDelta","focusDelta","accessibleIndex2","Math","abs","indexOneIsRestState","restIndex","hoverIndex","activeIndex","focusIndex","rest","hover","active","focus","accessibleAlgorithm","minContrast","designSystem","resolvedPalette","accessibleSwatch","resolvedRest","resolvedHover","resolvedActive","resolvedFocus"],"mappings":"AAAA,SAASA,yBAAT,QAA2C,qBAA3C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,wBAAjD,EAA2EC,kCAA3E,EAA+GC,gBAA/G,QAAwI,WAAxI;;AACA,SAASC,mBAAT,CAA6BC,eAA7B,EAA8CC,OAA9C,EAAuDC,SAAvD,EAAkEC,SAAlE,EAA6EC,UAA7E,EAAyFC,WAAzF,EAAsGC,UAAtG,EAAkH;AAC9G;AACA,QAAMC,gBAAgB,GAAGP,eAAe,GAAGE,SAAS,GAAGM,IAAI,CAACC,GAAL,CAASN,SAAS,GAAGC,UAArB,CAAvD;AACA,QAAMM,mBAAmB,GAAGR,SAAS,KAAK,CAAd,GACtBC,SAAS,GAAGC,UADU,GAEtBF,SAAS,GAAGC,SAAZ,GAAwBD,SAAS,GAAGE,UAF1C;AAGA,QAAMO,SAAS,GAAGD,mBAAmB,GAAGV,eAAH,GAAqBO,gBAA1D;AACA,QAAMK,UAAU,GAAGF,mBAAmB,GAAGH,gBAAH,GAAsBP,eAA5D;AACA,QAAMa,WAAW,GAAGF,SAAS,GAAGT,SAAS,GAAGG,WAA5C;AACA,QAAMS,UAAU,GAAGH,SAAS,GAAGT,SAAS,GAAGI,UAA3C;AACA,SAAO;AACHS,IAAAA,IAAI,EAAErB,SAAS,CAACiB,SAAD,EAAYV,OAAZ,CADZ;AAEHe,IAAAA,KAAK,EAAEtB,SAAS,CAACkB,UAAD,EAAaX,OAAb,CAFb;AAGHgB,IAAAA,MAAM,EAAEvB,SAAS,CAACmB,WAAD,EAAcZ,OAAd,CAHd;AAIHiB,IAAAA,KAAK,EAAExB,SAAS,CAACoB,UAAD,EAAab,OAAb;AAJb,GAAP;AAMH;AACD;;;;;;;;AAMA,OAAO,SAASkB,mBAAT,CAA6BlB,OAA7B,EAAsCmB,WAAtC,EAAmDjB,SAAnD,EAA8DC,UAA9D,EAA0EC,WAA1E,EAAuFC,UAAvF,EAAmG;AACtG,SAAQe,YAAD,IAAkB;AACrB,UAAMC,eAAe,GAAG/B,yBAAyB,CAACU,OAAD,EAAUoB,YAAV,CAAjD;AACA,UAAMnB,SAAS,GAAGP,UAAU,CAAC0B,YAAD,CAAV,GAA2B,CAAC,CAA5B,GAAgC,CAAlD;AACA,UAAME,gBAAgB,GAAGzB,gBAAgB,CAACN,eAAD,CAAiB;AAAjB,KAAhB,CACvB8B,eADuB,CACP;AADO,MAEvBzB,kCAFuB,CAEY;AAFZ,MAGvB,MAAMK,SAHiB,CAGP;AAHO,MAIvBN,wBAAwB,CAACL,yBAAyB,CAAC6B,WAAD,EAAcC,YAAd,CAA1B,CAJD,CAIwD;AAJxD,MAKvBA,YALuB,CAKV;AALU,KAAzB;AAOA,UAAMrB,eAAe,GAAGP,eAAe,CAACQ,OAAD,EAAUsB,gBAAV,CAAf,CAA2CF,YAA3C,CAAxB;AACA,UAAMG,YAAY,GAAGjC,yBAAyB,CAACY,SAAD,EAAYkB,YAAZ,CAA9C;AACA,UAAMI,aAAa,GAAGlC,yBAAyB,CAACa,UAAD,EAAaiB,YAAb,CAA/C;AACA,UAAMK,cAAc,GAAGnC,yBAAyB,CAACc,WAAD,EAAcgB,YAAd,CAAhD;AACA,UAAMM,aAAa,GAAGpC,yBAAyB,CAACe,UAAD,EAAae,YAAb,CAA/C;AACA,WAAOtB,mBAAmB,CAACC,eAAD,EAAkBsB,eAAlB,EAAmCpB,SAAnC,EAA8CsB,YAA9C,EAA4DC,aAA5D,EAA2EC,cAA3E,EAA2FC,aAA3F,CAA1B;AACH,GAhBD;AAiBH","sourcesContent":["import { checkDesignSystemResolver, } from \"../../design-system\";\nimport { backgroundColor } from \"../design-system\";\nimport { findSwatchIndex, getSwatch, isDarkMode, minContrastTargetFactory, referenceColorInitialIndexResolver, swatchByContrast, } from \"./palette\";\nfunction indexToSwatchFamily(accessibleIndex, palette, direction, restDelta, hoverDelta, activeDelta, focusDelta) {\n    // One of the indexes will be rest, the other will be hover. Depends on the offsets and the direction.\n    const accessibleIndex2 = accessibleIndex + direction * Math.abs(restDelta - hoverDelta);\n    const indexOneIsRestState = direction === 1\n        ? restDelta < hoverDelta\n        : direction * restDelta > direction * hoverDelta;\n    const restIndex = indexOneIsRestState ? accessibleIndex : accessibleIndex2;\n    const hoverIndex = indexOneIsRestState ? accessibleIndex2 : accessibleIndex;\n    const activeIndex = restIndex + direction * activeDelta;\n    const focusIndex = restIndex + direction * focusDelta;\n    return {\n        rest: getSwatch(restIndex, palette),\n        hover: getSwatch(hoverIndex, palette),\n        active: getSwatch(activeIndex, palette),\n        focus: getSwatch(focusIndex, palette),\n    };\n}\n/**\n * Function to derive accessible colors from contrast and delta configuration.\n * Performs a simple contrast check against the colors and returns\n * the color that has the most contrast against the background. If contrast\n * cannot be retrieved correctly, function returns black.\n */\nexport function accessibleAlgorithm(palette, minContrast, restDelta, hoverDelta, activeDelta, focusDelta) {\n    return (designSystem) => {\n        const resolvedPalette = checkDesignSystemResolver(palette, designSystem);\n        const direction = isDarkMode(designSystem) ? -1 : 1;\n        const accessibleSwatch = swatchByContrast(backgroundColor // Compare swatches against the background\n        )(resolvedPalette // Use the provided palette\n        )(referenceColorInitialIndexResolver // Begin searching from the background color\n        )(() => direction // Search direction based on light/dark mode\n        )(minContrastTargetFactory(checkDesignSystemResolver(minContrast, designSystem)) // A swatch is only valid if the contrast is greater than indicated\n        )(designSystem // Pass the design system\n        );\n        const accessibleIndex = findSwatchIndex(palette, accessibleSwatch)(designSystem);\n        const resolvedRest = checkDesignSystemResolver(restDelta, designSystem);\n        const resolvedHover = checkDesignSystemResolver(hoverDelta, designSystem);\n        const resolvedActive = checkDesignSystemResolver(activeDelta, designSystem);\n        const resolvedFocus = checkDesignSystemResolver(focusDelta, designSystem);\n        return indexToSwatchFamily(accessibleIndex, resolvedPalette, direction, resolvedRest, resolvedHover, resolvedActive, resolvedFocus);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}