{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, invert } from \"lodash-es\";\nimport React from \"react\";\nimport { ContextMenuItemRole } from \"../context-menu-item\";\nimport { DisplayNamePrefix } from \"../utilities\";\n\nclass ContextMenu extends Foundation {\n  constructor(props) {\n    super(props);\n    this.handledProps = {\n      children: void 0,\n      managedClasses: void 0,\n      enableAutoFocus: void 0\n    };\n    this.rootElement = React.createRef();\n    /**\n     * Render a single child\n     */\n\n    this.renderChild = (child, index) => {\n      return React.cloneElement(child, {\n        tabIndex: index === this.state.focusIndex ? 0 : -1,\n        onFocus: this.handleMenuItemFocus\n      });\n    };\n    /**\n     * Determines if a given element should be focusable by the menu\n     */\n\n\n    this.isFocusableElement = element => {\n      return this.isMenuItemElement(element) && !this.isDisabledElement(element);\n    };\n\n    this.isDisabledElement = element => {\n      return this.isMenuItemElement(element) && element.getAttribute(\"aria-disabled\") === \"true\";\n    };\n    /**\n     * Ensure we always validate our internal state on item focus events, otherwise\n     * the component can get out of sync from click events\n     */\n\n\n    this.handleMenuItemFocus = e => {\n      const target = e.currentTarget;\n      const focusIndex = this.domChildren().indexOf(target);\n\n      if (this.isDisabledElement(target)) {\n        target.blur();\n        return;\n      }\n\n      if (focusIndex !== this.state.focusIndex && focusIndex !== -1) {\n        this.setFocus(focusIndex, focusIndex > this.state.focusIndex ? 1 : -1);\n      }\n    };\n    /**\n     * Handle the keydown event of the root menu\n     */\n\n\n    this.handleMenuKeyDown = e => {\n      switch (e.keyCode) {\n        case keyCodeArrowDown:\n        case keyCodeArrowRight:\n          e.preventDefault();\n          this.setFocus(this.state.focusIndex + 1, 1);\n          break;\n\n        case keyCodeArrowUp:\n        case keyCodeArrowLeft:\n          e.preventDefault();\n          this.setFocus(this.state.focusIndex - 1, -1);\n          break;\n\n        case keyCodeEnd:\n          e.preventDefault();\n          this.setFocus(this.domChildren().length - 1, -1);\n          break;\n\n        case keyCodeHome:\n          e.preventDefault();\n          this.setFocus(0, 1);\n          break;\n      }\n\n      if (typeof this.props.onKeyDown === \"function\") {\n        this.props.onKeyDown(e);\n      }\n    };\n\n    this.handleContextMenu = e => {\n      e.preventDefault(); // prevent browser context-menu becuase this *is* a context menu\n\n      if (typeof this.props.onContextMenu === \"function\") {\n        this.props.onContextMenu(e);\n      }\n    };\n\n    this.state = {\n      focusIndex: -1\n    };\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      ref: this.rootElement,\n      role: \"menu\",\n      className: this.generateClassNames(),\n      onKeyDown: this.handleMenuKeyDown,\n      onContextMenu: this.handleContextMenu\n    }), this.renderChildren());\n  }\n\n  componentDidMount() {\n    const children = this.domChildren();\n    const focusIndex = children.findIndex(this.isFocusableElement);\n\n    if (focusIndex !== -1) {\n      this.setState({\n        focusIndex\n      });\n    }\n\n    if (this.props.enableAutoFocus) {\n      this.focus();\n    }\n  }\n  /**\n   * Brings focus to the appropriate menu-item\n   */\n\n\n  focus() {\n    this.setFocus(this.state.focusIndex === -1 ? 0 : this.state.focusIndex, 1);\n  }\n  /**\n   * Create class names\n   */\n\n\n  generateClassNames() {\n    return super.generateClassNames(classNames(this.props.managedClasses.contextMenu));\n  }\n  /**\n   * Render all child elements\n   */\n\n\n  renderChildren() {\n    return React.Children.map(this.props.children, this.renderChild);\n  }\n\n  isMenuItemElement(element) {\n    return element instanceof HTMLElement && ContextMenu.focusableElementRoles.hasOwnProperty(element.getAttribute(\"role\"));\n  }\n  /**\n   * Return an array of all focusabled elements that are children\n   * of the context menu\n   */\n\n\n  domChildren() {\n    return canUseDOM() && this.rootElement.current instanceof HTMLElement ? Array.from(this.rootElement.current.children) : [];\n  }\n  /**\n   * Sets focus to the nearest focusable element to the supplied focusIndex.\n   * The adjustment controls how the function searches for other focusable elements\n   * if the element at the focusIndex is not focusable. A positive number will search\n   * towards the end of the children array, whereas a negative number will search towards\n   * the beginning of the children array.\n   */\n\n\n  setFocus(focusIndex, adjustment) {\n    const children = this.domChildren();\n\n    while (inRange(focusIndex, children.length)) {\n      const child = children[focusIndex];\n\n      if (this.isFocusableElement(child)) {\n        child.focus();\n        this.setState({\n          focusIndex\n        });\n        break;\n      }\n\n      focusIndex += adjustment;\n    }\n  }\n\n}\n\nContextMenu.displayName = `${DisplayNamePrefix}ContextMenu`;\nContextMenu.defaultProps = {\n  managedClasses: {}\n};\nContextMenu.focusableElementRoles = invert(ContextMenuItemRole);\nexport default ContextMenu;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/context-menu/context-menu.js"],"names":["Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnd","keyCodeHome","canUseDOM","inRange","invert","React","ContextMenuItemRole","DisplayNamePrefix","ContextMenu","constructor","props","handledProps","children","managedClasses","enableAutoFocus","rootElement","createRef","renderChild","child","index","cloneElement","tabIndex","state","focusIndex","onFocus","handleMenuItemFocus","isFocusableElement","element","isMenuItemElement","isDisabledElement","getAttribute","e","target","currentTarget","domChildren","indexOf","blur","setFocus","handleMenuKeyDown","keyCode","preventDefault","length","onKeyDown","handleContextMenu","onContextMenu","render","createElement","Object","assign","unhandledProps","ref","role","className","generateClassNames","renderChildren","componentDidMount","findIndex","setState","focus","contextMenu","Children","map","HTMLElement","focusableElementRoles","hasOwnProperty","current","Array","from","adjustment","displayName","defaultProps"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,6CAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,gBAAvC,EAAyDC,iBAAzD,EAA4EC,cAA5E,EAA4FC,UAA5F,EAAwGC,WAAxG,QAA4H,+BAA5H;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,WAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AACA,MAAMC,WAAN,SAA0Bd,UAA1B,CAAqC;AACjCe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,QAAQ,EAAE,KAAK,CADC;AAEhBC,MAAAA,cAAc,EAAE,KAAK,CAFL;AAGhBC,MAAAA,eAAe,EAAE,KAAK;AAHN,KAApB;AAKA,SAAKC,WAAL,GAAmBV,KAAK,CAACW,SAAN,EAAnB;AACA;;;;AAGA,SAAKC,WAAL,GAAmB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,aAAOd,KAAK,CAACe,YAAN,CAAmBF,KAAnB,EAA0B;AAC7BG,QAAAA,QAAQ,EAAEF,KAAK,KAAK,KAAKG,KAAL,CAAWC,UAArB,GAAkC,CAAlC,GAAsC,CAAC,CADpB;AAE7BC,QAAAA,OAAO,EAAE,KAAKC;AAFe,OAA1B,CAAP;AAIH,KALD;AAMA;;;;;AAGA,SAAKC,kBAAL,GAA2BC,OAAD,IAAa;AACnC,aAAO,KAAKC,iBAAL,CAAuBD,OAAvB,KAAmC,CAAC,KAAKE,iBAAL,CAAuBF,OAAvB,CAA3C;AACH,KAFD;;AAGA,SAAKE,iBAAL,GAA0BF,OAAD,IAAa;AAClC,aAAQ,KAAKC,iBAAL,CAAuBD,OAAvB,KACJA,OAAO,CAACG,YAAR,CAAqB,eAArB,MAA0C,MAD9C;AAEH,KAHD;AAIA;;;;;;AAIA,SAAKL,mBAAL,GAA4BM,CAAD,IAAO;AAC9B,YAAMC,MAAM,GAAGD,CAAC,CAACE,aAAjB;AACA,YAAMV,UAAU,GAAG,KAAKW,WAAL,GAAmBC,OAAnB,CAA2BH,MAA3B,CAAnB;;AACA,UAAI,KAAKH,iBAAL,CAAuBG,MAAvB,CAAJ,EAAoC;AAChCA,QAAAA,MAAM,CAACI,IAAP;AACA;AACH;;AACD,UAAIb,UAAU,KAAK,KAAKD,KAAL,CAAWC,UAA1B,IAAwCA,UAAU,KAAK,CAAC,CAA5D,EAA+D;AAC3D,aAAKc,QAAL,CAAcd,UAAd,EAA0BA,UAAU,GAAG,KAAKD,KAAL,CAAWC,UAAxB,GAAqC,CAArC,GAAyC,CAAC,CAApE;AACH;AACJ,KAVD;AAWA;;;;;AAGA,SAAKe,iBAAL,GAA0BP,CAAD,IAAO;AAC5B,cAAQA,CAAC,CAACQ,OAAV;AACI,aAAK3C,gBAAL;AACA,aAAKE,iBAAL;AACIiC,UAAAA,CAAC,CAACS,cAAF;AACA,eAAKH,QAAL,CAAc,KAAKf,KAAL,CAAWC,UAAX,GAAwB,CAAtC,EAAyC,CAAzC;AACA;;AACJ,aAAKxB,cAAL;AACA,aAAKF,gBAAL;AACIkC,UAAAA,CAAC,CAACS,cAAF;AACA,eAAKH,QAAL,CAAc,KAAKf,KAAL,CAAWC,UAAX,GAAwB,CAAtC,EAAyC,CAAC,CAA1C;AACA;;AACJ,aAAKvB,UAAL;AACI+B,UAAAA,CAAC,CAACS,cAAF;AACA,eAAKH,QAAL,CAAc,KAAKH,WAAL,GAAmBO,MAAnB,GAA4B,CAA1C,EAA6C,CAAC,CAA9C;AACA;;AACJ,aAAKxC,WAAL;AACI8B,UAAAA,CAAC,CAACS,cAAF;AACA,eAAKH,QAAL,CAAc,CAAd,EAAiB,CAAjB;AACA;AAlBR;;AAoBA,UAAI,OAAO,KAAK3B,KAAL,CAAWgC,SAAlB,KAAgC,UAApC,EAAgD;AAC5C,aAAKhC,KAAL,CAAWgC,SAAX,CAAqBX,CAArB;AACH;AACJ,KAxBD;;AAyBA,SAAKY,iBAAL,GAA0BZ,CAAD,IAAO;AAC5BA,MAAAA,CAAC,CAACS,cAAF,GAD4B,CACR;;AACpB,UAAI,OAAO,KAAK9B,KAAL,CAAWkC,aAAlB,KAAoC,UAAxC,EAAoD;AAChD,aAAKlC,KAAL,CAAWkC,aAAX,CAAyBb,CAAzB;AACH;AACJ,KALD;;AAMA,SAAKT,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,CAAC;AADJ,KAAb;AAGH;AACD;;;;;AAGAsB,EAAAA,MAAM,GAAG;AACL,WAAQxC,KAAK,CAACyC,aAAN,CAAoB,KAApB,EAA2BC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,cAAL,EAAlB,EAAyC;AAAEC,MAAAA,GAAG,EAAE,KAAKnC,WAAZ;AAAyBoC,MAAAA,IAAI,EAAE,MAA/B;AAAuCC,MAAAA,SAAS,EAAE,KAAKC,kBAAL,EAAlD;AAA6EX,MAAAA,SAAS,EAAE,KAAKJ,iBAA7F;AAAgHM,MAAAA,aAAa,EAAE,KAAKD;AAApI,KAAzC,CAA3B,EAA8N,KAAKW,cAAL,EAA9N,CAAR;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,UAAM3C,QAAQ,GAAG,KAAKsB,WAAL,EAAjB;AACA,UAAMX,UAAU,GAAGX,QAAQ,CAAC4C,SAAT,CAAmB,KAAK9B,kBAAxB,CAAnB;;AACA,QAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;AACnB,WAAKkC,QAAL,CAAc;AACVlC,QAAAA;AADU,OAAd;AAGH;;AACD,QAAI,KAAKb,KAAL,CAAWI,eAAf,EAAgC;AAC5B,WAAK4C,KAAL;AACH;AACJ;AACD;;;;;AAGAA,EAAAA,KAAK,GAAG;AACJ,SAAKrB,QAAL,CAAc,KAAKf,KAAL,CAAWC,UAAX,KAA0B,CAAC,CAA3B,GAA+B,CAA/B,GAAmC,KAAKD,KAAL,CAAWC,UAA5D,EAAwE,CAAxE;AACH;AACD;;;;;AAGA8B,EAAAA,kBAAkB,GAAG;AACjB,WAAO,MAAMA,kBAAN,CAAyB1D,UAAU,CAAC,KAAKe,KAAL,CAAWG,cAAX,CAA0B8C,WAA3B,CAAnC,CAAP;AACH;AACD;;;;;AAGAL,EAAAA,cAAc,GAAG;AACb,WAAOjD,KAAK,CAACuD,QAAN,CAAeC,GAAf,CAAmB,KAAKnD,KAAL,CAAWE,QAA9B,EAAwC,KAAKK,WAA7C,CAAP;AACH;;AACDW,EAAAA,iBAAiB,CAACD,OAAD,EAAU;AACvB,WAAQA,OAAO,YAAYmC,WAAnB,IACJtD,WAAW,CAACuD,qBAAZ,CAAkCC,cAAlC,CAAiDrC,OAAO,CAACG,YAAR,CAAqB,MAArB,CAAjD,CADJ;AAEH;AACD;;;;;;AAIAI,EAAAA,WAAW,GAAG;AACV,WAAOhC,SAAS,MAAM,KAAKa,WAAL,CAAiBkD,OAAjB,YAAoCH,WAAnD,GACDI,KAAK,CAACC,IAAN,CAAW,KAAKpD,WAAL,CAAiBkD,OAAjB,CAAyBrD,QAApC,CADC,GAED,EAFN;AAGH;AACD;;;;;;;;;AAOAyB,EAAAA,QAAQ,CAACd,UAAD,EAAa6C,UAAb,EAAyB;AAC7B,UAAMxD,QAAQ,GAAG,KAAKsB,WAAL,EAAjB;;AACA,WAAO/B,OAAO,CAACoB,UAAD,EAAaX,QAAQ,CAAC6B,MAAtB,CAAd,EAA6C;AACzC,YAAMvB,KAAK,GAAGN,QAAQ,CAACW,UAAD,CAAtB;;AACA,UAAI,KAAKG,kBAAL,CAAwBR,KAAxB,CAAJ,EAAoC;AAChCA,QAAAA,KAAK,CAACwC,KAAN;AACA,aAAKD,QAAL,CAAc;AACVlC,UAAAA;AADU,SAAd;AAGA;AACH;;AACDA,MAAAA,UAAU,IAAI6C,UAAd;AACH;AACJ;;AAtJgC;;AAwJrC5D,WAAW,CAAC6D,WAAZ,GAA2B,GAAE9D,iBAAkB,aAA/C;AACAC,WAAW,CAAC8D,YAAZ,GAA2B;AACvBzD,EAAAA,cAAc,EAAE;AADO,CAA3B;AAGAL,WAAW,CAACuD,qBAAZ,GAAoC3D,MAAM,CAACE,mBAAD,CAA1C;AACA,eAAeE,WAAf","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome, } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, invert } from \"lodash-es\";\nimport React from \"react\";\nimport { ContextMenuItemRole } from \"../context-menu-item\";\nimport { DisplayNamePrefix } from \"../utilities\";\nclass ContextMenu extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            children: void 0,\n            managedClasses: void 0,\n            enableAutoFocus: void 0,\n        };\n        this.rootElement = React.createRef();\n        /**\n         * Render a single child\n         */\n        this.renderChild = (child, index) => {\n            return React.cloneElement(child, {\n                tabIndex: index === this.state.focusIndex ? 0 : -1,\n                onFocus: this.handleMenuItemFocus,\n            });\n        };\n        /**\n         * Determines if a given element should be focusable by the menu\n         */\n        this.isFocusableElement = (element) => {\n            return this.isMenuItemElement(element) && !this.isDisabledElement(element);\n        };\n        this.isDisabledElement = (element) => {\n            return (this.isMenuItemElement(element) &&\n                element.getAttribute(\"aria-disabled\") === \"true\");\n        };\n        /**\n         * Ensure we always validate our internal state on item focus events, otherwise\n         * the component can get out of sync from click events\n         */\n        this.handleMenuItemFocus = (e) => {\n            const target = e.currentTarget;\n            const focusIndex = this.domChildren().indexOf(target);\n            if (this.isDisabledElement(target)) {\n                target.blur();\n                return;\n            }\n            if (focusIndex !== this.state.focusIndex && focusIndex !== -1) {\n                this.setFocus(focusIndex, focusIndex > this.state.focusIndex ? 1 : -1);\n            }\n        };\n        /**\n         * Handle the keydown event of the root menu\n         */\n        this.handleMenuKeyDown = (e) => {\n            switch (e.keyCode) {\n                case keyCodeArrowDown:\n                case keyCodeArrowRight:\n                    e.preventDefault();\n                    this.setFocus(this.state.focusIndex + 1, 1);\n                    break;\n                case keyCodeArrowUp:\n                case keyCodeArrowLeft:\n                    e.preventDefault();\n                    this.setFocus(this.state.focusIndex - 1, -1);\n                    break;\n                case keyCodeEnd:\n                    e.preventDefault();\n                    this.setFocus(this.domChildren().length - 1, -1);\n                    break;\n                case keyCodeHome:\n                    e.preventDefault();\n                    this.setFocus(0, 1);\n                    break;\n            }\n            if (typeof this.props.onKeyDown === \"function\") {\n                this.props.onKeyDown(e);\n            }\n        };\n        this.handleContextMenu = (e) => {\n            e.preventDefault(); // prevent browser context-menu becuase this *is* a context menu\n            if (typeof this.props.onContextMenu === \"function\") {\n                this.props.onContextMenu(e);\n            }\n        };\n        this.state = {\n            focusIndex: -1,\n        };\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, role: \"menu\", className: this.generateClassNames(), onKeyDown: this.handleMenuKeyDown, onContextMenu: this.handleContextMenu }), this.renderChildren()));\n    }\n    componentDidMount() {\n        const children = this.domChildren();\n        const focusIndex = children.findIndex(this.isFocusableElement);\n        if (focusIndex !== -1) {\n            this.setState({\n                focusIndex,\n            });\n        }\n        if (this.props.enableAutoFocus) {\n            this.focus();\n        }\n    }\n    /**\n     * Brings focus to the appropriate menu-item\n     */\n    focus() {\n        this.setFocus(this.state.focusIndex === -1 ? 0 : this.state.focusIndex, 1);\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.contextMenu));\n    }\n    /**\n     * Render all child elements\n     */\n    renderChildren() {\n        return React.Children.map(this.props.children, this.renderChild);\n    }\n    isMenuItemElement(element) {\n        return (element instanceof HTMLElement &&\n            ContextMenu.focusableElementRoles.hasOwnProperty(element.getAttribute(\"role\")));\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n    domChildren() {\n        return canUseDOM() && this.rootElement.current instanceof HTMLElement\n            ? Array.from(this.rootElement.current.children)\n            : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.\n     */\n    setFocus(focusIndex, adjustment) {\n        const children = this.domChildren();\n        while (inRange(focusIndex, children.length)) {\n            const child = children[focusIndex];\n            if (this.isFocusableElement(child)) {\n                child.focus();\n                this.setState({\n                    focusIndex,\n                });\n                break;\n            }\n            focusIndex += adjustment;\n        }\n    }\n}\nContextMenu.displayName = `${DisplayNamePrefix}ContextMenu`;\nContextMenu.defaultProps = {\n    managedClasses: {},\n};\nContextMenu.focusableElementRoles = invert(ContextMenuItemRole);\nexport default ContextMenu;\n"]},"metadata":{},"sourceType":"module"}