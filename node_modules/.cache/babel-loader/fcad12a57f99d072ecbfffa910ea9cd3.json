{"ast":null,"code":"import { findClosestSwatchIndex, getSwatch, swatchByMode } from \"./palette\";\nimport { colorRecipeFactory, designSystemResolverMax } from \"./common\";\nimport { baseLayerLuminance, neutralFillActiveDelta, neutralFillCardDelta, neutralFillHoverDelta, neutralFillRestDelta, neutralPalette } from \"../design-system\";\nimport { add, multiply, subtract } from \"@microsoft/fast-jss-utilities\";\nimport { clamp, ColorRGBA64 } from \"@microsoft/fast-colors\";\n/**\n * @deprecated Use the recipes because they can be more dynamic for different ramps\n */\n\nexport var NeutralPaletteLightModeLayers;\n\n(function (NeutralPaletteLightModeLayers) {\n  NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L1\"] = 0] = \"L1\";\n  NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L1Alt\"] = 3] = \"L1Alt\";\n  NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L2\"] = 10] = \"L2\";\n  NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L3\"] = 13] = \"L3\";\n  NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L4\"] = 16] = \"L4\";\n})(NeutralPaletteLightModeLayers || (NeutralPaletteLightModeLayers = {}));\n/**\n * @deprecated Use the recipes because they can be more dynamic for different ramps\n */\n\n\nexport var NeutralPaletteDarkModeLayers;\n\n(function (NeutralPaletteDarkModeLayers) {\n  NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L1\"] = 76] = \"L1\";\n  NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L1Alt\"] = 76] = \"L1Alt\";\n  NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L2\"] = 79] = \"L2\";\n  NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L3\"] = 82] = \"L3\";\n  NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L4\"] = 85] = \"L4\";\n})(NeutralPaletteDarkModeLayers || (NeutralPaletteDarkModeLayers = {}));\n/**\n * Recommended values for light and dark mode for `baseLayerLuminance` in the design system.\n */\n\n\nexport var StandardLuminance;\n\n(function (StandardLuminance) {\n  StandardLuminance[StandardLuminance[\"LightMode\"] = 1] = \"LightMode\";\n  StandardLuminance[StandardLuminance[\"DarkMode\"] = 0.23] = \"DarkMode\";\n})(StandardLuminance || (StandardLuminance = {}));\n\nfunction luminanceOrBackgroundColor(luminanceRecipe, backgroundRecipe) {\n  return designSystem => {\n    return baseLayerLuminance(designSystem) === -1 ? backgroundRecipe(designSystem) : luminanceRecipe(designSystem);\n  };\n}\n/**\n * Find the palette color that's closest to the desired base layer luminance.\n */\n\n\nconst baseLayerLuminanceSwatch = designSystem => {\n  const luminance = baseLayerLuminance(designSystem);\n  return new ColorRGBA64(luminance, luminance, luminance, 1).toStringHexRGB();\n};\n/**\n * Get the index of the base layer palette color.\n */\n\n\nconst baseLayerLuminanceIndex = findClosestSwatchIndex(neutralPalette, baseLayerLuminanceSwatch);\n/**\n * Get the actual value of the card layer index, clamped so we can use it to base other layers from.\n */\n\nconst neutralLayerCardIndex = designSystem => clamp(subtract(baseLayerLuminanceIndex, neutralFillCardDelta)(designSystem), 0, neutralPalette(designSystem).length - 1);\n/**\n * Light mode L2 is significant because it happens at the same point as the neutral fill flip. Use this as the minimum index for L2.\n */\n\n\nconst lightNeutralLayerL2 = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta);\n/**\n * The index for L2 based on luminance, adjusted for the flip in light mode if necessary.\n */\n\nconst neutralLayerL2Index = designSystemResolverMax(add(baseLayerLuminanceIndex, neutralFillCardDelta), lightNeutralLayerL2);\n/**\n * Dark mode L4 is the darkest recommended background in the standard guidance, which is\n * calculated based on luminance to work with variable sized ramps.\n */\n\nconst darkNeutralLayerL4 = designSystem => {\n  const darkLum = 0.14;\n  const darkColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1);\n  const darkRefIndex = findClosestSwatchIndex(neutralPalette, darkColor.toStringHexRGB())(designSystem);\n  return darkRefIndex;\n};\n/**\n * Used as the background color for floating layers like context menus and flyouts.\n */\n\n\nexport const neutralLayerFloating = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(subtract(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 5)))));\n/**\n * Used as the background color for cards. Pair with `neutralLayerCardContainer` for the container background.\n */\n\nexport const neutralLayerCard = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerCardIndex, neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 4)))));\n/**\n * Used as the background color for card containers. Pair with `neutralLayerCard` for the card backgrounds.\n */\n\nexport const neutralLayerCardContainer = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(neutralFillCardDelta, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 3)))));\n/**\n * Used as the background color for the primary content layer (L1).\n */\n\nexport const neutralLayerL1 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(baseLayerLuminanceIndex, neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 3)))));\n/**\n * Alternate darker color for L1 surfaces. Currently the same as card container, but use\n * the most applicable semantic named recipe.\n */\n\nexport const neutralLayerL1Alt = neutralLayerCardContainer;\n/**\n * Used as the background for the top command surface, logically below L1.\n */\n\nexport const neutralLayerL2 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerL2Index, neutralPalette), swatchByMode(neutralPalette)(lightNeutralLayerL2, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 2)))));\n/**\n * Used as the background for secondary command surfaces, logically below L2.\n */\n\nexport const neutralLayerL3 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerL2Index, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(add(lightNeutralLayerL2, neutralFillCardDelta), subtract(darkNeutralLayerL4, neutralFillCardDelta))));\n/**\n * Used as the background for the lowest command surface or title bar, logically below L3.\n */\n\nexport const neutralLayerL4 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerL2Index, multiply(neutralFillCardDelta, 2)), neutralPalette), swatchByMode(neutralPalette)(add(lightNeutralLayerL2, multiply(neutralFillCardDelta, 2)), darkNeutralLayerL4)));","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/color/neutral-layer.js"],"names":["findClosestSwatchIndex","getSwatch","swatchByMode","colorRecipeFactory","designSystemResolverMax","baseLayerLuminance","neutralFillActiveDelta","neutralFillCardDelta","neutralFillHoverDelta","neutralFillRestDelta","neutralPalette","add","multiply","subtract","clamp","ColorRGBA64","NeutralPaletteLightModeLayers","NeutralPaletteDarkModeLayers","StandardLuminance","luminanceOrBackgroundColor","luminanceRecipe","backgroundRecipe","designSystem","baseLayerLuminanceSwatch","luminance","toStringHexRGB","baseLayerLuminanceIndex","neutralLayerCardIndex","length","lightNeutralLayerL2","neutralLayerL2Index","darkNeutralLayerL4","darkLum","darkColor","darkRefIndex","neutralLayerFloating","neutralLayerCard","neutralLayerCardContainer","neutralLayerL1","neutralLayerL1Alt","neutralLayerL2","neutralLayerL3","neutralLayerL4"],"mappings":"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","sourcesContent":["import { findClosestSwatchIndex, getSwatch, swatchByMode } from \"./palette\";\nimport { colorRecipeFactory, designSystemResolverMax, } from \"./common\";\nimport { baseLayerLuminance, neutralFillActiveDelta, neutralFillCardDelta, neutralFillHoverDelta, neutralFillRestDelta, neutralPalette, } from \"../design-system\";\nimport { add, multiply, subtract } from \"@microsoft/fast-jss-utilities\";\nimport { clamp, ColorRGBA64 } from \"@microsoft/fast-colors\";\n/**\n * @deprecated Use the recipes because they can be more dynamic for different ramps\n */\nexport var NeutralPaletteLightModeLayers;\n(function (NeutralPaletteLightModeLayers) {\n    NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L1\"] = 0] = \"L1\";\n    NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L1Alt\"] = 3] = \"L1Alt\";\n    NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L2\"] = 10] = \"L2\";\n    NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L3\"] = 13] = \"L3\";\n    NeutralPaletteLightModeLayers[NeutralPaletteLightModeLayers[\"L4\"] = 16] = \"L4\";\n})(NeutralPaletteLightModeLayers || (NeutralPaletteLightModeLayers = {}));\n/**\n * @deprecated Use the recipes because they can be more dynamic for different ramps\n */\nexport var NeutralPaletteDarkModeLayers;\n(function (NeutralPaletteDarkModeLayers) {\n    NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L1\"] = 76] = \"L1\";\n    NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L1Alt\"] = 76] = \"L1Alt\";\n    NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L2\"] = 79] = \"L2\";\n    NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L3\"] = 82] = \"L3\";\n    NeutralPaletteDarkModeLayers[NeutralPaletteDarkModeLayers[\"L4\"] = 85] = \"L4\";\n})(NeutralPaletteDarkModeLayers || (NeutralPaletteDarkModeLayers = {}));\n/**\n * Recommended values for light and dark mode for `baseLayerLuminance` in the design system.\n */\nexport var StandardLuminance;\n(function (StandardLuminance) {\n    StandardLuminance[StandardLuminance[\"LightMode\"] = 1] = \"LightMode\";\n    StandardLuminance[StandardLuminance[\"DarkMode\"] = 0.23] = \"DarkMode\";\n})(StandardLuminance || (StandardLuminance = {}));\nfunction luminanceOrBackgroundColor(luminanceRecipe, backgroundRecipe) {\n    return (designSystem) => {\n        return baseLayerLuminance(designSystem) === -1\n            ? backgroundRecipe(designSystem)\n            : luminanceRecipe(designSystem);\n    };\n}\n/**\n * Find the palette color that's closest to the desired base layer luminance.\n */\nconst baseLayerLuminanceSwatch = (designSystem) => {\n    const luminance = baseLayerLuminance(designSystem);\n    return new ColorRGBA64(luminance, luminance, luminance, 1).toStringHexRGB();\n};\n/**\n * Get the index of the base layer palette color.\n */\nconst baseLayerLuminanceIndex = findClosestSwatchIndex(neutralPalette, baseLayerLuminanceSwatch);\n/**\n * Get the actual value of the card layer index, clamped so we can use it to base other layers from.\n */\nconst neutralLayerCardIndex = (designSystem) => clamp(subtract(baseLayerLuminanceIndex, neutralFillCardDelta)(designSystem), 0, neutralPalette(designSystem).length - 1);\n/**\n * Light mode L2 is significant because it happens at the same point as the neutral fill flip. Use this as the minimum index for L2.\n */\nconst lightNeutralLayerL2 = designSystemResolverMax(neutralFillRestDelta, neutralFillHoverDelta, neutralFillActiveDelta);\n/**\n * The index for L2 based on luminance, adjusted for the flip in light mode if necessary.\n */\nconst neutralLayerL2Index = designSystemResolverMax(add(baseLayerLuminanceIndex, neutralFillCardDelta), lightNeutralLayerL2);\n/**\n * Dark mode L4 is the darkest recommended background in the standard guidance, which is\n * calculated based on luminance to work with variable sized ramps.\n */\nconst darkNeutralLayerL4 = (designSystem) => {\n    const darkLum = 0.14;\n    const darkColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1);\n    const darkRefIndex = findClosestSwatchIndex(neutralPalette, darkColor.toStringHexRGB())(designSystem);\n    return darkRefIndex;\n};\n/**\n * Used as the background color for floating layers like context menus and flyouts.\n */\nexport const neutralLayerFloating = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(subtract(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 5)))));\n/**\n * Used as the background color for cards. Pair with `neutralLayerCardContainer` for the container background.\n */\nexport const neutralLayerCard = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerCardIndex, neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 4)))));\n/**\n * Used as the background color for card containers. Pair with `neutralLayerCard` for the card backgrounds.\n */\nexport const neutralLayerCardContainer = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerCardIndex, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(neutralFillCardDelta, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 3)))));\n/**\n * Used as the background color for the primary content layer (L1).\n */\nexport const neutralLayerL1 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(baseLayerLuminanceIndex, neutralPalette), swatchByMode(neutralPalette)(0, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 3)))));\n/**\n * Alternate darker color for L1 surfaces. Currently the same as card container, but use\n * the most applicable semantic named recipe.\n */\nexport const neutralLayerL1Alt = neutralLayerCardContainer;\n/**\n * Used as the background for the top command surface, logically below L1.\n */\nexport const neutralLayerL2 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(neutralLayerL2Index, neutralPalette), swatchByMode(neutralPalette)(lightNeutralLayerL2, subtract(darkNeutralLayerL4, multiply(neutralFillCardDelta, 2)))));\n/**\n * Used as the background for secondary command surfaces, logically below L2.\n */\nexport const neutralLayerL3 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerL2Index, neutralFillCardDelta), neutralPalette), swatchByMode(neutralPalette)(add(lightNeutralLayerL2, neutralFillCardDelta), subtract(darkNeutralLayerL4, neutralFillCardDelta))));\n/**\n * Used as the background for the lowest command surface or title bar, logically below L3.\n */\nexport const neutralLayerL4 = colorRecipeFactory(luminanceOrBackgroundColor(getSwatch(add(neutralLayerL2Index, multiply(neutralFillCardDelta, 2)), neutralPalette), swatchByMode(neutralPalette)(add(lightNeutralLayerL2, multiply(neutralFillCardDelta, 2)), darkNeutralLayerL4)));\n"]},"metadata":{},"sourceType":"module"}