{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\n// tslint:disable:member-ordering\n// tslint:disable:prefer-for-of\nimport { blendMultiply, blendOverlay, saturateViaLCH } from \"./color-blending\";\nimport { rgbToHSL } from \"./color-converters\";\nimport { ColorInterpolationSpace, interpolateByColorSpace } from \"./color-interpolation\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorScale } from \"./color-scale\";\nimport { parseColorHexRGB } from \"./parse-color\";\nexport var ColorPalette =\n/*#__PURE__*/\nfunction () {\n  function ColorPalette(config) {\n    _classCallCheck(this, ColorPalette);\n\n    this.config = Object.assign({}, ColorPalette.defaultPaletteConfig, config);\n    this.palette = [];\n    this.updatePaletteColors();\n  }\n\n  _createClass(ColorPalette, [{\n    key: \"updatePaletteGenerationValues\",\n    value: function updatePaletteGenerationValues(newConfig) {\n      var changed = false;\n\n      for (var key in newConfig) {\n        if (this.config[key]) {\n          if (this.config[key].equalValue) {\n            if (!this.config[key].equalValue(newConfig[key])) {\n              this.config[key] = newConfig[key];\n              changed = true;\n            }\n          } else {\n            if (newConfig[key] !== this.config[key]) {\n              this.config[key] = newConfig[key];\n              changed = true;\n            }\n          }\n        }\n      }\n\n      if (changed) {\n        this.updatePaletteColors();\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"updatePaletteColors\",\n    value: function updatePaletteColors() {\n      var scale = this.generatePaletteColorScale();\n\n      for (var i = 0; i < this.config.steps; i++) {\n        this.palette[i] = scale.getColor(i / (this.config.steps - 1), this.config.interpolationMode);\n      }\n    }\n  }, {\n    key: \"generatePaletteColorScale\",\n    value: function generatePaletteColorScale() {\n      // Even when config.baseScalePosition is specified, using 0.5 for the baseColor\n      // in the baseScale gives better results. Otherwise very off-center palettes\n      // tend to go completely grey at the end furthest from the specified base color.\n      var baseColorHSL = rgbToHSL(this.config.baseColor);\n      var baseScale = new ColorScale([{\n        position: 0,\n        color: this.config.scaleColorLight\n      }, {\n        position: 0.5,\n        color: this.config.baseColor\n      }, {\n        position: 1,\n        color: this.config.scaleColorDark\n      }]);\n      var trimmedScale = baseScale.trim(this.config.clipLight, 1 - this.config.clipDark);\n      var trimmedLight = trimmedScale.getColor(0);\n      var trimmedDark = trimmedScale.getColor(1);\n      var adjustedLight = trimmedLight;\n      var adjustedDark = trimmedDark;\n\n      if (baseColorHSL.s >= this.config.saturationAdjustmentCutoff) {\n        adjustedLight = saturateViaLCH(adjustedLight, this.config.saturationLight);\n        adjustedDark = saturateViaLCH(adjustedDark, this.config.saturationDark);\n      }\n\n      if (this.config.multiplyLight !== 0) {\n        var multiply = blendMultiply(this.config.baseColor, adjustedLight);\n        adjustedLight = interpolateByColorSpace(this.config.multiplyLight, this.config.interpolationMode, adjustedLight, multiply);\n      }\n\n      if (this.config.multiplyDark !== 0) {\n        var _multiply = blendMultiply(this.config.baseColor, adjustedDark);\n\n        adjustedDark = interpolateByColorSpace(this.config.multiplyDark, this.config.interpolationMode, adjustedDark, _multiply);\n      }\n\n      if (this.config.overlayLight !== 0) {\n        var overlay = blendOverlay(this.config.baseColor, adjustedLight);\n        adjustedLight = interpolateByColorSpace(this.config.overlayLight, this.config.interpolationMode, adjustedLight, overlay);\n      }\n\n      if (this.config.overlayDark !== 0) {\n        var _overlay = blendOverlay(this.config.baseColor, adjustedDark);\n\n        adjustedDark = interpolateByColorSpace(this.config.overlayDark, this.config.interpolationMode, adjustedDark, _overlay);\n      }\n\n      if (this.config.baseScalePosition) {\n        if (this.config.baseScalePosition <= 0) {\n          return new ColorScale([{\n            position: 0,\n            color: this.config.baseColor\n          }, {\n            position: 1,\n            color: adjustedDark.clamp()\n          }]);\n        } else if (this.config.baseScalePosition >= 1) {\n          return new ColorScale([{\n            position: 0,\n            color: adjustedLight.clamp()\n          }, {\n            position: 1,\n            color: this.config.baseColor\n          }]);\n        }\n\n        return new ColorScale([{\n          position: 0,\n          color: adjustedLight.clamp()\n        }, {\n          position: this.config.baseScalePosition,\n          color: this.config.baseColor\n        }, {\n          position: 1,\n          color: adjustedDark.clamp()\n        }]);\n      }\n\n      return new ColorScale([{\n        position: 0,\n        color: adjustedLight.clamp()\n      }, {\n        position: 0.5,\n        color: this.config.baseColor\n      }, {\n        position: 1,\n        color: adjustedDark.clamp()\n      }]);\n    }\n  }]);\n\n  return ColorPalette;\n}();\nColorPalette.defaultPaletteConfig = {\n  baseColor: parseColorHexRGB(\"#808080\"),\n  steps: 11,\n  interpolationMode: ColorInterpolationSpace.RGB,\n  scaleColorLight: new ColorRGBA64(1, 1, 1, 1),\n  scaleColorDark: new ColorRGBA64(0, 0, 0, 1),\n  clipLight: 0.185,\n  clipDark: 0.16,\n  saturationAdjustmentCutoff: 0.05,\n  saturationLight: 0.35,\n  saturationDark: 1.25,\n  overlayLight: 0,\n  overlayDark: 0.25,\n  multiplyLight: 0,\n  multiplyDark: 0,\n  baseScalePosition: 0.5\n};\nColorPalette.greyscalePaletteConfig = {\n  baseColor: parseColorHexRGB(\"#808080\"),\n  steps: 11,\n  interpolationMode: ColorInterpolationSpace.RGB,\n  scaleColorLight: new ColorRGBA64(1, 1, 1, 1),\n  scaleColorDark: new ColorRGBA64(0, 0, 0, 1),\n  clipLight: 0,\n  clipDark: 0,\n  saturationAdjustmentCutoff: 0,\n  saturationLight: 0,\n  saturationDark: 0,\n  overlayLight: 0,\n  overlayDark: 0,\n  multiplyLight: 0,\n  multiplyDark: 0,\n  baseScalePosition: 0.5\n};\n/**\n * Takes the input color and compares it to each color in the reference array to find the index with the closest Lightness value in HSL color space\n */\n\nexport function matchLightnessIndex(input, reference) {\n  var hsl = rgbToHSL(input);\n  var bestFitValue = Number.MAX_VALUE;\n  var bestFitIndex = 0;\n\n  for (var i = 0; i < reference.length; i++) {\n    var ihsl = rgbToHSL(reference[i]);\n    var fitValue = Math.abs(ihsl.l - hsl.l);\n\n    if (fitValue < bestFitValue) {\n      bestFitValue = fitValue;\n      bestFitIndex = i;\n    }\n  }\n\n  return bestFitIndex;\n}\n/**\n * Generates a greyscale palette using greyscaleConfig. The Lightness (in HSL) of the input color is then compared to the greyscale palette to determine how far off center the input color should be placed. The output palette is then generated with outputSteps number of steps using colorConfig.\n */\n\nexport function generateOffCenterPalette(input, outputSteps) {\n  var greyscaleConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorPalette.greyscalePaletteConfig;\n  var colorConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorPalette.defaultPaletteConfig;\n  var greyscale = new ColorPalette(Object.assign({}, greyscaleConfig, {\n    steps: outputSteps\n  }));\n  var scaleIndex = matchLightnessIndex(input, greyscale.palette);\n  return new ColorPalette(Object.assign({}, colorConfig, {\n    steps: outputSteps,\n    baseColor: input,\n    baseScalePosition: scaleIndex / (outputSteps - 1)\n  }));\n}\n/**\n * Take the input array of colors and extrapolates them to a larger palette of size targetSize. If preserveInputColors is false the input colors are evenly distributed into the output. Otherwise, the positions of the input colors are adjusted from a perfectly even distribution in order to ensure that the exact color values appearing in the input array also appear in the output array. The larger targetSize is compared to input.length the smaller those adjustments will be.\n */\n\nexport function rescale(input, targetSize, preserveInputColors) {\n  if (input.length <= 1 || targetSize <= 1) {\n    throw new Error(\"The input array and targetSize must both be greater than 1\");\n  }\n\n  if (preserveInputColors && targetSize <= input.length) {\n    throw new Error(\"If preserveInputColors is true then targetSize must be greater than the length of the input array\");\n  }\n\n  var stops = new Array(input.length);\n\n  if (preserveInputColors) {\n    for (var i = 0; i < input.length; i++) {\n      var p = i / (input.length - 1);\n      var bestFitValue = 2;\n      var bestFitIndex = 0;\n\n      for (var j = 0; j < targetSize; j++) {\n        var fitValue = Math.abs(j / (targetSize - 1) - p);\n\n        if (fitValue < bestFitValue) {\n          bestFitValue = fitValue;\n          bestFitIndex = j;\n        }\n\n        if (fitValue === 0) {\n          break;\n        }\n      }\n\n      stops[i] = {\n        color: input[i],\n        position: bestFitIndex / (targetSize - 1)\n      };\n    }\n  } else {\n    for (var _i = 0; _i < stops.length; _i++) {\n      stops[_i] = {\n        color: input[_i],\n        position: _i / (input.length - 1)\n      };\n    }\n  }\n\n  var scale = new ColorScale(stops);\n  var retVal = new Array(targetSize);\n\n  for (var _i2 = 0; _i2 < targetSize; _i2++) {\n    retVal[_i2] = scale.getColor(_i2 / (targetSize - 1));\n  }\n\n  return retVal;\n}\nexport var defaultCenteredRescaleConfig = {\n  targetSize: 63,\n  spacing: 4,\n  scaleColorLight: ColorPalette.defaultPaletteConfig.scaleColorLight,\n  scaleColorDark: ColorPalette.defaultPaletteConfig.scaleColorDark\n};\n/**\n * Takes an input array of colors and extrapolates them to a larger palette. The mapping first takes the input array and extrapolates between each color so that they are separated by spacing-1 slots. Then it adds to either end enough new colors to make up the desired targetSize. All output color slots between the defined stops are interpolated.\n * EXAMPLE: For an input array with length 5, a targetSize of 17 and spacing of 3 the output would be:\n *  0: scaleColorLight\n *  1:\n *  2: input 0\n *  3:\n *  4:\n *  5: input 1\n *  6:\n *  7:\n *  8: input 2\n *  9:\n * 10:\n * 11: input 3\n * 12:\n * 13:\n * 14: input 4\n * 15:\n * 16: scaleColorDark\n */\n\nexport function centeredRescale(input) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCenteredRescaleConfig;\n\n  if (input.length === 0) {\n    return [];\n  }\n\n  var offset = Math.floor((config.targetSize - ((input.length - 1) * config.spacing + 1)) / 2);\n\n  if (offset < 0) {\n    throw new Error(\"(targetSize - ((input.length - 1) * spacing + 1)) / 2 must be >= 0\");\n  }\n\n  var stops = new Array(input.length + 2);\n  stops[0] = {\n    position: 0,\n    color: config.scaleColorLight\n  };\n  stops[stops.length - 1] = {\n    position: 1,\n    color: config.scaleColorDark\n  };\n\n  for (var i = 0; i < input.length; i++) {\n    stops[i + 1] = {\n      color: input[i],\n      position: (i * config.spacing + offset) / (config.targetSize - 1)\n    };\n  }\n\n  var scale = new ColorScale(stops);\n  var retVal = new Array(config.targetSize);\n\n  for (var _i3 = 0; _i3 < config.targetSize; _i3++) {\n    retVal[_i3] = scale.getColor(_i3 / (config.targetSize - 1));\n  }\n\n  return retVal;\n}\n/**\n * Generates two palettes of length shortPaletteLength and longPaletteLength from a base color. The base color is compared to the default greyscale palette to determine where it should be placed. The short palette is then fed into centeredRescale to create the long palette. The colors in the short palette are always contained within the long.\n */\n\nexport function generateScaledPalettes(input) {\n  var shortPaletteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 11;\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultCenteredRescaleConfig;\n  var shortPalette = generateOffCenterPalette(input, shortPaletteLength);\n  var longPalette = centeredRescale(shortPalette.palette, config);\n  return {\n    short: shortPalette.palette,\n    long: longPalette\n  };\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-palette.js"],"names":["blendMultiply","blendOverlay","saturateViaLCH","rgbToHSL","ColorInterpolationSpace","interpolateByColorSpace","ColorRGBA64","ColorScale","parseColorHexRGB","ColorPalette","config","Object","assign","defaultPaletteConfig","palette","updatePaletteColors","newConfig","changed","key","equalValue","scale","generatePaletteColorScale","i","steps","getColor","interpolationMode","baseColorHSL","baseColor","baseScale","position","color","scaleColorLight","scaleColorDark","trimmedScale","trim","clipLight","clipDark","trimmedLight","trimmedDark","adjustedLight","adjustedDark","s","saturationAdjustmentCutoff","saturationLight","saturationDark","multiplyLight","multiply","multiplyDark","overlayLight","overlay","overlayDark","baseScalePosition","clamp","RGB","greyscalePaletteConfig","matchLightnessIndex","input","reference","hsl","bestFitValue","Number","MAX_VALUE","bestFitIndex","length","ihsl","fitValue","Math","abs","l","generateOffCenterPalette","outputSteps","greyscaleConfig","colorConfig","greyscale","scaleIndex","rescale","targetSize","preserveInputColors","Error","stops","Array","p","j","retVal","defaultCenteredRescaleConfig","spacing","centeredRescale","offset","floor","generateScaledPalettes","shortPaletteLength","shortPalette","longPalette","short","long"],"mappings":"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","sourcesContent":["// tslint:disable:member-ordering\n// tslint:disable:prefer-for-of\nimport { blendMultiply, blendOverlay, saturateViaLCH } from \"./color-blending\";\nimport { rgbToHSL } from \"./color-converters\";\nimport { ColorInterpolationSpace, interpolateByColorSpace } from \"./color-interpolation\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorScale } from \"./color-scale\";\nimport { parseColorHexRGB } from \"./parse-color\";\nexport class ColorPalette {\n    constructor(config) {\n        this.config = Object.assign({}, ColorPalette.defaultPaletteConfig, config);\n        this.palette = [];\n        this.updatePaletteColors();\n    }\n    updatePaletteGenerationValues(newConfig) {\n        let changed = false;\n        for (const key in newConfig) {\n            if (this.config[key]) {\n                if (this.config[key].equalValue) {\n                    if (!this.config[key].equalValue(newConfig[key])) {\n                        this.config[key] = newConfig[key];\n                        changed = true;\n                    }\n                }\n                else {\n                    if (newConfig[key] !== this.config[key]) {\n                        this.config[key] = newConfig[key];\n                        changed = true;\n                    }\n                }\n            }\n        }\n        if (changed) {\n            this.updatePaletteColors();\n        }\n        return changed;\n    }\n    updatePaletteColors() {\n        const scale = this.generatePaletteColorScale();\n        for (let i = 0; i < this.config.steps; i++) {\n            this.palette[i] = scale.getColor(i / (this.config.steps - 1), this.config.interpolationMode);\n        }\n    }\n    generatePaletteColorScale() {\n        // Even when config.baseScalePosition is specified, using 0.5 for the baseColor\n        // in the baseScale gives better results. Otherwise very off-center palettes\n        // tend to go completely grey at the end furthest from the specified base color.\n        const baseColorHSL = rgbToHSL(this.config.baseColor);\n        const baseScale = new ColorScale([\n            { position: 0, color: this.config.scaleColorLight },\n            { position: 0.5, color: this.config.baseColor },\n            { position: 1, color: this.config.scaleColorDark },\n        ]);\n        const trimmedScale = baseScale.trim(this.config.clipLight, 1 - this.config.clipDark);\n        const trimmedLight = trimmedScale.getColor(0);\n        const trimmedDark = trimmedScale.getColor(1);\n        let adjustedLight = trimmedLight;\n        let adjustedDark = trimmedDark;\n        if (baseColorHSL.s >= this.config.saturationAdjustmentCutoff) {\n            adjustedLight = saturateViaLCH(adjustedLight, this.config.saturationLight);\n            adjustedDark = saturateViaLCH(adjustedDark, this.config.saturationDark);\n        }\n        if (this.config.multiplyLight !== 0) {\n            const multiply = blendMultiply(this.config.baseColor, adjustedLight);\n            adjustedLight = interpolateByColorSpace(this.config.multiplyLight, this.config.interpolationMode, adjustedLight, multiply);\n        }\n        if (this.config.multiplyDark !== 0) {\n            const multiply = blendMultiply(this.config.baseColor, adjustedDark);\n            adjustedDark = interpolateByColorSpace(this.config.multiplyDark, this.config.interpolationMode, adjustedDark, multiply);\n        }\n        if (this.config.overlayLight !== 0) {\n            const overlay = blendOverlay(this.config.baseColor, adjustedLight);\n            adjustedLight = interpolateByColorSpace(this.config.overlayLight, this.config.interpolationMode, adjustedLight, overlay);\n        }\n        if (this.config.overlayDark !== 0) {\n            const overlay = blendOverlay(this.config.baseColor, adjustedDark);\n            adjustedDark = interpolateByColorSpace(this.config.overlayDark, this.config.interpolationMode, adjustedDark, overlay);\n        }\n        if (this.config.baseScalePosition) {\n            if (this.config.baseScalePosition <= 0) {\n                return new ColorScale([\n                    { position: 0, color: this.config.baseColor },\n                    { position: 1, color: adjustedDark.clamp() },\n                ]);\n            }\n            else if (this.config.baseScalePosition >= 1) {\n                return new ColorScale([\n                    { position: 0, color: adjustedLight.clamp() },\n                    { position: 1, color: this.config.baseColor },\n                ]);\n            }\n            return new ColorScale([\n                { position: 0, color: adjustedLight.clamp() },\n                {\n                    position: this.config.baseScalePosition,\n                    color: this.config.baseColor,\n                },\n                { position: 1, color: adjustedDark.clamp() },\n            ]);\n        }\n        return new ColorScale([\n            { position: 0, color: adjustedLight.clamp() },\n            { position: 0.5, color: this.config.baseColor },\n            { position: 1, color: adjustedDark.clamp() },\n        ]);\n    }\n}\nColorPalette.defaultPaletteConfig = {\n    baseColor: parseColorHexRGB(\"#808080\"),\n    steps: 11,\n    interpolationMode: ColorInterpolationSpace.RGB,\n    scaleColorLight: new ColorRGBA64(1, 1, 1, 1),\n    scaleColorDark: new ColorRGBA64(0, 0, 0, 1),\n    clipLight: 0.185,\n    clipDark: 0.16,\n    saturationAdjustmentCutoff: 0.05,\n    saturationLight: 0.35,\n    saturationDark: 1.25,\n    overlayLight: 0,\n    overlayDark: 0.25,\n    multiplyLight: 0,\n    multiplyDark: 0,\n    baseScalePosition: 0.5,\n};\nColorPalette.greyscalePaletteConfig = {\n    baseColor: parseColorHexRGB(\"#808080\"),\n    steps: 11,\n    interpolationMode: ColorInterpolationSpace.RGB,\n    scaleColorLight: new ColorRGBA64(1, 1, 1, 1),\n    scaleColorDark: new ColorRGBA64(0, 0, 0, 1),\n    clipLight: 0,\n    clipDark: 0,\n    saturationAdjustmentCutoff: 0,\n    saturationLight: 0,\n    saturationDark: 0,\n    overlayLight: 0,\n    overlayDark: 0,\n    multiplyLight: 0,\n    multiplyDark: 0,\n    baseScalePosition: 0.5,\n};\n/**\n * Takes the input color and compares it to each color in the reference array to find the index with the closest Lightness value in HSL color space\n */\nexport function matchLightnessIndex(input, reference) {\n    const hsl = rgbToHSL(input);\n    let bestFitValue = Number.MAX_VALUE;\n    let bestFitIndex = 0;\n    for (let i = 0; i < reference.length; i++) {\n        const ihsl = rgbToHSL(reference[i]);\n        const fitValue = Math.abs(ihsl.l - hsl.l);\n        if (fitValue < bestFitValue) {\n            bestFitValue = fitValue;\n            bestFitIndex = i;\n        }\n    }\n    return bestFitIndex;\n}\n/**\n * Generates a greyscale palette using greyscaleConfig. The Lightness (in HSL) of the input color is then compared to the greyscale palette to determine how far off center the input color should be placed. The output palette is then generated with outputSteps number of steps using colorConfig.\n */\nexport function generateOffCenterPalette(input, outputSteps, greyscaleConfig = ColorPalette.greyscalePaletteConfig, colorConfig = ColorPalette.defaultPaletteConfig) {\n    const greyscale = new ColorPalette(Object.assign({}, greyscaleConfig, { steps: outputSteps }));\n    const scaleIndex = matchLightnessIndex(input, greyscale.palette);\n    return new ColorPalette(Object.assign({}, colorConfig, { steps: outputSteps, baseColor: input, baseScalePosition: scaleIndex / (outputSteps - 1) }));\n}\n/**\n * Take the input array of colors and extrapolates them to a larger palette of size targetSize. If preserveInputColors is false the input colors are evenly distributed into the output. Otherwise, the positions of the input colors are adjusted from a perfectly even distribution in order to ensure that the exact color values appearing in the input array also appear in the output array. The larger targetSize is compared to input.length the smaller those adjustments will be.\n */\nexport function rescale(input, targetSize, preserveInputColors) {\n    if (input.length <= 1 || targetSize <= 1) {\n        throw new Error(\"The input array and targetSize must both be greater than 1\");\n    }\n    if (preserveInputColors && targetSize <= input.length) {\n        throw new Error(\"If preserveInputColors is true then targetSize must be greater than the length of the input array\");\n    }\n    const stops = new Array(input.length);\n    if (preserveInputColors) {\n        for (let i = 0; i < input.length; i++) {\n            const p = i / (input.length - 1);\n            let bestFitValue = 2;\n            let bestFitIndex = 0;\n            for (let j = 0; j < targetSize; j++) {\n                const fitValue = Math.abs(j / (targetSize - 1) - p);\n                if (fitValue < bestFitValue) {\n                    bestFitValue = fitValue;\n                    bestFitIndex = j;\n                }\n                if (fitValue === 0) {\n                    break;\n                }\n            }\n            stops[i] = {\n                color: input[i],\n                position: bestFitIndex / (targetSize - 1),\n            };\n        }\n    }\n    else {\n        for (let i = 0; i < stops.length; i++) {\n            stops[i] = { color: input[i], position: i / (input.length - 1) };\n        }\n    }\n    const scale = new ColorScale(stops);\n    const retVal = new Array(targetSize);\n    for (let i = 0; i < targetSize; i++) {\n        retVal[i] = scale.getColor(i / (targetSize - 1));\n    }\n    return retVal;\n}\nexport const defaultCenteredRescaleConfig = {\n    targetSize: 63,\n    spacing: 4,\n    scaleColorLight: ColorPalette.defaultPaletteConfig.scaleColorLight,\n    scaleColorDark: ColorPalette.defaultPaletteConfig.scaleColorDark,\n};\n/**\n * Takes an input array of colors and extrapolates them to a larger palette. The mapping first takes the input array and extrapolates between each color so that they are separated by spacing-1 slots. Then it adds to either end enough new colors to make up the desired targetSize. All output color slots between the defined stops are interpolated.\n * EXAMPLE: For an input array with length 5, a targetSize of 17 and spacing of 3 the output would be:\n *  0: scaleColorLight\n *  1:\n *  2: input 0\n *  3:\n *  4:\n *  5: input 1\n *  6:\n *  7:\n *  8: input 2\n *  9:\n * 10:\n * 11: input 3\n * 12:\n * 13:\n * 14: input 4\n * 15:\n * 16: scaleColorDark\n */\nexport function centeredRescale(input, config = defaultCenteredRescaleConfig) {\n    if (input.length === 0) {\n        return [];\n    }\n    const offset = Math.floor((config.targetSize - ((input.length - 1) * config.spacing + 1)) / 2);\n    if (offset < 0) {\n        throw new Error(\"(targetSize - ((input.length - 1) * spacing + 1)) / 2 must be >= 0\");\n    }\n    const stops = new Array(input.length + 2);\n    stops[0] = { position: 0, color: config.scaleColorLight };\n    stops[stops.length - 1] = {\n        position: 1,\n        color: config.scaleColorDark,\n    };\n    for (let i = 0; i < input.length; i++) {\n        stops[i + 1] = {\n            color: input[i],\n            position: (i * config.spacing + offset) / (config.targetSize - 1),\n        };\n    }\n    const scale = new ColorScale(stops);\n    const retVal = new Array(config.targetSize);\n    for (let i = 0; i < config.targetSize; i++) {\n        retVal[i] = scale.getColor(i / (config.targetSize - 1));\n    }\n    return retVal;\n}\n/**\n * Generates two palettes of length shortPaletteLength and longPaletteLength from a base color. The base color is compared to the default greyscale palette to determine where it should be placed. The short palette is then fed into centeredRescale to create the long palette. The colors in the short palette are always contained within the long.\n */\nexport function generateScaledPalettes(input, shortPaletteLength = 11, config = defaultCenteredRescaleConfig) {\n    const shortPalette = generateOffCenterPalette(input, shortPaletteLength);\n    const longPalette = centeredRescale(shortPalette.palette, config);\n    return { short: shortPalette.palette, long: longPalette };\n}\n"]},"metadata":{},"sourceType":"module"}