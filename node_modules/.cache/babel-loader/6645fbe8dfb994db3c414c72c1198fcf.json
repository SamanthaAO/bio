{"ast":null,"code":"import { camelCase } from \"lodash-es\";\n/**\n * Builds a string from a format specifier and replacement parameters.\n */\n\nexport function format(formatSpecifier) {\n  for (var _len = arguments.length, parameters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    parameters[_key - 1] = arguments[_key];\n  }\n\n  return formatSpecifier.replace(/{(\\d+)}/g, function (match, index) {\n    if (index >= parameters.length) {\n      return match;\n    }\n\n    var value = parameters[index];\n\n    if (typeof value !== \"number\" && !value) {\n      return \"\";\n    }\n\n    return value;\n  });\n}\n/**\n * Check to see if one string starts with another\n */\n\nexport function startsWith(stringToSearch, searchFor) {\n  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!stringToSearch || !searchFor) {\n    return false;\n  }\n\n  return stringToSearch.substr(position, searchFor.length) === searchFor;\n}\n/**\n * Determines if the specified string is undefined, null, empty, or whitespace.\n * True if the value is undefined, null, empty, or whitespace, otherwise false.\n */\n\nexport function isNullOrWhiteSpace(value) {\n  return !value || !value.trim();\n}\n/**\n * Converts a string to Pascal Case\n */\n\nexport function pascalCase(value) {\n  var camelCased = camelCase(value);\n  return \"\".concat(camelCased.charAt(0).toUpperCase()).concat(camelCased.slice(1));\n}\n/**\n * converts a string from camelCase or pascalCase to spinal-case\n * which is an lowercase dash separated naming style.\n *\n * An example of spinal case: foo-bar-bat\n */\n\nexport function spinalCase(value) {\n  var valueWithLowerCaseFirstLetter = \"\".concat(value.charAt(0).toLowerCase()).concat(value.slice(1));\n  return valueWithLowerCaseFirstLetter.replace(/([A-Z])/g, function (match, group1) {\n    return \"-\".concat(group1.toLowerCase());\n  });\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-web-utilities/dist/strings.js"],"names":["camelCase","format","formatSpecifier","parameters","replace","match","index","length","value","startsWith","stringToSearch","searchFor","position","substr","isNullOrWhiteSpace","trim","pascalCase","camelCased","charAt","toUpperCase","slice","spinalCase","valueWithLowerCaseFirstLetter","toLowerCase","group1"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA;;;;AAGA,OAAO,SAASC,MAAT,CAAgBC,eAAhB,EAAgD;AAAA,oCAAZC,UAAY;AAAZA,IAAAA,UAAY;AAAA;;AACnD,SAAOD,eAAe,CAACE,OAAhB,CAAwB,UAAxB,EAAoC,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC/D,QAAIA,KAAK,IAAIH,UAAU,CAACI,MAAxB,EAAgC;AAC5B,aAAOF,KAAP;AACH;;AACD,QAAMG,KAAK,GAAGL,UAAU,CAACG,KAAD,CAAxB;;AACA,QAAI,OAAOE,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAlC,EAAyC;AACrC,aAAO,EAAP;AACH;;AACD,WAAOA,KAAP;AACH,GATM,CAAP;AAUH;AACD;;;;AAGA,OAAO,SAASC,UAAT,CAAoBC,cAApB,EAAoCC,SAApC,EAA6D;AAAA,MAAdC,QAAc,uEAAH,CAAG;;AAChE,MAAI,CAACF,cAAD,IAAmB,CAACC,SAAxB,EAAmC;AAC/B,WAAO,KAAP;AACH;;AACD,SAAOD,cAAc,CAACG,MAAf,CAAsBD,QAAtB,EAAgCD,SAAS,CAACJ,MAA1C,MAAsDI,SAA7D;AACH;AACD;;;;;AAIA,OAAO,SAASG,kBAAT,CAA4BN,KAA5B,EAAmC;AACtC,SAAO,CAACA,KAAD,IAAU,CAACA,KAAK,CAACO,IAAN,EAAlB;AACH;AACD;;;;AAGA,OAAO,SAASC,UAAT,CAAoBR,KAApB,EAA2B;AAC9B,MAAMS,UAAU,GAAGjB,SAAS,CAACQ,KAAD,CAA5B;AACA,mBAAUS,UAAU,CAACC,MAAX,CAAkB,CAAlB,EAAqBC,WAArB,EAAV,SAA+CF,UAAU,CAACG,KAAX,CAAiB,CAAjB,CAA/C;AACH;AACD;;;;;;;AAMA,OAAO,SAASC,UAAT,CAAoBb,KAApB,EAA2B;AAC9B,MAAMc,6BAA6B,aAAMd,KAAK,CACzCU,MADoC,CAC7B,CAD6B,EAEpCK,WAFoC,EAAN,SAEdf,KAAK,CAACY,KAAN,CAAY,CAAZ,CAFc,CAAnC;AAGA,SAAOE,6BAA6B,CAAClB,OAA9B,CAAsC,UAAtC,EAAkD,UAAUC,KAAV,EAAiBmB,MAAjB,EAAyB;AAC9E,sBAAWA,MAAM,CAACD,WAAP,EAAX;AACH,GAFM,CAAP;AAGH","sourcesContent":["import { camelCase } from \"lodash-es\";\n/**\n * Builds a string from a format specifier and replacement parameters.\n */\nexport function format(formatSpecifier, ...parameters) {\n    return formatSpecifier.replace(/{(\\d+)}/g, function (match, index) {\n        if (index >= parameters.length) {\n            return match;\n        }\n        const value = parameters[index];\n        if (typeof value !== \"number\" && !value) {\n            return \"\";\n        }\n        return value;\n    });\n}\n/**\n * Check to see if one string starts with another\n */\nexport function startsWith(stringToSearch, searchFor, position = 0) {\n    if (!stringToSearch || !searchFor) {\n        return false;\n    }\n    return stringToSearch.substr(position, searchFor.length) === searchFor;\n}\n/**\n * Determines if the specified string is undefined, null, empty, or whitespace.\n * True if the value is undefined, null, empty, or whitespace, otherwise false.\n */\nexport function isNullOrWhiteSpace(value) {\n    return !value || !value.trim();\n}\n/**\n * Converts a string to Pascal Case\n */\nexport function pascalCase(value) {\n    const camelCased = camelCase(value);\n    return `${camelCased.charAt(0).toUpperCase()}${camelCased.slice(1)}`;\n}\n/**\n * converts a string from camelCase or pascalCase to spinal-case\n * which is an lowercase dash separated naming style.\n *\n * An example of spinal case: foo-bar-bat\n */\nexport function spinalCase(value) {\n    const valueWithLowerCaseFirstLetter = `${value\n        .charAt(0)\n        .toLowerCase()}${value.slice(1)}`;\n    return valueWithLowerCaseFirstLetter.replace(/([A-Z])/g, function (match, group1) {\n        return `-${group1.toLowerCase()}`;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}