{"ast":null,"code":"import { canUseDOM } from \"exenv-es6\";\nimport { defaultBreakpoints, identifyBreakpoint } from \"./breakpoints\";\n\nclass BreakpointTracker {\n  /**\n   * Constructor for the BreakpointTracker component.\n   * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth\n   */\n  constructor() {\n    /**\n     * The default array of breakpoint values\n     */\n    this._breakpoints = defaultBreakpoints;\n    /**\n     * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)\n     */\n\n    this._defaultBreakpoint = 0;\n    /**\n     * The subscriptions\n     */\n\n    this.subscriptions = [];\n    /**\n     * Notifies subscribes if a breakpoint threshold has been crossed\n     */\n\n    this.update = () => {\n      const breakpoint = canUseDOM() ? identifyBreakpoint(window.innerWidth, this._breakpoints) : this.defaultBreakpoint;\n\n      if (this.breakpoint !== breakpoint) {\n        this.breakpoint = breakpoint;\n        this.notifySubscribers(this.breakpoint);\n      }\n\n      this.openRequestAnimationFrame = false;\n    };\n    /**\n     * Returns the current breakpoint\n     */\n\n\n    this.currentBreakpoint = () => {\n      return this.breakpoint;\n    };\n    /**\n     * Request's an animation frame if there are currently no open animation frame requests\n     */\n\n\n    this.requestFrame = () => {\n      if (this.openRequestAnimationFrame) {\n        return;\n      }\n\n      this.openRequestAnimationFrame = true;\n      window.requestAnimationFrame(this.update);\n    };\n\n    if (canUseDOM()) {\n      this.breakpoint = identifyBreakpoint(window.innerWidth, this._breakpoints);\n      window.addEventListener(\"resize\", this.requestFrame);\n    } else {\n      this.breakpoint = this.defaultBreakpoint;\n    }\n  }\n  /**\n   * Gets breakpoint values\n   */\n\n\n  get breakpoints() {\n    return this._breakpoints;\n  }\n  /**\n   * Sets breakpoint values\n   */\n\n\n  set breakpoints(breakpointConfig) {\n    this._breakpoints = breakpointConfig;\n    this.update();\n  }\n  /**\n   * Gets the default breakpoint value\n   */\n\n\n  get defaultBreakpoint() {\n    return this._defaultBreakpoint;\n  }\n  /**\n   * Sets the default breakpoint value\n   */\n\n\n  set defaultBreakpoint(breakpoint) {\n    this._defaultBreakpoint = breakpoint;\n    this.update();\n  }\n  /**\n   * Subscribes a callback to be called when breakpoints change\n   */\n\n\n  subscribe(callback) {\n    if (!this.subscriptions.includes(callback)) {\n      this.subscriptions.push(callback);\n    }\n  }\n  /**\n   * Unsubscribes a callback from the breakpoint tracker\n   */\n\n\n  unsubscribe(callback) {\n    this.subscriptions = this.subscriptions.filter(subscription => callback !== subscription);\n  }\n  /**\n   * Call all subscribed callbacks\n   */\n\n\n  notifySubscribers(breakpoint) {\n    this.subscriptions.forEach(subscription => {\n      subscription(breakpoint);\n    });\n  }\n\n}\n\nexport default new BreakpointTracker();","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/utilities/breakpoint-tracker.js"],"names":["canUseDOM","defaultBreakpoints","identifyBreakpoint","BreakpointTracker","constructor","_breakpoints","_defaultBreakpoint","subscriptions","update","breakpoint","window","innerWidth","defaultBreakpoint","notifySubscribers","openRequestAnimationFrame","currentBreakpoint","requestFrame","requestAnimationFrame","addEventListener","breakpoints","breakpointConfig","subscribe","callback","includes","push","unsubscribe","filter","subscription","forEach"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAwD,eAAxD;;AACA,MAAMC,iBAAN,CAAwB;AACpB;;;;AAIAC,EAAAA,WAAW,GAAG;AACV;;;AAGA,SAAKC,YAAL,GAAoBJ,kBAApB;AACA;;;;AAGA,SAAKK,kBAAL,GAA0B,CAA1B;AACA;;;;AAGA,SAAKC,aAAL,GAAqB,EAArB;AACA;;;;AAGA,SAAKC,MAAL,GAAc,MAAM;AAChB,YAAMC,UAAU,GAAGT,SAAS,KACtBE,kBAAkB,CAACQ,MAAM,CAACC,UAAR,EAAoB,KAAKN,YAAzB,CADI,GAEtB,KAAKO,iBAFX;;AAGA,UAAI,KAAKH,UAAL,KAAoBA,UAAxB,EAAoC;AAChC,aAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAKI,iBAAL,CAAuB,KAAKJ,UAA5B;AACH;;AACD,WAAKK,yBAAL,GAAiC,KAAjC;AACH,KATD;AAUA;;;;;AAGA,SAAKC,iBAAL,GAAyB,MAAM;AAC3B,aAAO,KAAKN,UAAZ;AACH,KAFD;AAGA;;;;;AAGA,SAAKO,YAAL,GAAoB,MAAM;AACtB,UAAI,KAAKF,yBAAT,EAAoC;AAChC;AACH;;AACD,WAAKA,yBAAL,GAAiC,IAAjC;AACAJ,MAAAA,MAAM,CAACO,qBAAP,CAA6B,KAAKT,MAAlC;AACH,KAND;;AAOA,QAAIR,SAAS,EAAb,EAAiB;AACb,WAAKS,UAAL,GAAkBP,kBAAkB,CAACQ,MAAM,CAACC,UAAR,EAAoB,KAAKN,YAAzB,CAApC;AACAK,MAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,YAAvC;AACH,KAHD,MAIK;AACD,WAAKP,UAAL,GAAkB,KAAKG,iBAAvB;AACH;AACJ;AACD;;;;;AAGA,MAAIO,WAAJ,GAAkB;AACd,WAAO,KAAKd,YAAZ;AACH;AACD;;;;;AAGA,MAAIc,WAAJ,CAAgBC,gBAAhB,EAAkC;AAC9B,SAAKf,YAAL,GAAoBe,gBAApB;AACA,SAAKZ,MAAL;AACH;AACD;;;;;AAGA,MAAII,iBAAJ,GAAwB;AACpB,WAAO,KAAKN,kBAAZ;AACH;AACD;;;;;AAGA,MAAIM,iBAAJ,CAAsBH,UAAtB,EAAkC;AAC9B,SAAKH,kBAAL,GAA0BG,UAA1B;AACA,SAAKD,MAAL;AACH;AACD;;;;;AAGAa,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,QAAI,CAAC,KAAKf,aAAL,CAAmBgB,QAAnB,CAA4BD,QAA5B,CAAL,EAA4C;AACxC,WAAKf,aAAL,CAAmBiB,IAAnB,CAAwBF,QAAxB;AACH;AACJ;AACD;;;;;AAGAG,EAAAA,WAAW,CAACH,QAAD,EAAW;AAClB,SAAKf,aAAL,GAAqB,KAAKA,aAAL,CAAmBmB,MAAnB,CAA2BC,YAAD,IAAkBL,QAAQ,KAAKK,YAAzD,CAArB;AACH;AACD;;;;;AAGAd,EAAAA,iBAAiB,CAACJ,UAAD,EAAa;AAC1B,SAAKF,aAAL,CAAmBqB,OAAnB,CAA4BD,YAAD,IAAkB;AACzCA,MAAAA,YAAY,CAAClB,UAAD,CAAZ;AACH,KAFD;AAGH;;AAtGmB;;AAwGxB,eAAe,IAAIN,iBAAJ,EAAf","sourcesContent":["import { canUseDOM } from \"exenv-es6\";\nimport { defaultBreakpoints, identifyBreakpoint, } from \"./breakpoints\";\nclass BreakpointTracker {\n    /**\n     * Constructor for the BreakpointTracker component.\n     * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth\n     */\n    constructor() {\n        /**\n         * The default array of breakpoint values\n         */\n        this._breakpoints = defaultBreakpoints;\n        /**\n         * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)\n         */\n        this._defaultBreakpoint = 0;\n        /**\n         * The subscriptions\n         */\n        this.subscriptions = [];\n        /**\n         * Notifies subscribes if a breakpoint threshold has been crossed\n         */\n        this.update = () => {\n            const breakpoint = canUseDOM()\n                ? identifyBreakpoint(window.innerWidth, this._breakpoints)\n                : this.defaultBreakpoint;\n            if (this.breakpoint !== breakpoint) {\n                this.breakpoint = breakpoint;\n                this.notifySubscribers(this.breakpoint);\n            }\n            this.openRequestAnimationFrame = false;\n        };\n        /**\n         * Returns the current breakpoint\n         */\n        this.currentBreakpoint = () => {\n            return this.breakpoint;\n        };\n        /**\n         * Request's an animation frame if there are currently no open animation frame requests\n         */\n        this.requestFrame = () => {\n            if (this.openRequestAnimationFrame) {\n                return;\n            }\n            this.openRequestAnimationFrame = true;\n            window.requestAnimationFrame(this.update);\n        };\n        if (canUseDOM()) {\n            this.breakpoint = identifyBreakpoint(window.innerWidth, this._breakpoints);\n            window.addEventListener(\"resize\", this.requestFrame);\n        }\n        else {\n            this.breakpoint = this.defaultBreakpoint;\n        }\n    }\n    /**\n     * Gets breakpoint values\n     */\n    get breakpoints() {\n        return this._breakpoints;\n    }\n    /**\n     * Sets breakpoint values\n     */\n    set breakpoints(breakpointConfig) {\n        this._breakpoints = breakpointConfig;\n        this.update();\n    }\n    /**\n     * Gets the default breakpoint value\n     */\n    get defaultBreakpoint() {\n        return this._defaultBreakpoint;\n    }\n    /**\n     * Sets the default breakpoint value\n     */\n    set defaultBreakpoint(breakpoint) {\n        this._defaultBreakpoint = breakpoint;\n        this.update();\n    }\n    /**\n     * Subscribes a callback to be called when breakpoints change\n     */\n    subscribe(callback) {\n        if (!this.subscriptions.includes(callback)) {\n            this.subscriptions.push(callback);\n        }\n    }\n    /**\n     * Unsubscribes a callback from the breakpoint tracker\n     */\n    unsubscribe(callback) {\n        this.subscriptions = this.subscriptions.filter((subscription) => callback !== subscription);\n    }\n    /**\n     * Call all subscribed callbacks\n     */\n    notifySubscribers(breakpoint) {\n        this.subscriptions.forEach((subscription) => {\n            subscription(breakpoint);\n        });\n    }\n}\nexport default new BreakpointTracker();\n"]},"metadata":{},"sourceType":"module"}