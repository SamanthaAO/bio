{"ast":null,"code":"/**\n * The DesignSystemProvider is a react component designed to provide design-system configurations to the\n * JSSManager. The provider accepts a single prop that it will make available to all child components through\n * react contexts. If given a design-language, the JSSManager will make the design-language object available\n * to all JSS rules defined as a function\n */\nimport React from \"react\";\nimport { designSystemContext, Provider } from \"./context\";\nimport { mergeDesignSystem } from \"@microsoft/fast-jss-manager\";\nexport class DesignSystemProvider extends React.Component {\n  constructor(props, context) {\n    super(props);\n    this.updateDownstreamDesignSystem();\n  }\n\n  render() {\n    this.updateDownstreamDesignSystem();\n    return React.createElement(Provider, {\n      value: this.downstreamDesignSystem\n    }, this.props.children);\n  }\n  /**\n   * Updates the downstreamDesignSystem if either this.props.designSystem\n   * or this.context has changed\n   */\n\n\n  updateDownstreamDesignSystem() {\n    let shouldUpdate = false;\n\n    if (this.upstreamDesignSystem !== this.context) {\n      this.upstreamDesignSystem = this.context;\n      shouldUpdate = true;\n    }\n\n    if (this.designSystemOverrides !== this.props.designSystem) {\n      this.designSystemOverrides = this.props.designSystem;\n      shouldUpdate = true;\n    }\n\n    if (shouldUpdate) {\n      this.downstreamDesignSystem = this.createDesignSystem();\n    }\n  }\n  /**\n   * Merges locally stored context with designSystem props.\n   * Returns a new object\n   */\n\n\n  createDesignSystem() {\n    return typeof this.props.designSystemMergingFunction === \"function\" ? this.props.designSystemMergingFunction(this.upstreamDesignSystem, this.designSystemOverrides) : mergeDesignSystem(this.upstreamDesignSystem, this.designSystemOverrides);\n  }\n\n}\nDesignSystemProvider.contextType = designSystemContext;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-jss-manager-react/dist/design-system-provider.js"],"names":["React","designSystemContext","Provider","mergeDesignSystem","DesignSystemProvider","Component","constructor","props","context","updateDownstreamDesignSystem","render","createElement","value","downstreamDesignSystem","children","shouldUpdate","upstreamDesignSystem","designSystemOverrides","designSystem","createDesignSystem","designSystemMergingFunction","contextType"],"mappings":"AAAA;;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AACA,SAASC,iBAAT,QAAmC,6BAAnC;AACA,OAAO,MAAMC,oBAAN,SAAmCJ,KAAK,CAACK,SAAzC,CAAmD;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACxB,UAAMD,KAAN;AACA,SAAKE,4BAAL;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKD,4BAAL;AACA,WAAQT,KAAK,CAACW,aAAN,CAAoBT,QAApB,EAA8B;AAAEU,MAAAA,KAAK,EAAE,KAAKC;AAAd,KAA9B,EAAsE,KAAKN,KAAL,CAAWO,QAAjF,CAAR;AACH;AACD;;;;;;AAIAL,EAAAA,4BAA4B,GAAG;AAC3B,QAAIM,YAAY,GAAG,KAAnB;;AACA,QAAI,KAAKC,oBAAL,KAA8B,KAAKR,OAAvC,EAAgD;AAC5C,WAAKQ,oBAAL,GAA4B,KAAKR,OAAjC;AACAO,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD,QAAI,KAAKE,qBAAL,KAA+B,KAAKV,KAAL,CAAWW,YAA9C,EAA4D;AACxD,WAAKD,qBAAL,GAA6B,KAAKV,KAAL,CAAWW,YAAxC;AACAH,MAAAA,YAAY,GAAG,IAAf;AACH;;AACD,QAAIA,YAAJ,EAAkB;AACd,WAAKF,sBAAL,GAA8B,KAAKM,kBAAL,EAA9B;AACH;AACJ;AACD;;;;;;AAIAA,EAAAA,kBAAkB,GAAG;AACjB,WAAO,OAAO,KAAKZ,KAAL,CAAWa,2BAAlB,KAAkD,UAAlD,GACD,KAAKb,KAAL,CAAWa,2BAAX,CAAuC,KAAKJ,oBAA5C,EAAkE,KAAKC,qBAAvE,CADC,GAEDd,iBAAiB,CAAC,KAAKa,oBAAN,EAA4B,KAAKC,qBAAjC,CAFvB;AAGH;;AAnCqD;AAqC1Db,oBAAoB,CAACiB,WAArB,GAAmCpB,mBAAnC","sourcesContent":["/**\n * The DesignSystemProvider is a react component designed to provide design-system configurations to the\n * JSSManager. The provider accepts a single prop that it will make available to all child components through\n * react contexts. If given a design-language, the JSSManager will make the design-language object available\n * to all JSS rules defined as a function\n */\nimport React from \"react\";\nimport { designSystemContext, Provider } from \"./context\";\nimport { mergeDesignSystem, } from \"@microsoft/fast-jss-manager\";\nexport class DesignSystemProvider extends React.Component {\n    constructor(props, context) {\n        super(props);\n        this.updateDownstreamDesignSystem();\n    }\n    render() {\n        this.updateDownstreamDesignSystem();\n        return (React.createElement(Provider, { value: this.downstreamDesignSystem }, this.props.children));\n    }\n    /**\n     * Updates the downstreamDesignSystem if either this.props.designSystem\n     * or this.context has changed\n     */\n    updateDownstreamDesignSystem() {\n        let shouldUpdate = false;\n        if (this.upstreamDesignSystem !== this.context) {\n            this.upstreamDesignSystem = this.context;\n            shouldUpdate = true;\n        }\n        if (this.designSystemOverrides !== this.props.designSystem) {\n            this.designSystemOverrides = this.props.designSystem;\n            shouldUpdate = true;\n        }\n        if (shouldUpdate) {\n            this.downstreamDesignSystem = this.createDesignSystem();\n        }\n    }\n    /**\n     * Merges locally stored context with designSystem props.\n     * Returns a new object\n     */\n    createDesignSystem() {\n        return typeof this.props.designSystemMergingFunction === \"function\"\n            ? this.props.designSystemMergingFunction(this.upstreamDesignSystem, this.designSystemOverrides)\n            : mergeDesignSystem(this.upstreamDesignSystem, this.designSystemOverrides);\n    }\n}\nDesignSystemProvider.contextType = designSystemContext;\n"]},"metadata":{},"sourceType":"module"}