{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\n/**\n * Toggle base component\n */\n\nvar Toggle =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Toggle, _Foundation);\n\n  /**\n   * Define constructor\n   */\n  function Toggle(props) {\n    var _this;\n\n    _classCallCheck(this, Toggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toggle).call(this, props));\n    _this.handledProps = {\n      managedClasses: void 0,\n      disabled: void 0,\n      inputId: void 0,\n      labelId: void 0,\n      name: void 0,\n      selected: void 0,\n      selectedMessage: void 0,\n      statusMessageId: void 0,\n      unselectedMessage: void 0,\n      onChange: void 0\n    };\n    /**\n     * Handles onChange as a controlled component\n     */\n\n    _this.handleToggleChange = function (e) {\n      if (typeof _this.props.selected !== \"boolean\") {\n        _this.setState({\n          selected: !_this.state.selected\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(e);\n      }\n    };\n\n    _this.state = {\n      selected: _this.props.selected || false\n    };\n    return _this;\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  _createClass(Toggle, [{\n    key: \"render\",\n\n    /**\n     * Renders the component\n     */\n    value: function render() {\n      var _this$props$managedCl = this.props.managedClasses,\n          toggle_toggleButton = _this$props$managedCl.toggle_toggleButton,\n          toggle_input = _this$props$managedCl.toggle_input,\n          toggle_stateIndicator = _this$props$managedCl.toggle_stateIndicator;\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames(),\n        \"aria-disabled\": this.props.disabled || null\n      }), this.generateLabel(), React.createElement(\"div\", {\n        className: classNames(toggle_toggleButton)\n      }, React.createElement(\"input\", {\n        className: classNames(toggle_input),\n        type: \"checkbox\",\n        id: this.props.inputId,\n        \"aria-describedby\": this.props.statusMessageId,\n        disabled: this.props.disabled,\n        name: this.props.name,\n        value: this.generateToggleStateLabel(),\n        onChange: this.handleToggleChange,\n        checked: this.state.selected\n      }), React.createElement(\"span\", {\n        className: classNames(toggle_stateIndicator)\n      })), this.renderStatusMessage());\n    }\n    /**\n     * Generates class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl2 = this.props.managedClasses,\n          toggle = _this$props$managedCl2.toggle,\n          toggle__disabled = _this$props$managedCl2.toggle__disabled,\n          toggle__checked = _this$props$managedCl2.toggle__checked;\n      return _get(_getPrototypeOf(Toggle.prototype), \"generateClassNames\", this).call(this, classNames(toggle, [toggle__disabled, this.props.disabled], [toggle__checked, this.state.selected]));\n    }\n    /**\n     * Creates proper string based on state\n     */\n\n  }, {\n    key: \"generateToggleStateLabel\",\n    value: function generateToggleStateLabel() {\n      return this.state.selected ? this.props.selectedMessage : this.props.unselectedMessage;\n    }\n    /**\n     * Generates label if it exists\n     */\n\n  }, {\n    key: \"generateLabel\",\n    value: function generateLabel() {\n      if (this.props.labelId || this.props.children) {\n        return React.createElement(\"label\", {\n          className: classNames(this.props.managedClasses.toggle_label),\n          id: this.props.labelId,\n          htmlFor: this.props.inputId\n        }, this.props.children);\n      }\n    }\n  }, {\n    key: \"renderStatusMessage\",\n    value: function renderStatusMessage() {\n      if (this.props.selectedMessage || this.props.unselectedMessage) {\n        return React.createElement(\"span\", {\n          id: this.props.statusMessageId,\n          className: classNames(this.props.managedClasses.toggle_statusMessage)\n        }, this.generateToggleStateLabel());\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (typeof nextProps.selected === \"boolean\" && nextProps.selected !== prevState.selected) {\n        return {\n          selected: nextProps.selected\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Toggle;\n}(Foundation);\n\nToggle.displayName = \"\".concat(DisplayNamePrefix, \"Toggle\");\nToggle.defaultProps = {\n  managedClasses: {}\n};\nexport default Toggle;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/toggle/toggle.js"],"names":["Foundation","classNames","React","DisplayNamePrefix","Toggle","props","handledProps","managedClasses","disabled","inputId","labelId","name","selected","selectedMessage","statusMessageId","unselectedMessage","onChange","handleToggleChange","e","setState","state","toggle_toggleButton","toggle_input","toggle_stateIndicator","createElement","Object","assign","unhandledProps","className","generateClassNames","generateLabel","type","id","value","generateToggleStateLabel","checked","renderStatusMessage","toggle","toggle__disabled","toggle__checked","children","toggle_label","htmlFor","toggle_statusMessage","nextProps","prevState","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\n/**\n * Toggle base component\n */\nclass Toggle extends Foundation {\n    /**\n     * Define constructor\n     */\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            managedClasses: void 0,\n            disabled: void 0,\n            inputId: void 0,\n            labelId: void 0,\n            name: void 0,\n            selected: void 0,\n            selectedMessage: void 0,\n            statusMessageId: void 0,\n            unselectedMessage: void 0,\n            onChange: void 0,\n        };\n        /**\n         * Handles onChange as a controlled component\n         */\n        this.handleToggleChange = (e) => {\n            if (typeof this.props.selected !== \"boolean\") {\n                this.setState({ selected: !this.state.selected });\n            }\n            if (this.props.onChange) {\n                this.props.onChange(e);\n            }\n        };\n        this.state = {\n            selected: this.props.selected || false,\n        };\n    }\n    /**\n     * React life-cycle method\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (typeof nextProps.selected === \"boolean\" &&\n            nextProps.selected !== prevState.selected) {\n            return {\n                selected: nextProps.selected,\n            };\n        }\n        return null;\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const { toggle_toggleButton, toggle_input, toggle_stateIndicator, } = this.props.managedClasses;\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), \"aria-disabled\": this.props.disabled || null }),\n            this.generateLabel(),\n            React.createElement(\"div\", { className: classNames(toggle_toggleButton) },\n                React.createElement(\"input\", { className: classNames(toggle_input), type: \"checkbox\", id: this.props.inputId, \"aria-describedby\": this.props.statusMessageId, disabled: this.props.disabled, name: this.props.name, value: this.generateToggleStateLabel(), onChange: this.handleToggleChange, checked: this.state.selected }),\n                React.createElement(\"span\", { className: classNames(toggle_stateIndicator) })),\n            this.renderStatusMessage()));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { toggle, toggle__disabled, toggle__checked, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(toggle, [toggle__disabled, this.props.disabled], [toggle__checked, this.state.selected]));\n    }\n    /**\n     * Creates proper string based on state\n     */\n    generateToggleStateLabel() {\n        return this.state.selected\n            ? this.props.selectedMessage\n            : this.props.unselectedMessage;\n    }\n    /**\n     * Generates label if it exists\n     */\n    generateLabel() {\n        if (this.props.labelId || this.props.children) {\n            return (React.createElement(\"label\", { className: classNames(this.props.managedClasses.toggle_label), id: this.props.labelId, htmlFor: this.props.inputId }, this.props.children));\n        }\n    }\n    renderStatusMessage() {\n        if (this.props.selectedMessage || this.props.unselectedMessage) {\n            return (React.createElement(\"span\", { id: this.props.statusMessageId, className: classNames(this.props.managedClasses.toggle_statusMessage) }, this.generateToggleStateLabel()));\n        }\n    }\n}\nToggle.displayName = `${DisplayNamePrefix}Toggle`;\nToggle.defaultProps = {\n    managedClasses: {},\n};\nexport default Toggle;\n"]},"metadata":{},"sourceType":"module"}