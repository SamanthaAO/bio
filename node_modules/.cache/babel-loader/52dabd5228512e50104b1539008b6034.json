{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeEnter, keyCodeEscape, keyCodeHome, keyCodeSpace, keyCodeTab, startsWith } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, isEqual } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ListboxContext } from \"./listbox-context\";\n\nvar Listbox =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Listbox, _Foundation);\n\n  function Listbox(props) {\n    var _this;\n\n    _classCallCheck(this, Listbox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Listbox).call(this, props));\n    _this.handledProps = {\n      children: void 0,\n      defaultSelection: void 0,\n      disabled: void 0,\n      labelledBy: void 0,\n      managedClasses: void 0,\n      multiselectable: void 0,\n      onItemInvoked: void 0,\n      onSelectedItemsChanged: void 0,\n      selectedItems: void 0,\n      typeAheadEnabled: void 0,\n      typeAheadPropertyKey: void 0,\n      focusItemOnMount: void 0,\n      selectOnFocus: void 0\n    };\n    _this.rootElement = React.createRef();\n    _this.typeAheadString = \"\";\n    _this.shiftRangeSelectStartIndex = -1;\n    /**\n     * Render a single child\n     */\n\n    _this.renderChild = function (child, index) {\n      return React.cloneElement(child, {\n        tabIndex: index === _this.state.focusIndex ? 0 : -1\n      });\n    };\n    /**\n     * Determines if a given element should be focusable by the menu\n     */\n\n\n    _this.isFocusableElement = function (element) {\n      return element instanceof HTMLElement && element.getAttribute(\"role\") === \"option\" && !_this.isDisabledElement(element) && !_this.props.disabled;\n    };\n    /**\n     * Determines if a given element is disabled\n     */\n\n\n    _this.isDisabledElement = function (element) {\n      return element instanceof HTMLElement && element.getAttribute(\"aria-disabled\") === \"true\";\n    };\n    /**\n     * sets focus state and selection when component is initially mounted\n     * or when default selection changes\n     */\n\n\n    _this.setInitialFocus = function (selection) {\n      var focusIndex = -1;\n      focusIndex = selection.length > 0 ? Listbox.getItemIndexById(selection[0].id, _this.props.children) : _this.domChildren().findIndex(_this.isFocusableElement);\n\n      if (focusIndex !== -1) {\n        if (_this.props.focusItemOnMount) {\n          _this.setFocus(focusIndex, +1);\n        }\n\n        _this.setState({\n          focusIndex: focusIndex\n        });\n      }\n    };\n    /**\n     * gets the initial selection state based on props\n     */\n\n\n    _this.getInitialSelection = function () {\n      var initialSelection;\n\n      if (_this.props.selectedItems !== undefined) {\n        initialSelection = Listbox.getListboxItemDataFromIds(_this.props.selectedItems, _this.props.children);\n      } else {\n        initialSelection = Listbox.getListboxItemDataFromIds(_this.props.defaultSelection, _this.props.children);\n      }\n\n      if (!_this.props.multiselectable && initialSelection.length > 1) {\n        initialSelection = initialSelection.slice(0, 1);\n      }\n\n      return initialSelection;\n    };\n    /**\n     * Function called by child select options when they have been focused\n     */\n\n\n    _this.listboxItemfocused = function (item, event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var target = event.currentTarget;\n\n      var focusIndex = _this.domChildren().indexOf(target);\n\n      if (_this.isDisabledElement(target)) {\n        target.blur();\n        return;\n      }\n\n      _this.setState({\n        focusIndex: focusIndex,\n        focussedItemId: item.id\n      });\n\n      if (!_this.props.multiselectable && _this.props.selectOnFocus) {\n        _this.updateSelection([item]);\n      }\n    };\n    /**\n     * Handle the keydown event of the root menu\n     */\n\n\n    _this.handleMenuKeyDown = function (event) {\n      if (typeof _this.props.onKeyDown === \"function\") {\n        _this.props.onKeyDown(event);\n      }\n\n      if (event.defaultPrevented || _this.props.disabled) {\n        return;\n      }\n\n      var focusItemId;\n\n      switch (event.keyCode) {\n        case keyCodeEscape:\n        case keyCodeEnter:\n        case keyCodeSpace:\n        case keyCodeTab:\n          return;\n\n        case keyCodeArrowDown:\n        case keyCodeArrowRight:\n          focusItemId = _this.setFocus(_this.state.focusIndex + 1, 1);\n\n          if (_this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n            var itemProps = Listbox.getItemPropsById(focusItemId, _this.props.children);\n\n            if (itemProps !== null) {\n              _this.toggleItem(itemProps);\n            }\n          }\n\n          event.preventDefault();\n          break;\n\n        case keyCodeArrowUp:\n        case keyCodeArrowLeft:\n          focusItemId = _this.setFocus(_this.state.focusIndex - 1, -1);\n\n          if (_this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n            var itemData = Listbox.getItemPropsById(focusItemId, _this.props.children);\n\n            if (itemData !== null) {\n              _this.toggleItem(itemData);\n            }\n          }\n\n          event.preventDefault();\n          break;\n\n        case keyCodeEnd:\n          if (_this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n            _this.selectRange(_this.state.focusIndex, _this.domChildren().length - 1);\n          }\n\n          _this.setFocus(_this.domChildren().length - 1, -1);\n\n          break;\n\n        case keyCodeHome:\n          if (_this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n            _this.selectRange(0, _this.state.focusIndex);\n          }\n\n          _this.setFocus(0, 1);\n\n          break;\n\n        default:\n          if (event.key === \"A\") {\n            _this.selectRange(0, _this.domChildren().length);\n          } else if (!event.ctrlKey && _this.props.typeAheadEnabled) {\n            _this.processTypeAhead(event);\n          }\n\n      }\n    };\n    /**\n     * Sets focus based on characters typed\n     */\n\n\n    _this.processTypeAhead = function (e) {\n      clearTimeout(_this.typeAheadTimer);\n      _this.typeAheadString = _this.typeAheadString + e.key.toLowerCase();\n      var matchIndex = -1;\n      var children = React.Children.toArray(_this.props.children);\n      children.some(function (child, index) {\n        if (child.props[_this.props.typeAheadPropertyKey] === undefined) {\n          return false;\n        }\n\n        if (startsWith(child.props[_this.props.typeAheadPropertyKey].toLowerCase(), _this.typeAheadString)) {\n          matchIndex = index;\n          return true;\n        }\n      });\n\n      if (matchIndex !== -1) {\n        _this.typeAheadTimer = setTimeout(function () {\n          _this.typeAheadTimerExpired();\n        }, 1000);\n\n        _this.setFocus(matchIndex, 1);\n      } else {\n        _this.typeAheadString = \"\";\n      }\n    };\n    /**\n     * clears the type ahead buffer after specified time of no typing\n     */\n\n\n    _this.typeAheadTimerExpired = function () {\n      _this.typeAheadString = \"\";\n      clearTimeout(_this.typeAheadTimer);\n    };\n    /**\n     * Function called by child items when they have been invoked\n     */\n\n\n    _this.listboxItemInvoked = function (item, event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      if (typeof _this.props.onItemInvoked === \"function\") {\n        _this.props.onItemInvoked(item);\n      }\n\n      var target = event.currentTarget;\n\n      var itemIndex = _this.domChildren().indexOf(target);\n\n      if (_this.props.multiselectable && event.type === \"click\") {\n        if (!event.shiftKey || _this.shiftRangeSelectStartIndex === -1) {\n          _this.shiftRangeSelectStartIndex = itemIndex;\n        }\n\n        if (event.ctrlKey) {\n          _this.toggleItem(item);\n        } else if (event.shiftKey) {\n          _this.selectRange(_this.shiftRangeSelectStartIndex, itemIndex);\n        } else {\n          _this.updateSelection([item]);\n        }\n      } else if (_this.props.multiselectable && event.type === \"keydown\") {\n        if (event.shiftKey) {\n          _this.selectRange(_this.shiftRangeSelectStartIndex, itemIndex);\n        } else {\n          _this.toggleItem(item);\n        }\n      } else {\n        _this.updateSelection([item]);\n      }\n    };\n    /**\n     * Toggle the selection state of the item\n     */\n\n\n    _this.toggleItem = function (item) {\n      var culledSelection = _this.state.selectedItems.filter(function (listboxItem) {\n        return listboxItem.id !== item.id;\n      });\n\n      if (culledSelection.length < _this.state.selectedItems.length) {\n        _this.updateSelection(culledSelection);\n      } else {\n        var newSelectedItems = _this.state.selectedItems.concat([item]);\n\n        _this.updateSelection(newSelectedItems);\n      }\n    };\n    /**\n     * Select a range of items\n     */\n\n\n    _this.selectRange = function (startIndex, endIndex) {\n      var children = React.Children.toArray(_this.props.children);\n      var childrenInRange = children.slice(startIndex >= endIndex ? endIndex : startIndex, startIndex >= endIndex ? startIndex + 1 : endIndex + 1);\n      var newSelectedItems = childrenInRange.map(function (child) {\n        return child.props;\n      });\n\n      _this.updateSelection(newSelectedItems);\n    };\n    /**\n     * Updates selection state (should be the only place this is done outside of initialization)\n     */\n\n\n    _this.updateSelection = function (newSelection) {\n      var validatedSelection = Listbox.validateSelection(newSelection, _this.props.children);\n\n      if (isEqual(validatedSelection, _this.state.selectedItems)) {\n        return;\n      }\n\n      if (_this.props.selectedItems === undefined) {\n        _this.setState({\n          selectedItems: validatedSelection\n        });\n      }\n\n      if (_this.props.onSelectedItemsChanged) {\n        _this.props.onSelectedItemsChanged(validatedSelection);\n      }\n    };\n\n    _this.state = {\n      focusIndex: -1,\n      focussedItemId: \"\",\n      selectedItems: _this.getInitialSelection()\n    };\n    return _this;\n  }\n  /**\n   * converts an array of item id's to an array of ListboxItemProps objects populated by data\n   * extracted from the provided children based on id match\n   */\n\n\n  _createClass(Listbox, [{\n    key: \"render\",\n\n    /**\n     * Renders the component\n     */\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        ref: this.rootElement,\n        role: \"listbox\",\n        \"aria-disabled\": this.props.disabled || null,\n        \"aria-multiselectable\": this.props.multiselectable || null,\n        \"aria-activedescendant\": this.state.focussedItemId,\n        \"aria-labelledby\": this.props.labelledBy || null,\n        className: this.generateClassNames(),\n        onKeyDown: this.handleMenuKeyDown\n      }), React.createElement(ListboxContext.Provider, {\n        value: {\n          listboxSelectedItems: this.state.selectedItems,\n          listboxItemFocused: this.listboxItemfocused,\n          listboxItemInvoked: this.listboxItemInvoked,\n          listboxMultiselectable: this.props.multiselectable\n        }\n      }, this.renderChildren()));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // if default selection changes between renders we treat as a effective reset\n      // of selection and focus in uncontrolled mode\n      if (!isEqual(prevProps.defaultSelection, this.props.defaultSelection) && this.props.selectedItems === undefined) {\n        var updatedSelection = this.getInitialSelection();\n        this.updateSelection(updatedSelection);\n        this.setInitialFocus(updatedSelection);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setInitialFocus(this.state.selectedItems);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.typeAheadTimer);\n    }\n    /**\n     * Create class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          listbox = _this$props$managedCl.listbox,\n          listbox__disabled = _this$props$managedCl.listbox__disabled;\n      return _get(_getPrototypeOf(Listbox.prototype), \"generateClassNames\", this).call(this, classNames(listbox, [listbox__disabled, this.props.disabled]));\n    }\n    /**\n     * Render all child elements\n     */\n\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      return React.Children.map(this.props.children, this.renderChild);\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n\n  }, {\n    key: \"domChildren\",\n    value: function domChildren() {\n      return canUseDOM() && this.rootElement.current instanceof HTMLElement ? Array.from(this.rootElement.current.children) : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.  Returns the focussed item id or an empty string\n     * if none found\n     */\n\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(focusIndex, adjustment) {\n      var children = this.domChildren();\n      var focusItemId = \"\";\n\n      while (inRange(focusIndex, children.length)) {\n        var child = children[focusIndex];\n        focusItemId = child.id;\n\n        if (this.isFocusableElement(child)) {\n          if (!this.props.disabled) {\n            child.focus();\n          }\n\n          break;\n        }\n\n        focusIndex += adjustment;\n      }\n\n      return focusItemId;\n    }\n  }], [{\n    key: \"getListboxItemDataFromIds\",\n    value: function getListboxItemDataFromIds(selectedIds, children) {\n      var selectedItems = Listbox.validateSelection(selectedIds, children);\n      return selectedItems;\n    }\n    /**\n     * Gets the index of an item from it's id by examining children props\n     */\n\n  }, {\n    key: \"getItemIndexById\",\n    value: function getItemIndexById(itemId, children) {\n      var childrenAsArray = React.Children.toArray(children);\n      return childrenAsArray.findIndex(function (child) {\n        if (child.props[Listbox.idPropertyKey] === undefined || child.props[Listbox.idPropertyKey] !== itemId) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n    /**\n     * tests whether a React.ReactElement is a valid item to select\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n\n  }, {\n    key: \"isValidSelectedItem\",\n    value: function isValidSelectedItem(itemNode) {\n      if (itemNode === undefined || itemNode.props[Listbox.disabledPropertyKey] === true || itemNode.props[Listbox.valuePropertyKey] === undefined) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Gets a child node from it's id by examining provided children\n     */\n\n  }, {\n    key: \"getNodeById\",\n    value: function getNodeById(itemId, children) {\n      var childrenAsArray = React.Children.toArray(children);\n      var matchNode = childrenAsArray.find(function (child) {\n        if (child.props[Listbox.idPropertyKey] === undefined || child.props[Listbox.idPropertyKey] !== itemId) {\n          return false;\n        }\n\n        return true;\n      });\n      return matchNode;\n    }\n    /**\n     * Gets the listItemData of an item from it's id by examining children props\n     */\n\n  }, {\n    key: \"getItemPropsById\",\n    value: function getItemPropsById(itemId, children) {\n      var matchNode = this.getNodeById(itemId, children);\n\n      if (matchNode !== undefined) {\n        return matchNode.props;\n      }\n\n      return null;\n    }\n    /**\n     * validates selected options against child props and returns only the valid ones\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n\n  }, {\n    key: \"validateSelection\",\n    value: function validateSelection(items, children) {\n      var _this2 = this;\n\n      var validSelection = items.map(function (item) {\n        var itemId = \"\";\n\n        if (typeof item === \"string\") {\n          itemId = item;\n        } else {\n          itemId = item.id;\n        }\n\n        var itemNode = _this2.getNodeById(itemId, children);\n\n        if (!Listbox.isValidSelectedItem(itemNode)) {\n          return null;\n        }\n\n        return itemNode.props;\n      }).filter(function (listboxItem) {\n        return listboxItem !== null;\n      });\n      return validSelection;\n    }\n  }]);\n\n  return Listbox;\n}(Foundation);\n\nListbox.displayName = \"\".concat(DisplayNamePrefix, \"Listbox\");\nListbox.defaultProps = {\n  multiselectable: false,\n  defaultSelection: [],\n  typeAheadPropertyKey: \"displayString\",\n  typeAheadEnabled: true,\n  focusItemOnMount: false,\n  managedClasses: {},\n  selectOnFocus: true\n};\n/**\n * returns the first selectable item in the provided array of children\n */\n\nListbox.getFirstValidOptionInRange = function (startIndex, endIndex, childrenAsArray, increment) {\n  for (var i = startIndex; i !== endIndex + increment; i = i + increment) {\n    var thisOption = childrenAsArray[i];\n\n    if (Listbox.isValidSelectedItem(thisOption)) {\n      return thisOption;\n    }\n\n    return null;\n  }\n};\n/**\n * returns all the selectable items in the provided array of children\n */\n\n\nListbox.getValidOptions = function (childrenAsArray) {\n  return childrenAsArray.filter(function (itemNode) {\n    return Listbox.isValidSelectedItem(itemNode);\n  });\n};\n\nListbox.valuePropertyKey = \"value\";\nListbox.idPropertyKey = \"id\";\nListbox.displayStringPropertyKey = \"displayString\";\nListbox.disabledPropertyKey = \"disabled\";\nexport default Listbox;\nexport { ListboxContext };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/listbox/listbox.js"],"names":["Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnd","keyCodeEnter","keyCodeEscape","keyCodeHome","keyCodeSpace","keyCodeTab","startsWith","canUseDOM","inRange","isEqual","React","DisplayNamePrefix","ListboxContext","Listbox","props","handledProps","children","defaultSelection","disabled","labelledBy","managedClasses","multiselectable","onItemInvoked","onSelectedItemsChanged","selectedItems","typeAheadEnabled","typeAheadPropertyKey","focusItemOnMount","selectOnFocus","rootElement","createRef","typeAheadString","shiftRangeSelectStartIndex","renderChild","child","index","cloneElement","tabIndex","state","focusIndex","isFocusableElement","element","HTMLElement","getAttribute","isDisabledElement","setInitialFocus","selection","length","getItemIndexById","id","domChildren","findIndex","setFocus","setState","getInitialSelection","initialSelection","undefined","getListboxItemDataFromIds","slice","listboxItemfocused","item","event","target","currentTarget","indexOf","blur","focussedItemId","updateSelection","handleMenuKeyDown","onKeyDown","defaultPrevented","focusItemId","keyCode","shiftKey","itemProps","getItemPropsById","toggleItem","preventDefault","itemData","ctrlKey","selectRange","key","processTypeAhead","e","clearTimeout","typeAheadTimer","toLowerCase","matchIndex","Children","toArray","some","setTimeout","typeAheadTimerExpired","listboxItemInvoked","itemIndex","type","culledSelection","filter","listboxItem","newSelectedItems","concat","startIndex","endIndex","childrenInRange","map","newSelection","validatedSelection","validateSelection","createElement","Object","assign","unhandledProps","ref","role","className","generateClassNames","Provider","value","listboxSelectedItems","listboxItemFocused","listboxMultiselectable","renderChildren","prevProps","updatedSelection","listbox","listbox__disabled","current","Array","from","adjustment","focus","selectedIds","itemId","childrenAsArray","idPropertyKey","itemNode","disabledPropertyKey","valuePropertyKey","matchNode","find","getNodeById","items","validSelection","isValidSelectedItem","displayName","defaultProps","getFirstValidOptionInRange","increment","i","thisOption","getValidOptions","displayStringPropertyKey"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeEnter, keyCodeEscape, keyCodeHome, keyCodeSpace, keyCodeTab, startsWith, } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, isEqual } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ListboxContext } from \"./listbox-context\";\nclass Listbox extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            children: void 0,\n            defaultSelection: void 0,\n            disabled: void 0,\n            labelledBy: void 0,\n            managedClasses: void 0,\n            multiselectable: void 0,\n            onItemInvoked: void 0,\n            onSelectedItemsChanged: void 0,\n            selectedItems: void 0,\n            typeAheadEnabled: void 0,\n            typeAheadPropertyKey: void 0,\n            focusItemOnMount: void 0,\n            selectOnFocus: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.typeAheadString = \"\";\n        this.shiftRangeSelectStartIndex = -1;\n        /**\n         * Render a single child\n         */\n        this.renderChild = (child, index) => {\n            return React.cloneElement(child, {\n                tabIndex: index === this.state.focusIndex ? 0 : -1,\n            });\n        };\n        /**\n         * Determines if a given element should be focusable by the menu\n         */\n        this.isFocusableElement = (element) => {\n            return (element instanceof HTMLElement &&\n                element.getAttribute(\"role\") === \"option\" &&\n                !this.isDisabledElement(element) &&\n                !this.props.disabled);\n        };\n        /**\n         * Determines if a given element is disabled\n         */\n        this.isDisabledElement = (element) => {\n            return (element instanceof HTMLElement &&\n                element.getAttribute(\"aria-disabled\") === \"true\");\n        };\n        /**\n         * sets focus state and selection when component is initially mounted\n         * or when default selection changes\n         */\n        this.setInitialFocus = (selection) => {\n            let focusIndex = -1;\n            focusIndex =\n                selection.length > 0\n                    ? Listbox.getItemIndexById(selection[0].id, this.props.children)\n                    : this.domChildren().findIndex(this.isFocusableElement);\n            if (focusIndex !== -1) {\n                if (this.props.focusItemOnMount) {\n                    this.setFocus(focusIndex, +1);\n                }\n                this.setState({\n                    focusIndex,\n                });\n            }\n        };\n        /**\n         * gets the initial selection state based on props\n         */\n        this.getInitialSelection = () => {\n            let initialSelection;\n            if (this.props.selectedItems !== undefined) {\n                initialSelection = Listbox.getListboxItemDataFromIds(this.props.selectedItems, this.props.children);\n            }\n            else {\n                initialSelection = Listbox.getListboxItemDataFromIds(this.props.defaultSelection, this.props.children);\n            }\n            if (!this.props.multiselectable && initialSelection.length > 1) {\n                initialSelection = initialSelection.slice(0, 1);\n            }\n            return initialSelection;\n        };\n        /**\n         * Function called by child select options when they have been focused\n         */\n        this.listboxItemfocused = (item, event) => {\n            if (this.props.disabled) {\n                return;\n            }\n            const target = event.currentTarget;\n            const focusIndex = this.domChildren().indexOf(target);\n            if (this.isDisabledElement(target)) {\n                target.blur();\n                return;\n            }\n            this.setState({\n                focusIndex,\n                focussedItemId: item.id,\n            });\n            if (!this.props.multiselectable && this.props.selectOnFocus) {\n                this.updateSelection([item]);\n            }\n        };\n        /**\n         * Handle the keydown event of the root menu\n         */\n        this.handleMenuKeyDown = (event) => {\n            if (typeof this.props.onKeyDown === \"function\") {\n                this.props.onKeyDown(event);\n            }\n            if (event.defaultPrevented || this.props.disabled) {\n                return;\n            }\n            let focusItemId;\n            switch (event.keyCode) {\n                case keyCodeEscape:\n                case keyCodeEnter:\n                case keyCodeSpace:\n                case keyCodeTab:\n                    return;\n                case keyCodeArrowDown:\n                case keyCodeArrowRight:\n                    focusItemId = this.setFocus(this.state.focusIndex + 1, 1);\n                    if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n                        const itemProps = Listbox.getItemPropsById(focusItemId, this.props.children);\n                        if (itemProps !== null) {\n                            this.toggleItem(itemProps);\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                case keyCodeArrowUp:\n                case keyCodeArrowLeft:\n                    focusItemId = this.setFocus(this.state.focusIndex - 1, -1);\n                    if (this.props.multiselectable && event.shiftKey && focusItemId !== \"\") {\n                        const itemData = Listbox.getItemPropsById(focusItemId, this.props.children);\n                        if (itemData !== null) {\n                            this.toggleItem(itemData);\n                        }\n                    }\n                    event.preventDefault();\n                    break;\n                case keyCodeEnd:\n                    if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n                        this.selectRange(this.state.focusIndex, this.domChildren().length - 1);\n                    }\n                    this.setFocus(this.domChildren().length - 1, -1);\n                    break;\n                case keyCodeHome:\n                    if (this.props.multiselectable && event.shiftKey && event.ctrlKey) {\n                        this.selectRange(0, this.state.focusIndex);\n                    }\n                    this.setFocus(0, 1);\n                    break;\n                default:\n                    if (event.key === \"A\") {\n                        this.selectRange(0, this.domChildren().length);\n                    }\n                    else if (!event.ctrlKey && this.props.typeAheadEnabled) {\n                        this.processTypeAhead(event);\n                    }\n            }\n        };\n        /**\n         * Sets focus based on characters typed\n         */\n        this.processTypeAhead = (e) => {\n            clearTimeout(this.typeAheadTimer);\n            this.typeAheadString = this.typeAheadString + e.key.toLowerCase();\n            let matchIndex = -1;\n            const children = React.Children.toArray(this.props.children);\n            children.some((child, index) => {\n                if (child.props[this.props.typeAheadPropertyKey] === undefined) {\n                    return false;\n                }\n                if (startsWith(child.props[this.props.typeAheadPropertyKey].toLowerCase(), this.typeAheadString)) {\n                    matchIndex = index;\n                    return true;\n                }\n            });\n            if (matchIndex !== -1) {\n                this.typeAheadTimer = setTimeout(() => {\n                    this.typeAheadTimerExpired();\n                }, 1000);\n                this.setFocus(matchIndex, 1);\n            }\n            else {\n                this.typeAheadString = \"\";\n            }\n        };\n        /**\n         * clears the type ahead buffer after specified time of no typing\n         */\n        this.typeAheadTimerExpired = () => {\n            this.typeAheadString = \"\";\n            clearTimeout(this.typeAheadTimer);\n        };\n        /**\n         * Function called by child items when they have been invoked\n         */\n        this.listboxItemInvoked = (item, event) => {\n            if (this.props.disabled) {\n                return;\n            }\n            if (typeof this.props.onItemInvoked === \"function\") {\n                this.props.onItemInvoked(item);\n            }\n            const target = event.currentTarget;\n            const itemIndex = this.domChildren().indexOf(target);\n            if (this.props.multiselectable && event.type === \"click\") {\n                if (!event.shiftKey || this.shiftRangeSelectStartIndex === -1) {\n                    this.shiftRangeSelectStartIndex = itemIndex;\n                }\n                if (event.ctrlKey) {\n                    this.toggleItem(item);\n                }\n                else if (event.shiftKey) {\n                    this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n                }\n                else {\n                    this.updateSelection([item]);\n                }\n            }\n            else if (this.props.multiselectable && event.type === \"keydown\") {\n                if (event.shiftKey) {\n                    this.selectRange(this.shiftRangeSelectStartIndex, itemIndex);\n                }\n                else {\n                    this.toggleItem(item);\n                }\n            }\n            else {\n                this.updateSelection([item]);\n            }\n        };\n        /**\n         * Toggle the selection state of the item\n         */\n        this.toggleItem = (item) => {\n            const culledSelection = this.state.selectedItems.filter((listboxItem) => {\n                return listboxItem.id !== item.id;\n            });\n            if (culledSelection.length < this.state.selectedItems.length) {\n                this.updateSelection(culledSelection);\n            }\n            else {\n                const newSelectedItems = this.state.selectedItems.concat([\n                    item,\n                ]);\n                this.updateSelection(newSelectedItems);\n            }\n        };\n        /**\n         * Select a range of items\n         */\n        this.selectRange = (startIndex, endIndex) => {\n            const children = React.Children.toArray(this.props.children);\n            const childrenInRange = children.slice(startIndex >= endIndex ? endIndex : startIndex, startIndex >= endIndex ? startIndex + 1 : endIndex + 1);\n            const newSelectedItems = childrenInRange.map((child) => {\n                return child.props;\n            });\n            this.updateSelection(newSelectedItems);\n        };\n        /**\n         * Updates selection state (should be the only place this is done outside of initialization)\n         */\n        this.updateSelection = (newSelection) => {\n            const validatedSelection = Listbox.validateSelection(newSelection, this.props.children);\n            if (isEqual(validatedSelection, this.state.selectedItems)) {\n                return;\n            }\n            if (this.props.selectedItems === undefined) {\n                this.setState({\n                    selectedItems: validatedSelection,\n                });\n            }\n            if (this.props.onSelectedItemsChanged) {\n                this.props.onSelectedItemsChanged(validatedSelection);\n            }\n        };\n        this.state = {\n            focusIndex: -1,\n            focussedItemId: \"\",\n            selectedItems: this.getInitialSelection(),\n        };\n    }\n    /**\n     * converts an array of item id's to an array of ListboxItemProps objects populated by data\n     * extracted from the provided children based on id match\n     */\n    static getListboxItemDataFromIds(selectedIds, children) {\n        const selectedItems = Listbox.validateSelection(selectedIds, children);\n        return selectedItems;\n    }\n    /**\n     * Gets the index of an item from it's id by examining children props\n     */\n    static getItemIndexById(itemId, children) {\n        const childrenAsArray = React.Children.toArray(children);\n        return childrenAsArray.findIndex((child) => {\n            if (child.props[Listbox.idPropertyKey] === undefined ||\n                child.props[Listbox.idPropertyKey] !== itemId) {\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\n     * tests whether a React.ReactElement is a valid item to select\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n    static isValidSelectedItem(itemNode) {\n        if (itemNode === undefined ||\n            itemNode.props[Listbox.disabledPropertyKey] === true ||\n            itemNode.props[Listbox.valuePropertyKey] === undefined) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Gets a child node from it's id by examining provided children\n     */\n    static getNodeById(itemId, children) {\n        const childrenAsArray = React.Children.toArray(children);\n        const matchNode = childrenAsArray.find((child) => {\n            if (child.props[Listbox.idPropertyKey] === undefined ||\n                child.props[Listbox.idPropertyKey] !== itemId) {\n                return false;\n            }\n            return true;\n        });\n        return matchNode;\n    }\n    /**\n     * Gets the listItemData of an item from it's id by examining children props\n     */\n    static getItemPropsById(itemId, children) {\n        const matchNode = this.getNodeById(itemId, children);\n        if (matchNode !== undefined) {\n            return matchNode.props;\n        }\n        return null;\n    }\n    /**\n     * validates selected options against child props and returns only the valid ones\n     * (ie. such an option id exists and the option is not disabled),\n     * the values of the returned data objects are updated to reflect values of child object\n     * with matching id.\n     */\n    static validateSelection(items, children) {\n        const validSelection = items\n            .map((item) => {\n            let itemId = \"\";\n            if (typeof item === \"string\") {\n                itemId = item;\n            }\n            else {\n                itemId = item.id;\n            }\n            const itemNode = this.getNodeById(itemId, children);\n            if (!Listbox.isValidSelectedItem(itemNode)) {\n                return null;\n            }\n            return itemNode.props;\n        })\n            .filter((listboxItem) => {\n            return listboxItem !== null;\n        });\n        return validSelection;\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, role: \"listbox\", \"aria-disabled\": this.props.disabled || null, \"aria-multiselectable\": this.props.multiselectable || null, \"aria-activedescendant\": this.state.focussedItemId, \"aria-labelledby\": this.props.labelledBy || null, className: this.generateClassNames(), onKeyDown: this.handleMenuKeyDown }),\n            React.createElement(ListboxContext.Provider, { value: {\n                    listboxSelectedItems: this.state.selectedItems,\n                    listboxItemFocused: this.listboxItemfocused,\n                    listboxItemInvoked: this.listboxItemInvoked,\n                    listboxMultiselectable: this.props.multiselectable,\n                } }, this.renderChildren())));\n    }\n    componentDidUpdate(prevProps) {\n        // if default selection changes between renders we treat as a effective reset\n        // of selection and focus in uncontrolled mode\n        if (!isEqual(prevProps.defaultSelection, this.props.defaultSelection) &&\n            this.props.selectedItems === undefined) {\n            const updatedSelection = this.getInitialSelection();\n            this.updateSelection(updatedSelection);\n            this.setInitialFocus(updatedSelection);\n        }\n    }\n    componentDidMount() {\n        this.setInitialFocus(this.state.selectedItems);\n    }\n    componentWillUnmount() {\n        clearTimeout(this.typeAheadTimer);\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        const { listbox, listbox__disabled, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(listbox, [listbox__disabled, this.props.disabled]));\n    }\n    /**\n     * Render all child elements\n     */\n    renderChildren() {\n        return React.Children.map(this.props.children, this.renderChild);\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n    domChildren() {\n        return canUseDOM() && this.rootElement.current instanceof HTMLElement\n            ? Array.from(this.rootElement.current.children)\n            : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.  Returns the focussed item id or an empty string\n     * if none found\n     */\n    setFocus(focusIndex, adjustment) {\n        const children = this.domChildren();\n        let focusItemId = \"\";\n        while (inRange(focusIndex, children.length)) {\n            const child = children[focusIndex];\n            focusItemId = child.id;\n            if (this.isFocusableElement(child)) {\n                if (!this.props.disabled) {\n                    child.focus();\n                }\n                break;\n            }\n            focusIndex += adjustment;\n        }\n        return focusItemId;\n    }\n}\nListbox.displayName = `${DisplayNamePrefix}Listbox`;\nListbox.defaultProps = {\n    multiselectable: false,\n    defaultSelection: [],\n    typeAheadPropertyKey: \"displayString\",\n    typeAheadEnabled: true,\n    focusItemOnMount: false,\n    managedClasses: {},\n    selectOnFocus: true,\n};\n/**\n * returns the first selectable item in the provided array of children\n */\nListbox.getFirstValidOptionInRange = (startIndex, endIndex, childrenAsArray, increment) => {\n    for (let i = startIndex; i !== endIndex + increment; i = i + increment) {\n        const thisOption = childrenAsArray[i];\n        if (Listbox.isValidSelectedItem(thisOption)) {\n            return thisOption;\n        }\n        return null;\n    }\n};\n/**\n * returns all the selectable items in the provided array of children\n */\nListbox.getValidOptions = (childrenAsArray) => {\n    return childrenAsArray.filter((itemNode) => {\n        return Listbox.isValidSelectedItem(itemNode);\n    });\n};\nListbox.valuePropertyKey = \"value\";\nListbox.idPropertyKey = \"id\";\nListbox.displayStringPropertyKey = \"displayString\";\nListbox.disabledPropertyKey = \"disabled\";\nexport default Listbox;\nexport { ListboxContext };\n"]},"metadata":{},"sourceType":"module"}