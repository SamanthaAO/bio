{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { get } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { CheckboxSlot } from \"./checkbox.props\";\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Checkbox, _Foundation);\n\n  /**\n   * Define constructor\n   */\n  function Checkbox(props) {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkbox).call(this, props));\n    /**\n     * Handled props instantiation\n     */\n\n    _this.handledProps = {\n      checked: void 0,\n      disabled: void 0,\n      inputId: void 0,\n      indeterminate: void 0,\n      label: void 0,\n      managedClasses: void 0,\n      name: void 0,\n      onChange: void 0,\n      value: void 0\n    };\n    /**\n     * Handles onChange as a controlled component\n     */\n\n    _this.handleCheckboxChange = function (e) {\n      if (typeof _this.props.checked !== \"boolean\") {\n        _this.setState({\n          checked: !_this.state.checked\n        });\n      }\n\n      if (typeof _this.props.onChange === \"function\") {\n        _this.props.onChange(e);\n      }\n    };\n\n    _this.state = {\n      checked: _this.props.checked || false\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  _createClass(Checkbox, [{\n    key: \"componentDidMount\",\n\n    /**\n     * React life-cycle method\n     */\n    value: function componentDidMount() {\n      this.applyIndeterminateState();\n    }\n    /**\n     * React life-cycle method\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.applyIndeterminateState();\n    }\n    /**\n     * Renders the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$managedCl = this.props.managedClasses,\n          checkbox_input = _this$props$managedCl.checkbox_input,\n          checkbox_stateIndicator = _this$props$managedCl.checkbox_stateIndicator;\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames()\n      }), React.createElement(\"input\", {\n        className: classNames(checkbox_input),\n        id: this.props.inputId,\n        name: this.props.name,\n        type: \"checkbox\",\n        ref: this.inputRef,\n        onChange: this.handleCheckboxChange,\n        disabled: this.props.disabled || null,\n        checked: this.state.checked,\n        value: this.props.value\n      }), React.createElement(\"span\", {\n        className: classNames(checkbox_stateIndicator)\n      }), this.renderLabelBySlot(), this.renderLabel());\n    }\n    /**\n     * Generates class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl2 = this.props.managedClasses,\n          checkbox = _this$props$managedCl2.checkbox,\n          checkbox__disabled = _this$props$managedCl2.checkbox__disabled,\n          checkbox__checked = _this$props$managedCl2.checkbox__checked,\n          checkbox__indeterminate = _this$props$managedCl2.checkbox__indeterminate;\n      return _get(_getPrototypeOf(Checkbox.prototype), \"generateClassNames\", this).call(this, classNames(checkbox, [checkbox__disabled, this.props.disabled], [checkbox__checked, this.state.checked], [checkbox__indeterminate, this.props.indeterminate]));\n    }\n    /**\n     * @deprecated - remove this method in next major version\n     * Render label if it exists\n     */\n\n  }, {\n    key: \"renderLabelBySlot\",\n    value: function renderLabelBySlot() {\n      var _this2 = this;\n\n      return React.Children.map(this.withSlot(CheckboxSlot.label), function (label) {\n        var className = _this2.props.managedClasses.checkbox_label;\n\n        if (typeof className !== \"string\") {\n          return label;\n        }\n\n        var labelClassName = get(label, \"props.className\");\n\n        if (typeof labelClassName === \"string\") {\n          className = \"\".concat(labelClassName, \" \").concat(className);\n        }\n\n        return React.cloneElement(label, {\n          className: className\n        });\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var checkbox_label = this.props.managedClasses.checkbox_label;\n\n      if (typeof this.props.label === \"function\") {\n        return this.props.label(classNames(checkbox_label));\n      }\n    }\n    /**\n     * Apply indeterminate state to items that are indeterminate.\n     * This method should be called after render because it relies on element references.\n     */\n\n  }, {\n    key: \"applyIndeterminateState\",\n    value: function applyIndeterminateState() {\n      if (this.props.indeterminate && this.inputRef.current) {\n        this.inputRef.current.indeterminate = this.props.indeterminate;\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (typeof nextProps.checked === \"boolean\" && nextProps.checked !== prevState.checked) {\n        return {\n          checked: nextProps.checked\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Checkbox;\n}(Foundation);\n\nCheckbox.displayName = \"\".concat(DisplayNamePrefix, \"Checkbox\");\nCheckbox.defaultProps = {\n  managedClasses: {}\n};\nexport default Checkbox;\nexport * from \"./checkbox.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/checkbox/checkbox.js"],"names":["Foundation","classNames","get","React","DisplayNamePrefix","CheckboxSlot","Checkbox","props","handledProps","checked","disabled","inputId","indeterminate","label","managedClasses","name","onChange","value","handleCheckboxChange","e","setState","state","inputRef","createRef","applyIndeterminateState","checkbox_input","checkbox_stateIndicator","createElement","Object","assign","unhandledProps","className","generateClassNames","id","type","ref","renderLabelBySlot","renderLabel","checkbox","checkbox__disabled","checkbox__checked","checkbox__indeterminate","Children","map","withSlot","checkbox_label","labelClassName","cloneElement","current","nextProps","prevState","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { get } from \"lodash-es\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { CheckboxSlot, } from \"./checkbox.props\";\nclass Checkbox extends Foundation {\n    /**\n     * Define constructor\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Handled props instantiation\n         */\n        this.handledProps = {\n            checked: void 0,\n            disabled: void 0,\n            inputId: void 0,\n            indeterminate: void 0,\n            label: void 0,\n            managedClasses: void 0,\n            name: void 0,\n            onChange: void 0,\n            value: void 0,\n        };\n        /**\n         * Handles onChange as a controlled component\n         */\n        this.handleCheckboxChange = (e) => {\n            if (typeof this.props.checked !== \"boolean\") {\n                this.setState({ checked: !this.state.checked });\n            }\n            if (typeof this.props.onChange === \"function\") {\n                this.props.onChange(e);\n            }\n        };\n        this.state = {\n            checked: this.props.checked || false,\n        };\n        this.inputRef = React.createRef();\n    }\n    /**\n     * React life-cycle method\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (typeof nextProps.checked === \"boolean\" &&\n            nextProps.checked !== prevState.checked) {\n            return {\n                checked: nextProps.checked,\n            };\n        }\n        return null;\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidMount() {\n        this.applyIndeterminateState();\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidUpdate() {\n        this.applyIndeterminateState();\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const { checkbox_input, checkbox_stateIndicator, } = this.props.managedClasses;\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames() }),\n            React.createElement(\"input\", { className: classNames(checkbox_input), id: this.props.inputId, name: this.props.name, type: \"checkbox\", ref: this.inputRef, onChange: this.handleCheckboxChange, disabled: this.props.disabled || null, checked: this.state.checked, value: this.props.value }),\n            React.createElement(\"span\", { className: classNames(checkbox_stateIndicator) }),\n            this.renderLabelBySlot(),\n            this.renderLabel()));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { checkbox, checkbox__disabled, checkbox__checked, checkbox__indeterminate, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(checkbox, [checkbox__disabled, this.props.disabled], [checkbox__checked, this.state.checked], [checkbox__indeterminate, this.props.indeterminate]));\n    }\n    /**\n     * @deprecated - remove this method in next major version\n     * Render label if it exists\n     */\n    renderLabelBySlot() {\n        return React.Children.map(this.withSlot(CheckboxSlot.label), (label) => {\n            let className = this.props.managedClasses.checkbox_label;\n            if (typeof className !== \"string\") {\n                return label;\n            }\n            const labelClassName = get(label, \"props.className\");\n            if (typeof labelClassName === \"string\") {\n                className = `${labelClassName} ${className}`;\n            }\n            return React.cloneElement(label, { className });\n        });\n    }\n    renderLabel() {\n        const { checkbox_label } = this.props.managedClasses;\n        if (typeof this.props.label === \"function\") {\n            return this.props.label(classNames(checkbox_label));\n        }\n    }\n    /**\n     * Apply indeterminate state to items that are indeterminate.\n     * This method should be called after render because it relies on element references.\n     */\n    applyIndeterminateState() {\n        if (this.props.indeterminate && this.inputRef.current) {\n            this.inputRef.current.indeterminate = this.props.indeterminate;\n        }\n    }\n}\nCheckbox.displayName = `${DisplayNamePrefix}Checkbox`;\nCheckbox.defaultProps = {\n    managedClasses: {},\n};\nexport default Checkbox;\nexport * from \"./checkbox.props\";\n"]},"metadata":{},"sourceType":"module"}