{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\n// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\"; // This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\n\nexport var ColorHSV =\n/*#__PURE__*/\nfunction () {\n  _createClass(ColorHSV, null, [{\n    key: \"fromObject\",\n    value: function fromObject(data) {\n      if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {\n        return new ColorHSV(data.h, data.s, data.v);\n      }\n\n      return null;\n    }\n  }]);\n\n  function ColorHSV(hue, sat, val) {\n    _classCallCheck(this, ColorHSV);\n\n    this.h = hue;\n    this.s = sat;\n    this.v = val;\n  }\n\n  _createClass(ColorHSV, [{\n    key: \"equalValue\",\n    value: function equalValue(rhs) {\n      return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;\n    }\n  }, {\n    key: \"roundToPrecision\",\n    value: function roundToPrecision(precision) {\n      return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        h: this.h,\n        s: this.s,\n        v: this.v\n      };\n    }\n  }]);\n\n  return ColorHSV;\n}();","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-hsv.js"],"names":["roundToPrecisionSmall","ColorHSV","data","isNaN","h","s","v","hue","sat","val","rhs","precision"],"mappings":";;AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC,C,CACA;;AACA,WAAaC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA,+BACsBC,IADtB,EAC4B;AACpB,UAAIA,IAAI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,CAAN,CAAd,IAA0B,CAACD,KAAK,CAACD,IAAI,CAACG,CAAN,CAAhC,IAA4C,CAACF,KAAK,CAACD,IAAI,CAACI,CAAN,CAAtD,EAAgE;AAC5D,eAAO,IAAIL,QAAJ,CAAaC,IAAI,CAACE,CAAlB,EAAqBF,IAAI,CAACG,CAA1B,EAA6BH,IAAI,CAACI,CAAlC,CAAP;AACH;;AACD,aAAO,IAAP;AACH;AANL;;AAOI,oBAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;AAAA;;AACvB,SAAKL,CAAL,GAASG,GAAT;AACA,SAAKF,CAAL,GAASG,GAAT;AACA,SAAKF,CAAL,GAASG,GAAT;AACH;;AAXL;AAAA;AAAA,+BAYeC,GAZf,EAYoB;AACZ,aAAO,KAAKN,CAAL,KAAWM,GAAG,CAACN,CAAf,IAAoB,KAAKC,CAAL,KAAWK,GAAG,CAACL,CAAnC,IAAwC,KAAKC,CAAL,KAAWI,GAAG,CAACJ,CAA9D;AACH;AAdL;AAAA;AAAA,qCAeqBK,SAfrB,EAegC;AACxB,aAAO,IAAIV,QAAJ,CAAaD,qBAAqB,CAAC,KAAKI,CAAN,EAASO,SAAT,CAAlC,EAAuDX,qBAAqB,CAAC,KAAKK,CAAN,EAASM,SAAT,CAA5E,EAAiGX,qBAAqB,CAAC,KAAKM,CAAN,EAASK,SAAT,CAAtH,CAAP;AACH;AAjBL;AAAA;AAAA,+BAkBe;AACP,aAAO;AAAEP,QAAAA,CAAC,EAAE,KAAKA,CAAV;AAAaC,QAAAA,CAAC,EAAE,KAAKA,CAArB;AAAwBC,QAAAA,CAAC,EAAE,KAAKA;AAAhC,OAAP;AACH;AApBL;;AAAA;AAAA","sourcesContent":["// tslint:disable:member-ordering\nimport { roundToPrecisionSmall } from \"./math-utilities\";\n// This uses Hue values in \"degree\" format. So expect a range of [0,360]. Some other implementations instead uses radians or a normalized Hue with range [0,1]. Be aware of this when checking values or using other libraries.\nexport class ColorHSV {\n    static fromObject(data) {\n        if (data && !isNaN(data.h) && !isNaN(data.s) && !isNaN(data.v)) {\n            return new ColorHSV(data.h, data.s, data.v);\n        }\n        return null;\n    }\n    constructor(hue, sat, val) {\n        this.h = hue;\n        this.s = sat;\n        this.v = val;\n    }\n    equalValue(rhs) {\n        return this.h === rhs.h && this.s === rhs.s && this.v === rhs.v;\n    }\n    roundToPrecision(precision) {\n        return new ColorHSV(roundToPrecisionSmall(this.h, precision), roundToPrecisionSmall(this.s, precision), roundToPrecisionSmall(this.v, precision));\n    }\n    toObject() {\n        return { h: this.h, s: this.s, v: this.v };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}