{"ast":null,"code":"import _defineProperty from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { identifyBreakpoint } from \"../utilities/breakpoints\";\nimport { canUseDOM } from \"exenv-es6\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nexport var Column =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Column, _Foundation);\n\n  function Column() {\n    var _this;\n\n    _classCallCheck(this, Column);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Column).apply(this, arguments));\n    _this.handledProps = {\n      managedClasses: void 0,\n      span: void 0,\n      position: void 0,\n      row: void 0,\n      order: void 0,\n      gutter: void 0,\n      cssGridPropertyName: void 0,\n      defaultBreakpoint: void 0\n    };\n    /**\n     * Force the component to update\n     */\n\n    _this.update = function () {\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n  /**\n   * Component has mounted\n   */\n\n\n  _createClass(Column, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.shouldTrackBreakpoints(this.props)) {\n        BreakpointTracker.subscribe(this.update);\n      }\n    }\n    /**\n     * Component will be unmounted\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps) {\n      if (this.shouldTrackBreakpoints(this.props) && !this.shouldTrackBreakpoints(previousProps)) {\n        // If we should be tracking breakpoints but previously weren't, subscribe to changes\n        BreakpointTracker.subscribe(this.update);\n      } else if (!this.shouldTrackBreakpoints(this.props) && this.shouldTrackBreakpoints(previousProps)) {\n        // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n        BreakpointTracker.unsubscribe(this.update);\n      }\n    }\n    /**\n     * Render the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames(),\n        style: this.generateStyleAttribute()\n      }), this.props.children);\n    }\n    /**\n     * Generates the column classes\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      return _get(_getPrototypeOf(Column.prototype), \"generateClassNames\", this).call(this, classNames(this.props.managedClasses.column));\n    }\n    /**\n     * Gets a value from an array where the index retrieved is either the current break-point\n     * or the nearest preceding break-point if no entry exists for the current break-point\n     */\n\n  }, {\n    key: \"getValueByBreakpoint\",\n    value: function getValueByBreakpoint(breakpointSet) {\n      var breakpoint = canUseDOM() ? identifyBreakpoint(window.innerWidth) : this.props.defaultBreakpoint;\n      return breakpointSet.slice(0, breakpoint + 1).pop();\n    }\n    /**\n     * Generates the column-span value\n     */\n\n  }, {\n    key: \"generateColumnSpan\",\n    value: function generateColumnSpan() {\n      if (typeof this.props.span === \"number\") {\n        return this.props.span;\n      }\n\n      if (!Array.isArray(this.props.span)) {\n        return Column.defaultProps.span;\n      }\n\n      return this.getValueByBreakpoint(this.props.span);\n    }\n    /**\n     * Generates the position of a column\n     */\n\n  }, {\n    key: \"generateColumnPosition\",\n    value: function generateColumnPosition() {\n      if (typeof this.props.position === \"number\") {\n        return this.props.position;\n      } else if (Array.isArray(this.props.position)) {\n        return this.getValueByBreakpoint(this.props.position);\n      }\n\n      return null;\n    }\n    /**\n     * Generates the row that a column should be placed in\n     */\n\n  }, {\n    key: \"generateRow\",\n    value: function generateRow() {\n      if (typeof this.props.row === \"number\") {\n        return this.props.row.toString();\n      } else if (Array.isArray(this.props.row)) {\n        return this.getValueByBreakpoint(this.props.row).toString();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"augmentMsGrid\",\n    value: function augmentMsGrid(value) {\n      if (this.props.gutter === 0 || value === null) {\n        return value;\n      }\n\n      return value === 1 ? 1 : value * 2 - 1;\n    }\n    /**\n     * Generates the style attribute of the column\n     */\n\n  }, {\n    key: \"generateStyleAttribute\",\n    value: function generateStyleAttribute() {\n      var _ref;\n\n      var position = this.generateColumnPosition();\n      var row = this.generateRow();\n      var span = this.generateColumnSpan();\n      var gridColumnValue = [position, \"span \".concat(span)].filter(function (item) {\n        return Boolean(item);\n      }).join(\" / \");\n      var order = Array.isArray(this.props.order) ? this.getValueByBreakpoint(this.props.order) : this.props.order;\n      var canUseCssGridStyle = this.props.cssGridPropertyName === \"grid\" ? true : this.props.cssGridPropertyName === \"-ms-grid\" ? false : canUseCssGrid();\n      var gridStyles = canUseCssGridStyle ? {\n        gridColumn: gridColumnValue,\n        gridRowStart: row\n      } : (_ref = {}, _defineProperty(_ref, \"msGridColumn\", this.augmentMsGrid(position)), _defineProperty(_ref, \"msGridColumnSpan\", this.augmentMsGrid(span)), _defineProperty(_ref, \"msGridRow\", row), _ref);\n      return Object.assign({}, gridStyles, {\n        order: typeof order === \"number\" ? order : null,\n        // Fixes issue found in firefox where columns that have overflow\n        // or full width content cause scroll bars\n        minWidth: \"0\"\n      }, this.unhandledProps().style);\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n\n  }, {\n    key: \"shouldTrackBreakpoints\",\n    value: function shouldTrackBreakpoints(props) {\n      return Array.isArray(props.span) && props.span.length > 1 || Array.isArray(props.position) && props.position.length > 1;\n    }\n  }]);\n\n  return Column;\n}(Foundation);\nColumn.displayName = \"Column\";\n/**\n * Define default props\n */\n\nColumn.defaultProps = {\n  managedClasses: {},\n  span: 12,\n  defaultBreakpoint: 0\n};","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/column/column.js"],"names":["React","BreakpointTracker","identifyBreakpoint","canUseDOM","Foundation","canUseCssGrid","classNames","Column","arguments","handledProps","managedClasses","span","position","row","order","gutter","cssGridPropertyName","defaultBreakpoint","update","forceUpdate","shouldTrackBreakpoints","props","subscribe","unsubscribe","previousProps","createElement","Object","assign","unhandledProps","className","generateClassNames","style","generateStyleAttribute","children","column","breakpointSet","breakpoint","window","innerWidth","slice","pop","Array","isArray","defaultProps","getValueByBreakpoint","toString","value","generateColumnPosition","generateRow","generateColumnSpan","gridColumnValue","filter","item","Boolean","join","canUseCssGridStyle","gridStyles","gridColumn","gridRowStart","augmentMsGrid","minWidth","length","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { identifyBreakpoint } from \"../utilities/breakpoints\";\nimport { canUseDOM } from \"exenv-es6\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nexport class Column extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            managedClasses: void 0,\n            span: void 0,\n            position: void 0,\n            row: void 0,\n            order: void 0,\n            gutter: void 0,\n            cssGridPropertyName: void 0,\n            defaultBreakpoint: void 0,\n        };\n        /**\n         * Force the component to update\n         */\n        this.update = () => {\n            this.forceUpdate();\n        };\n    }\n    /**\n     * Component has mounted\n     */\n    componentDidMount() {\n        if (this.shouldTrackBreakpoints(this.props)) {\n            BreakpointTracker.subscribe(this.update);\n        }\n    }\n    /**\n     * Component will be unmounted\n     */\n    componentWillUnmount() {\n        BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n    componentDidUpdate(previousProps) {\n        if (this.shouldTrackBreakpoints(this.props) &&\n            !this.shouldTrackBreakpoints(previousProps)) {\n            // If we should be tracking breakpoints but previously weren't, subscribe to changes\n            BreakpointTracker.subscribe(this.update);\n        }\n        else if (!this.shouldTrackBreakpoints(this.props) &&\n            this.shouldTrackBreakpoints(previousProps)) {\n            // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n            BreakpointTracker.unsubscribe(this.update);\n        }\n    }\n    /**\n     * Render the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: this.generateStyleAttribute() }), this.props.children));\n    }\n    /**\n     * Generates the column classes\n     */\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.column));\n    }\n    /**\n     * Gets a value from an array where the index retrieved is either the current break-point\n     * or the nearest preceding break-point if no entry exists for the current break-point\n     */\n    getValueByBreakpoint(breakpointSet) {\n        const breakpoint = canUseDOM()\n            ? identifyBreakpoint(window.innerWidth)\n            : this.props.defaultBreakpoint;\n        return breakpointSet.slice(0, breakpoint + 1).pop();\n    }\n    /**\n     * Generates the column-span value\n     */\n    generateColumnSpan() {\n        if (typeof this.props.span === \"number\") {\n            return this.props.span;\n        }\n        if (!Array.isArray(this.props.span)) {\n            return Column.defaultProps.span;\n        }\n        return this.getValueByBreakpoint(this.props.span);\n    }\n    /**\n     * Generates the position of a column\n     */\n    generateColumnPosition() {\n        if (typeof this.props.position === \"number\") {\n            return this.props.position;\n        }\n        else if (Array.isArray(this.props.position)) {\n            return this.getValueByBreakpoint(this.props.position);\n        }\n        return null;\n    }\n    /**\n     * Generates the row that a column should be placed in\n     */\n    generateRow() {\n        if (typeof this.props.row === \"number\") {\n            return this.props.row.toString();\n        }\n        else if (Array.isArray(this.props.row)) {\n            return this.getValueByBreakpoint(this.props.row).toString();\n        }\n        return null;\n    }\n    augmentMsGrid(value) {\n        if (this.props.gutter === 0 || value === null) {\n            return value;\n        }\n        return value === 1 ? 1 : value * 2 - 1;\n    }\n    /**\n     * Generates the style attribute of the column\n     */\n    generateStyleAttribute() {\n        const position = this.generateColumnPosition();\n        const row = this.generateRow();\n        const span = this.generateColumnSpan();\n        const gridColumnValue = [position, `span ${span}`]\n            .filter((item) => Boolean(item))\n            .join(\" / \");\n        const order = Array.isArray(this.props.order)\n            ? this.getValueByBreakpoint(this.props.order)\n            : this.props.order;\n        const canUseCssGridStyle = this.props.cssGridPropertyName === \"grid\"\n            ? true\n            : this.props.cssGridPropertyName === \"-ms-grid\"\n                ? false\n                : canUseCssGrid();\n        const gridStyles = canUseCssGridStyle\n            ? {\n                gridColumn: gridColumnValue,\n                gridRowStart: row,\n            }\n            : {\n                [\"msGridColumn\"]: this.augmentMsGrid(position),\n                [\"msGridColumnSpan\"]: this.augmentMsGrid(span),\n                [\"msGridRow\"]: row,\n            };\n        return Object.assign({}, gridStyles, { order: typeof order === \"number\" ? order : null, \n            // Fixes issue found in firefox where columns that have overflow\n            // or full width content cause scroll bars\n            minWidth: \"0\" }, this.unhandledProps().style);\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n    shouldTrackBreakpoints(props) {\n        return ((Array.isArray(props.span) && props.span.length > 1) ||\n            (Array.isArray(props.position) && props.position.length > 1));\n    }\n}\nColumn.displayName = \"Column\";\n/**\n * Define default props\n */\nColumn.defaultProps = {\n    managedClasses: {},\n    span: 12,\n    defaultBreakpoint: 0,\n};\n"]},"metadata":{},"sourceType":"module"}