{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/**\n * The DesignSystemProvider is a react component designed to provide design-system configurations to the\n * JSSManager. The provider accepts a single prop that it will make available to all child components through\n * react contexts. If given a design-language, the JSSManager will make the design-language object available\n * to all JSS rules defined as a function\n */\nimport React from \"react\";\nimport { designSystemContext, Provider } from \"./context\";\nimport { mergeDesignSystem } from \"@microsoft/fast-jss-manager\";\nexport var DesignSystemProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DesignSystemProvider, _React$Component);\n\n  function DesignSystemProvider(props, context) {\n    var _this;\n\n    _classCallCheck(this, DesignSystemProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DesignSystemProvider).call(this, props));\n\n    _this.updateDownstreamDesignSystem();\n\n    return _this;\n  }\n\n  _createClass(DesignSystemProvider, [{\n    key: \"render\",\n    value: function render() {\n      this.updateDownstreamDesignSystem();\n      return React.createElement(Provider, {\n        value: this.downstreamDesignSystem\n      }, this.props.children);\n    }\n    /**\n     * Updates the downstreamDesignSystem if either this.props.designSystem\n     * or this.context has changed\n     */\n\n  }, {\n    key: \"updateDownstreamDesignSystem\",\n    value: function updateDownstreamDesignSystem() {\n      var shouldUpdate = false;\n\n      if (this.upstreamDesignSystem !== this.context) {\n        this.upstreamDesignSystem = this.context;\n        shouldUpdate = true;\n      }\n\n      if (this.designSystemOverrides !== this.props.designSystem) {\n        this.designSystemOverrides = this.props.designSystem;\n        shouldUpdate = true;\n      }\n\n      if (shouldUpdate) {\n        this.downstreamDesignSystem = this.createDesignSystem();\n      }\n    }\n    /**\n     * Merges locally stored context with designSystem props.\n     * Returns a new object\n     */\n\n  }, {\n    key: \"createDesignSystem\",\n    value: function createDesignSystem() {\n      return typeof this.props.designSystemMergingFunction === \"function\" ? this.props.designSystemMergingFunction(this.upstreamDesignSystem, this.designSystemOverrides) : mergeDesignSystem(this.upstreamDesignSystem, this.designSystemOverrides);\n    }\n  }]);\n\n  return DesignSystemProvider;\n}(React.Component);\nDesignSystemProvider.contextType = designSystemContext;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-jss-manager-react/dist/design-system-provider.js"],"names":["React","designSystemContext","Provider","mergeDesignSystem","DesignSystemProvider","props","context","updateDownstreamDesignSystem","createElement","value","downstreamDesignSystem","children","shouldUpdate","upstreamDesignSystem","designSystemOverrides","designSystem","createDesignSystem","designSystemMergingFunction","Component","contextType"],"mappings":";;;;;;AAAA;;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,WAA9C;AACA,SAASC,iBAAT,QAAmC,6BAAnC;AACA,WAAaC,oBAAb;AAAA;AAAA;AAAA;;AACI,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AACxB,8FAAMD,KAAN;;AACA,UAAKE,4BAAL;;AAFwB;AAG3B;;AAJL;AAAA;AAAA,6BAKa;AACL,WAAKA,4BAAL;AACA,aAAQP,KAAK,CAACQ,aAAN,CAAoBN,QAApB,EAA8B;AAAEO,QAAAA,KAAK,EAAE,KAAKC;AAAd,OAA9B,EAAsE,KAAKL,KAAL,CAAWM,QAAjF,CAAR;AACH;AACD;;;;;AATJ;AAAA;AAAA,mDAamC;AAC3B,UAAIC,YAAY,GAAG,KAAnB;;AACA,UAAI,KAAKC,oBAAL,KAA8B,KAAKP,OAAvC,EAAgD;AAC5C,aAAKO,oBAAL,GAA4B,KAAKP,OAAjC;AACAM,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD,UAAI,KAAKE,qBAAL,KAA+B,KAAKT,KAAL,CAAWU,YAA9C,EAA4D;AACxD,aAAKD,qBAAL,GAA6B,KAAKT,KAAL,CAAWU,YAAxC;AACAH,QAAAA,YAAY,GAAG,IAAf;AACH;;AACD,UAAIA,YAAJ,EAAkB;AACd,aAAKF,sBAAL,GAA8B,KAAKM,kBAAL,EAA9B;AACH;AACJ;AACD;;;;;AA3BJ;AAAA;AAAA,yCA+ByB;AACjB,aAAO,OAAO,KAAKX,KAAL,CAAWY,2BAAlB,KAAkD,UAAlD,GACD,KAAKZ,KAAL,CAAWY,2BAAX,CAAuC,KAAKJ,oBAA5C,EAAkE,KAAKC,qBAAvE,CADC,GAEDX,iBAAiB,CAAC,KAAKU,oBAAN,EAA4B,KAAKC,qBAAjC,CAFvB;AAGH;AAnCL;;AAAA;AAAA,EAA0Cd,KAAK,CAACkB,SAAhD;AAqCAd,oBAAoB,CAACe,WAArB,GAAmClB,mBAAnC","sourcesContent":["/**\n * The DesignSystemProvider is a react component designed to provide design-system configurations to the\n * JSSManager. The provider accepts a single prop that it will make available to all child components through\n * react contexts. If given a design-language, the JSSManager will make the design-language object available\n * to all JSS rules defined as a function\n */\nimport React from \"react\";\nimport { designSystemContext, Provider } from \"./context\";\nimport { mergeDesignSystem, } from \"@microsoft/fast-jss-manager\";\nexport class DesignSystemProvider extends React.Component {\n    constructor(props, context) {\n        super(props);\n        this.updateDownstreamDesignSystem();\n    }\n    render() {\n        this.updateDownstreamDesignSystem();\n        return (React.createElement(Provider, { value: this.downstreamDesignSystem }, this.props.children));\n    }\n    /**\n     * Updates the downstreamDesignSystem if either this.props.designSystem\n     * or this.context has changed\n     */\n    updateDownstreamDesignSystem() {\n        let shouldUpdate = false;\n        if (this.upstreamDesignSystem !== this.context) {\n            this.upstreamDesignSystem = this.context;\n            shouldUpdate = true;\n        }\n        if (this.designSystemOverrides !== this.props.designSystem) {\n            this.designSystemOverrides = this.props.designSystem;\n            shouldUpdate = true;\n        }\n        if (shouldUpdate) {\n            this.downstreamDesignSystem = this.createDesignSystem();\n        }\n    }\n    /**\n     * Merges locally stored context with designSystem props.\n     * Returns a new object\n     */\n    createDesignSystem() {\n        return typeof this.props.designSystemMergingFunction === \"function\"\n            ? this.props.designSystemMergingFunction(this.upstreamDesignSystem, this.designSystemOverrides)\n            : mergeDesignSystem(this.upstreamDesignSystem, this.designSystemOverrides);\n    }\n}\nDesignSystemProvider.contextType = designSystemContext;\n"]},"metadata":{},"sourceType":"module"}