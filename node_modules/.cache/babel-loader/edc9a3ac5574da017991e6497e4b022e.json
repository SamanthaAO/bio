{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Progress as BaseProgress, ProgressType } from \"@microsoft/fast-components-react-base\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ProgressSize } from \"./progress.props\";\n\nvar Progress =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Progress, _Foundation);\n\n  function Progress() {\n    var _this;\n\n    _classCallCheck(this, Progress);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Progress).apply(this, arguments));\n    _this.handledProps = {\n      children: void 0,\n      value: void 0,\n      minValue: void 0,\n      maxValue: void 0,\n      managedClasses: void 0,\n      circular: void 0,\n      paused: void 0,\n      size: void 0\n    };\n    return _this;\n  }\n  /**\n   * Renders the component\n   */\n\n\n  _createClass(Progress, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(BaseProgress, Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames(),\n        managedClasses: this.props.managedClasses,\n        value: this.props.value,\n        minValue: this.props.minValue,\n        maxValue: this.props.maxValue\n      }), this.renderProgress());\n    }\n    /**\n     * Create class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          progress = _this$props$managedCl.progress,\n          progress__circular = _this$props$managedCl.progress__circular,\n          progress__paused = _this$props$managedCl.progress__paused;\n      return _get(_getPrototypeOf(Progress.prototype), \"generateClassNames\", this).call(this, classNames(progress, [progress__circular, this.props.circular], [progress__paused, this.props.paused]));\n    }\n  }, {\n    key: \"generateCircularValueIndicatorClassNames\",\n    value: function generateCircularValueIndicatorClassNames() {\n      var _this$props$managedCl2 = this.props.managedClasses,\n          progress_valueIndicator = _this$props$managedCl2.progress_valueIndicator,\n          progress_valueIndicator__indeterminate = _this$props$managedCl2.progress_valueIndicator__indeterminate;\n      return classNames(progress_valueIndicator, [progress_valueIndicator__indeterminate, !this.props.value]);\n    }\n  }, {\n    key: \"generateSVGClassNames\",\n    value: function generateSVGClassNames() {\n      return classNames(this.props.managedClasses[\"progress_circularSVG__\".concat(this.props.size)]);\n    }\n  }, {\n    key: \"progressIndicatorClasses\",\n    value: function progressIndicatorClasses() {\n      var _this$props$managedCl3 = this.props.managedClasses,\n          progress_indicator = _this$props$managedCl3.progress_indicator,\n          progress_indicator__determinate = _this$props$managedCl3.progress_indicator__determinate;\n      return classNames(progress_indicator, progress_indicator__determinate);\n    }\n  }, {\n    key: \"renderIndeterminateItems\",\n    value: function renderIndeterminateItems() {\n      var managedClasses = this.props.managedClasses;\n      var dotClass = managedClasses.progress_dot;\n      return new Array(Progress.indicatorCount).fill(undefined).map(function (item, index) {\n        return React.createElement(\"span\", {\n          className: classNames(dotClass, managedClasses[\"progress_dot__\".concat(index + 1)]),\n          key: index\n        });\n      });\n    }\n  }, {\n    key: \"renderCircle\",\n    value: function renderCircle(className, style) {\n      return React.createElement(\"circle\", {\n        className: className,\n        style: style,\n        cx: \"8px\",\n        cy: \"8px\",\n        r: \"7px\"\n      });\n    }\n  }, {\n    key: \"renderCircularBackground\",\n    value: function renderCircularBackground() {\n      return this.renderCircle(classNames(this.props.managedClasses.progress_indicator));\n    }\n  }, {\n    key: \"renderProgress\",\n    value: function renderProgress() {\n      var _this$props$managedCl4 = this.props.managedClasses,\n          progress_valueIndicator = _this$props$managedCl4.progress_valueIndicator,\n          progress_indicator = _this$props$managedCl4.progress_indicator;\n\n      if (this.props.circular) {\n        var strokeValue = 44 * this.props.value / 100;\n        return [React.createElement(\"div\", {\n          slot: ProgressType.determinate,\n          key: \"0\"\n        }, React.createElement(\"svg\", {\n          className: this.generateSVGClassNames(),\n          viewBox: \"0 0 16 16\"\n        }, this.renderCircularBackground(), this.renderCircle(this.generateCircularValueIndicatorClassNames(), {\n          strokeDasharray: \"\".concat(strokeValue, \"px 44px\")\n        }))), React.createElement(\"div\", {\n          slot: ProgressType.indeterminate,\n          key: \"1\"\n        }, React.createElement(\"svg\", {\n          className: this.generateSVGClassNames(),\n          viewBox: \"0 0 16 16\"\n        }, this.renderCircularBackground(), this.renderCircle(this.generateCircularValueIndicatorClassNames())))];\n      }\n\n      return [React.createElement(\"div\", {\n        className: this.progressIndicatorClasses(),\n        slot: ProgressType.determinate,\n        key: \"0\"\n      }, React.createElement(\"div\", {\n        className: classNames(progress_valueIndicator),\n        style: {\n          width: \"\".concat(this.props.value, \"%\")\n        }\n      })), React.createElement(\"div\", {\n        slot: ProgressType.indeterminate,\n        className: classNames(progress_indicator),\n        key: \"1\"\n      }, this.renderIndeterminateItems())];\n    }\n  }]);\n\n  return Progress;\n}(Foundation);\n\nProgress.defaultProps = {\n  minValue: 0,\n  maxValue: 100,\n  circular: false,\n  paused: false,\n  size: ProgressSize.container,\n  managedClasses: {}\n};\nProgress.displayName = \"\".concat(DisplayNamePrefix, \"Progress\");\nProgress.indicatorCount = 2;\nexport default Progress;\nexport * from \"./progress.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-msft/dist/progress/progress.js"],"names":["Foundation","Progress","BaseProgress","ProgressType","classNames","React","DisplayNamePrefix","ProgressSize","arguments","handledProps","children","value","minValue","maxValue","managedClasses","circular","paused","size","createElement","Object","assign","unhandledProps","className","generateClassNames","props","renderProgress","progress","progress__circular","progress__paused","progress_valueIndicator","progress_valueIndicator__indeterminate","progress_indicator","progress_indicator__determinate","dotClass","progress_dot","Array","indicatorCount","fill","undefined","map","item","index","key","style","cx","cy","r","renderCircle","strokeValue","slot","determinate","generateSVGClassNames","viewBox","renderCircularBackground","generateCircularValueIndicatorClassNames","strokeDasharray","indeterminate","progressIndicatorClasses","width","renderIndeterminateItems","defaultProps","container","displayName"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,6CAAvB;AACA,SAASC,QAAQ,IAAIC,YAArB,EAAmCC,YAAnC,QAAwD,uCAAxD;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,YAAT,QAA8B,kBAA9B;;IACMN,Q;;;;;AACF,sBAAc;AAAA;;AAAA;;AACV,mFAASO,SAAT;AACA,UAAKC,YAAL,GAAoB;AAChBC,MAAAA,QAAQ,EAAE,KAAK,CADC;AAEhBC,MAAAA,KAAK,EAAE,KAAK,CAFI;AAGhBC,MAAAA,QAAQ,EAAE,KAAK,CAHC;AAIhBC,MAAAA,QAAQ,EAAE,KAAK,CAJC;AAKhBC,MAAAA,cAAc,EAAE,KAAK,CALL;AAMhBC,MAAAA,QAAQ,EAAE,KAAK,CANC;AAOhBC,MAAAA,MAAM,EAAE,KAAK,CAPG;AAQhBC,MAAAA,IAAI,EAAE,KAAK;AARK,KAApB;AAFU;AAYb;AACD;;;;;;;6BAGS;AACL,aAAQZ,KAAK,CAACa,aAAN,CAAoBhB,YAApB,EAAkCiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,cAAL,EAAlB,EAAyC;AAAEC,QAAAA,SAAS,EAAE,KAAKC,kBAAL,EAAb;AAAwCT,QAAAA,cAAc,EAAE,KAAKU,KAAL,CAAWV,cAAnE;AAAmFH,QAAAA,KAAK,EAAE,KAAKa,KAAL,CAAWb,KAArG;AAA4GC,QAAAA,QAAQ,EAAE,KAAKY,KAAL,CAAWZ,QAAjI;AAA2IC,QAAAA,QAAQ,EAAE,KAAKW,KAAL,CAAWX;AAAhK,OAAzC,CAAlC,EAAwP,KAAKY,cAAL,EAAxP,CAAR;AACH;AACD;;;;;;yCAGqB;AAAA,kCAC2C,KAAKD,KAAL,CAAWV,cADtD;AAAA,UACTY,QADS,yBACTA,QADS;AAAA,UACCC,kBADD,yBACCA,kBADD;AAAA,UACqBC,gBADrB,yBACqBA,gBADrB;AAEjB,8FAAgCxB,UAAU,CAACsB,QAAD,EAAW,CAACC,kBAAD,EAAqB,KAAKH,KAAL,CAAWT,QAAhC,CAAX,EAAsD,CAACa,gBAAD,EAAmB,KAAKJ,KAAL,CAAWR,MAA9B,CAAtD,CAA1C;AACH;;;+DAC0C;AAAA,mCACsC,KAAKQ,KAAL,CAAWV,cADjD;AAAA,UAC/Be,uBAD+B,0BAC/BA,uBAD+B;AAAA,UACNC,sCADM,0BACNA,sCADM;AAEvC,aAAO1B,UAAU,CAACyB,uBAAD,EAA0B,CACvCC,sCADuC,EAEvC,CAAC,KAAKN,KAAL,CAAWb,KAF2B,CAA1B,CAAjB;AAIH;;;4CACuB;AACpB,aAAOP,UAAU,CAAC,KAAKoB,KAAL,CAAWV,cAAX,iCAAmD,KAAKU,KAAL,CAAWP,IAA9D,EAAD,CAAjB;AACH;;;+CAC0B;AAAA,mCAC0C,KAAKO,KAAL,CAAWV,cADrD;AAAA,UACfiB,kBADe,0BACfA,kBADe;AAAA,UACKC,+BADL,0BACKA,+BADL;AAEvB,aAAO5B,UAAU,CAAC2B,kBAAD,EAAqBC,+BAArB,CAAjB;AACH;;;+CAC0B;AACvB,UAAMlB,cAAc,GAAG,KAAKU,KAAL,CAClBV,cADL;AAEA,UAAMmB,QAAQ,GAAGnB,cAAc,CAACoB,YAAhC;AACA,aAAO,IAAIC,KAAJ,CAAUlC,QAAQ,CAACmC,cAAnB,EACFC,IADE,CACGC,SADH,EAEFC,GAFE,CAEE,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACtB,eAAQpC,KAAK,CAACa,aAAN,CAAoB,MAApB,EAA4B;AAAEI,UAAAA,SAAS,EAAElB,UAAU,CAAC6B,QAAD,EAAWnB,cAAc,yBAAkB2B,KAAK,GAAG,CAA1B,EAAzB,CAAvB;AAAiFC,UAAAA,GAAG,EAAED;AAAtF,SAA5B,CAAR;AACH,OAJM,CAAP;AAKH;;;iCACYnB,S,EAAWqB,K,EAAO;AAC3B,aAAOtC,KAAK,CAACa,aAAN,CAAoB,QAApB,EAA8B;AAAEI,QAAAA,SAAS,EAAEA,SAAb;AAAwBqB,QAAAA,KAAK,EAAEA,KAA/B;AAAsCC,QAAAA,EAAE,EAAE,KAA1C;AAAiDC,QAAAA,EAAE,EAAE,KAArD;AAA4DC,QAAAA,CAAC,EAAE;AAA/D,OAA9B,CAAP;AACH;;;+CAC0B;AACvB,aAAO,KAAKC,YAAL,CAAkB3C,UAAU,CAAC,KAAKoB,KAAL,CAAWV,cAAX,CAA0BiB,kBAA3B,CAA5B,CAAP;AACH;;;qCACgB;AAAA,mCAC4C,KAAKP,KAAL,CAAWV,cADvD;AAAA,UACLe,uBADK,0BACLA,uBADK;AAAA,UACoBE,kBADpB,0BACoBA,kBADpB;;AAEb,UAAI,KAAKP,KAAL,CAAWT,QAAf,EAAyB;AACrB,YAAMiC,WAAW,GAAI,KAAK,KAAKxB,KAAL,CAAWb,KAAjB,GAA0B,GAA9C;AACA,eAAO,CACHN,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAE+B,UAAAA,IAAI,EAAE9C,YAAY,CAAC+C,WAArB;AAAkCR,UAAAA,GAAG,EAAE;AAAvC,SAA3B,EACIrC,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEI,UAAAA,SAAS,EAAE,KAAK6B,qBAAL,EAAb;AAA2CC,UAAAA,OAAO,EAAE;AAApD,SAA3B,EACI,KAAKC,wBAAL,EADJ,EAEI,KAAKN,YAAL,CAAkB,KAAKO,wCAAL,EAAlB,EAAmE;AAAEC,UAAAA,eAAe,YAAKP,WAAL;AAAjB,SAAnE,CAFJ,CADJ,CADG,EAKH3C,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAE+B,UAAAA,IAAI,EAAE9C,YAAY,CAACqD,aAArB;AAAoCd,UAAAA,GAAG,EAAE;AAAzC,SAA3B,EACIrC,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEI,UAAAA,SAAS,EAAE,KAAK6B,qBAAL,EAAb;AAA2CC,UAAAA,OAAO,EAAE;AAApD,SAA3B,EACI,KAAKC,wBAAL,EADJ,EAEI,KAAKN,YAAL,CAAkB,KAAKO,wCAAL,EAAlB,CAFJ,CADJ,CALG,CAAP;AAUH;;AACD,aAAO,CACHjD,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEI,QAAAA,SAAS,EAAE,KAAKmC,wBAAL,EAAb;AAA8CR,QAAAA,IAAI,EAAE9C,YAAY,CAAC+C,WAAjE;AAA8ER,QAAAA,GAAG,EAAE;AAAnF,OAA3B,EACIrC,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAEI,QAAAA,SAAS,EAAElB,UAAU,CAACyB,uBAAD,CAAvB;AAAkDc,QAAAA,KAAK,EAAE;AAAEe,UAAAA,KAAK,YAAK,KAAKlC,KAAL,CAAWb,KAAhB;AAAP;AAAzD,OAA3B,CADJ,CADG,EAGHN,KAAK,CAACa,aAAN,CAAoB,KAApB,EAA2B;AAAE+B,QAAAA,IAAI,EAAE9C,YAAY,CAACqD,aAArB;AAAoClC,QAAAA,SAAS,EAAElB,UAAU,CAAC2B,kBAAD,CAAzD;AAA+EW,QAAAA,GAAG,EAAE;AAApF,OAA3B,EAAsH,KAAKiB,wBAAL,EAAtH,CAHG,CAAP;AAKH;;;;EA7EkB3D,U;;AA+EvBC,QAAQ,CAAC2D,YAAT,GAAwB;AACpBhD,EAAAA,QAAQ,EAAE,CADU;AAEpBC,EAAAA,QAAQ,EAAE,GAFU;AAGpBE,EAAAA,QAAQ,EAAE,KAHU;AAIpBC,EAAAA,MAAM,EAAE,KAJY;AAKpBC,EAAAA,IAAI,EAAEV,YAAY,CAACsD,SALC;AAMpB/C,EAAAA,cAAc,EAAE;AANI,CAAxB;AAQAb,QAAQ,CAAC6D,WAAT,aAA0BxD,iBAA1B;AACAL,QAAQ,CAACmC,cAAT,GAA0B,CAA1B;AACA,eAAenC,QAAf;AACA,cAAc,kBAAd","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Progress as BaseProgress, ProgressType, } from \"@microsoft/fast-components-react-base\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { ProgressSize, } from \"./progress.props\";\nclass Progress extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            children: void 0,\n            value: void 0,\n            minValue: void 0,\n            maxValue: void 0,\n            managedClasses: void 0,\n            circular: void 0,\n            paused: void 0,\n            size: void 0,\n        };\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(BaseProgress, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), managedClasses: this.props.managedClasses, value: this.props.value, minValue: this.props.minValue, maxValue: this.props.maxValue }), this.renderProgress()));\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        const { progress, progress__circular, progress__paused, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(progress, [progress__circular, this.props.circular], [progress__paused, this.props.paused]));\n    }\n    generateCircularValueIndicatorClassNames() {\n        const { progress_valueIndicator, progress_valueIndicator__indeterminate, } = this.props.managedClasses;\n        return classNames(progress_valueIndicator, [\n            progress_valueIndicator__indeterminate,\n            !this.props.value,\n        ]);\n    }\n    generateSVGClassNames() {\n        return classNames(this.props.managedClasses[`progress_circularSVG__${this.props.size}`]);\n    }\n    progressIndicatorClasses() {\n        const { progress_indicator, progress_indicator__determinate, } = this.props.managedClasses;\n        return classNames(progress_indicator, progress_indicator__determinate);\n    }\n    renderIndeterminateItems() {\n        const managedClasses = this.props\n            .managedClasses;\n        const dotClass = managedClasses.progress_dot;\n        return new Array(Progress.indicatorCount)\n            .fill(undefined)\n            .map((item, index) => {\n            return (React.createElement(\"span\", { className: classNames(dotClass, managedClasses[`progress_dot__${index + 1}`]), key: index }));\n        });\n    }\n    renderCircle(className, style) {\n        return React.createElement(\"circle\", { className: className, style: style, cx: \"8px\", cy: \"8px\", r: \"7px\" });\n    }\n    renderCircularBackground() {\n        return this.renderCircle(classNames(this.props.managedClasses.progress_indicator));\n    }\n    renderProgress() {\n        const { progress_valueIndicator, progress_indicator, } = this.props.managedClasses;\n        if (this.props.circular) {\n            const strokeValue = (44 * this.props.value) / 100;\n            return [\n                React.createElement(\"div\", { slot: ProgressType.determinate, key: \"0\" },\n                    React.createElement(\"svg\", { className: this.generateSVGClassNames(), viewBox: \"0 0 16 16\" },\n                        this.renderCircularBackground(),\n                        this.renderCircle(this.generateCircularValueIndicatorClassNames(), { strokeDasharray: `${strokeValue}px 44px` }))),\n                React.createElement(\"div\", { slot: ProgressType.indeterminate, key: \"1\" },\n                    React.createElement(\"svg\", { className: this.generateSVGClassNames(), viewBox: \"0 0 16 16\" },\n                        this.renderCircularBackground(),\n                        this.renderCircle(this.generateCircularValueIndicatorClassNames()))),\n            ];\n        }\n        return [\n            React.createElement(\"div\", { className: this.progressIndicatorClasses(), slot: ProgressType.determinate, key: \"0\" },\n                React.createElement(\"div\", { className: classNames(progress_valueIndicator), style: { width: `${this.props.value}%` } })),\n            React.createElement(\"div\", { slot: ProgressType.indeterminate, className: classNames(progress_indicator), key: \"1\" }, this.renderIndeterminateItems()),\n        ];\n    }\n}\nProgress.defaultProps = {\n    minValue: 0,\n    maxValue: 100,\n    circular: false,\n    paused: false,\n    size: ProgressSize.container,\n    managedClasses: {},\n};\nProgress.displayName = `${DisplayNamePrefix}Progress`;\nProgress.indicatorCount = 2;\nexport default Progress;\nexport * from \"./progress.props\";\n"]},"metadata":{},"sourceType":"module"}