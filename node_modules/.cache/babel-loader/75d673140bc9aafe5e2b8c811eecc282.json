{"ast":null,"code":"import React from \"react\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnter, keyCodeSpace } from \"@microsoft/fast-web-utilities\";\nimport { getDisplayedNodes, isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { TreeViewContext } from \"../tree-view/tree-view\";\nimport { DisplayNamePrefix } from \"../utilities\";\n\nclass TreeViewItem extends Foundation {\n  constructor(props) {\n    super(props);\n    this.handledProps = {\n      dragConnect: void 0,\n      expandCollapseGlyph: void 0,\n      titleContent: void 0,\n      children: void 0,\n      managedClasses: void 0,\n      selected: void 0,\n      defaultExpanded: void 0,\n      onExpandedChange: void 0,\n      onSelected: void 0\n    };\n    this.rootElement = React.createRef();\n    this.expandCollapseButton = React.createRef();\n    /**\n     * Handles the focus event of the root element\n     */\n\n    this.handleFocus = e => {\n      // Only change focusability if the event is on the node itself\n      // and not a child node\n      if (e.target === e.currentTarget) {\n        this.setState({\n          focusable: true\n        }); // Notify the parent TreeView component that a new item has been focused,\n        // and should tree this item as the last-focused item\n\n        if (typeof this.context.setLastFocused === \"function\") {\n          this.context.setLastFocused(this.rootElement);\n        }\n      }\n    };\n    /**\n     * Handles the blur event on the root element\n     */\n\n\n    this.handleBlur = e => {\n      // Ignore the event if the event happened on a child node\n      if (!canUseDOM() || e.target !== e.currentTarget) {\n        return;\n      }\n\n      this.setState({\n        focusable: false\n      });\n    };\n    /**\n     * handles the keydown event of the tree view item\n     */\n\n\n    this.handleKeyDown = e => {\n      if (e.target !== e.currentTarget) {\n        return;\n      }\n\n      switch (e.keyCode) {\n        case keyCodeArrowLeft:\n          this.handleArrowLeft();\n          break;\n\n        case keyCodeArrowRight:\n          this.handleArrowRight();\n          break;\n\n        case keyCodeArrowDown:\n          // Prevent scrolling\n          e.preventDefault();\n          this.focusNextNode(1);\n          break;\n\n        case keyCodeArrowUp:\n          // Prevent scrolling\n          e.preventDefault();\n          this.focusNextNode(-1);\n          break;\n\n        case keyCodeEnter:\n          this.handleSelected(e);\n          break;\n\n        case keyCodeSpace:\n          this.handleSpaceBar();\n          break;\n      }\n    };\n    /**\n     * Click handler for expand/collapse button\n     */\n\n\n    this.handleExpandCollapseButtonClick = () => {\n      this.setExpanded(!this.state.expanded);\n    };\n    /**\n     * Call the onSelected callback if it exists\n     */\n\n\n    this.handleSelected = e => {\n      if (typeof this.props.onSelected === \"function\") {\n        this.props.onSelected(this.props, e);\n      }\n    };\n    /**\n     * Handles the click event of the tree view item, except for the expand/collapse button\n     */\n\n\n    this.handleContentContainerClick = e => {\n      const expandButton = this.expandCollapseButton.current;\n\n      if (!isHTMLElement(expandButton) || isHTMLElement(expandButton) && expandButton !== e.target) {\n        this.handleSelected(e);\n      }\n    };\n\n    this.state = {\n      focusable: false,\n      expanded: this.hasChildNodes() ? this.props.defaultExpanded : undefined\n    };\n  }\n\n  componentDidMount() {\n    if (this.hasChildNodes()) {\n      this.adjustNestedTreeItemCount(1);\n\n      if (this.hasSelectedChild() && !this.state.expanded) {\n        this.setExpanded(true);\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if we become selected, call the selected callback\n    if (this.props.selected && !prevProps.selected) {\n      this.handleSelected();\n    }\n\n    const hadChildNodes = this.hasChildNodes(prevProps);\n    const hasChildNodes = this.hasChildNodes();\n\n    if (hasChildNodes && !hadChildNodes) {\n      // if defaultExpanded is false and a child node is selected, set expanded (triggers callback)\n      // if not, set expanded state to this.props.defaultExpanded\n      this.props.defaultExpanded === false && this.hasSelectedChild() ? this.setExpanded(true) : this.setState({\n        expanded: this.props.defaultExpanded\n      });\n      this.adjustNestedTreeItemCount(1);\n    } else if (hadChildNodes && !hasChildNodes) {\n      this.adjustNestedTreeItemCount(-1);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hasChildNodes()) {\n      this.adjustNestedTreeItemCount(-1);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      role: \"treeitem\",\n      \"aria-expanded\": this.state.expanded,\n      \"aria-selected\": !!this.props.selected,\n      tabIndex: this.state.focusable ? 0 : -1,\n      className: this.generateClassNames(),\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyDown: this.handleKeyDown,\n      ref: this.rootElement\n    }), this.renderItem(), this.renderChildNodes());\n  }\n\n  generateClassNames() {\n    const _this$props$managedCl = this.props.managedClasses,\n          treeViewItem = _this$props$managedCl.treeViewItem,\n          treeViewItem__expanded = _this$props$managedCl.treeViewItem__expanded,\n          treeViewItem__nested = _this$props$managedCl.treeViewItem__nested,\n          treeViewItem__selected = _this$props$managedCl.treeViewItem__selected;\n    return super.generateClassNames(classNames(treeViewItem, [treeViewItem__expanded, this.state.expanded], [treeViewItem__nested, this.context.nested], [treeViewItem__selected, this.props.selected]));\n  }\n\n  renderItem() {\n    const _this$props$managedCl2 = this.props.managedClasses,\n          treeViewItem_contentRegion = _this$props$managedCl2.treeViewItem_contentRegion,\n          treeViewItem_innerContentRegion = _this$props$managedCl2.treeViewItem_innerContentRegion;\n    const node = React.createElement(\"div\", {\n      className: classNames(treeViewItem_contentRegion),\n      onClick: this.handleContentContainerClick\n    }, React.createElement(\"div\", {\n      className: classNames(treeViewItem_innerContentRegion)\n    }, this.renderExpandCollapseButton(), this.props.titleContent));\n    return typeof this.props.dragConnect === \"function\" ? this.props.dragConnect(node) : node;\n  }\n\n  adjustNestedTreeItemCount(count) {\n    if (typeof this.context.adjustNestedTreeItemCount === \"function\") {\n      this.context.adjustNestedTreeItemCount(count);\n    }\n  }\n  /**\n   * Determines if the item has sub-items and should be collapse/expandable\n   */\n\n\n  hasChildNodes(props = this.props) {\n    return !!props.children;\n  }\n  /**\n   * Determines if the item has sub-items which are selected\n   */\n\n\n  hasSelectedChild() {\n    const currentNode = this.rootElement.current;\n\n    if (!isHTMLElement(currentNode) || !canUseDOM()) {\n      return null;\n    }\n\n    return !!currentNode.querySelector(\"[aria-selected='true'\");\n  }\n  /**\n   * Handles when the left arrow is pressed\n   */\n\n\n  handleArrowLeft() {\n    if (this.state.expanded) {\n      this.setExpanded(false);\n    } else if (canUseDOM() && isHTMLElement(this.rootElement.current) && isHTMLElement(this.rootElement.current.parentElement)) {\n      const parentElement = this.rootElement.current.parentElement;\n\n      if (isHTMLElement(parentElement)) {\n        const parentNode = parentElement.closest(\"[role='treeitem']\");\n\n        if (isHTMLElement(parentNode)) {\n          parentNode.focus();\n        }\n      }\n    }\n  }\n  /**\n   * Handles when the space bar is pressed\n   */\n\n\n  handleSpaceBar() {\n    if (typeof this.state.expanded !== \"boolean\") {\n      return;\n    }\n\n    this.setExpanded(!this.state.expanded);\n  }\n  /**\n   * Handles when the right arrow is pressed\n   */\n\n\n  handleArrowRight() {\n    if (typeof this.state.expanded !== \"boolean\") {\n      return;\n    }\n\n    if (!this.state.expanded) {\n      this.setExpanded(true);\n    } else {\n      this.focusNextNode(1);\n    }\n  }\n\n  focusNextNode(delta) {\n    if (!canUseDOM()) {\n      return;\n    }\n\n    const visibleNodes = this.getVisibleNodes();\n\n    if (!visibleNodes) {\n      return;\n    }\n\n    const currentIndex = visibleNodes.indexOf(this.rootElement.current);\n\n    if (currentIndex !== -1) {\n      const nextElement = visibleNodes[currentIndex + delta];\n\n      if (isHTMLElement(nextElement)) {\n        nextElement.focus();\n      }\n    }\n  }\n  /**\n   * Returns an array of all tree item nodes that are\n   * currently visible (not hidden under a collapsed node)\n   */\n\n\n  getVisibleNodes() {\n    return canUseDOM() ? getDisplayedNodes(this.getTreeRoot(), \"[role='treeitem']\") : [];\n  }\n  /**\n   * Get the root element of the tree. This will always be the\n   * closest element with [role='tree']\n   */\n\n\n  getTreeRoot() {\n    const currentNode = this.rootElement.current;\n\n    if (!isHTMLElement(currentNode) || !canUseDOM()) {\n      return null;\n    }\n\n    return currentNode.closest(\"[role='tree']\");\n  }\n\n  wrapChildOnSelected(childOnSelected) {\n    return (props, e) => {\n      if (childOnSelected) {\n        childOnSelected(props, e);\n      }\n\n      this.setExpanded(true);\n    };\n  }\n\n  wrapChildOnExpandedChange(childOnExpandedChange) {\n    return (childExpanded, childProps) => {\n      if (childOnExpandedChange) {\n        childOnExpandedChange(childExpanded, childProps);\n      }\n\n      if (childExpanded) {\n        this.setExpanded(true);\n      }\n    };\n  }\n\n  renderChildNodes() {\n    return this.hasChildNodes() ? React.createElement(\"div\", {\n      role: \"group\",\n      className: classNames(this.props.managedClasses.treeViewItem_childNodeRegion)\n    }, React.Children.map(this.props.children, child => {\n      if (!React.isValidElement(child) || !child.props) {\n        return child;\n      }\n\n      return React.cloneElement(child, Object.assign({}, child.props, {\n        onSelected: this.wrapChildOnSelected(child.props.onSelected),\n        onExpandedChange: this.wrapChildOnExpandedChange(child.props.onExpandedChange)\n      }));\n    })) : null;\n  }\n\n  renderExpandCollapseButton() {\n    const _this$props$managedCl3 = this.props.managedClasses,\n          treeViewItem_expandCollapseButton = _this$props$managedCl3.treeViewItem_expandCollapseButton,\n          treeViewItem_expandCollapseGlyph = _this$props$managedCl3.treeViewItem_expandCollapseGlyph;\n    return this.hasChildNodes() ? // This really should render a button but Narrator sometimes still brings it focus\n    // in scan-mode, so making this a div\n    React.createElement(\"div\", {\n      \"aria-hidden\": true,\n      className: classNames(treeViewItem_expandCollapseButton),\n      onClick: this.handleExpandCollapseButtonClick,\n      ref: this.expandCollapseButton\n    }, typeof this.props.expandCollapseGlyph === \"function\" ? this.props.expandCollapseGlyph(treeViewItem_expandCollapseGlyph) : null) : null;\n  }\n  /**\n   * Sets the expanded state of the component if necessary and\n   * notifies listeners of the state change.\n   */\n\n\n  setExpanded(expanded) {\n    if (this.hasChildNodes()) {\n      this.setState({\n        expanded\n      }, () => {\n        if (typeof this.props.onExpandedChange === \"function\") {\n          this.props.onExpandedChange(expanded, this.props);\n        }\n      });\n    }\n  }\n\n}\n\nTreeViewItem.displayName = `${DisplayNamePrefix}TreeViewItem`;\nTreeViewItem.defaultProps = {\n  defaultExpanded: false,\n  managedClasses: {}\n};\nTreeViewItem.contextType = TreeViewContext;\nexport default TreeViewItem;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/tree-view-item/tree-view-item.js"],"names":["React","Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnter","keyCodeSpace","getDisplayedNodes","isHTMLElement","canUseDOM","TreeViewContext","DisplayNamePrefix","TreeViewItem","constructor","props","handledProps","dragConnect","expandCollapseGlyph","titleContent","children","managedClasses","selected","defaultExpanded","onExpandedChange","onSelected","rootElement","createRef","expandCollapseButton","handleFocus","e","target","currentTarget","setState","focusable","context","setLastFocused","handleBlur","handleKeyDown","keyCode","handleArrowLeft","handleArrowRight","preventDefault","focusNextNode","handleSelected","handleSpaceBar","handleExpandCollapseButtonClick","setExpanded","state","expanded","handleContentContainerClick","expandButton","current","hasChildNodes","undefined","componentDidMount","adjustNestedTreeItemCount","hasSelectedChild","componentDidUpdate","prevProps","hadChildNodes","componentWillUnmount","render","createElement","Object","assign","unhandledProps","role","tabIndex","className","generateClassNames","onFocus","onBlur","onKeyDown","ref","renderItem","renderChildNodes","treeViewItem","treeViewItem__expanded","treeViewItem__nested","treeViewItem__selected","nested","treeViewItem_contentRegion","treeViewItem_innerContentRegion","node","onClick","renderExpandCollapseButton","count","currentNode","querySelector","parentElement","parentNode","closest","focus","delta","visibleNodes","getVisibleNodes","currentIndex","indexOf","nextElement","getTreeRoot","wrapChildOnSelected","childOnSelected","wrapChildOnExpandedChange","childOnExpandedChange","childExpanded","childProps","treeViewItem_childNodeRegion","Children","map","child","isValidElement","cloneElement","treeViewItem_expandCollapseButton","treeViewItem_expandCollapseGlyph","displayName","defaultProps","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnter, keyCodeSpace, } from \"@microsoft/fast-web-utilities\";\nimport { getDisplayedNodes, isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { TreeViewContext } from \"../tree-view/tree-view\";\nimport { DisplayNamePrefix } from \"../utilities\";\nclass TreeViewItem extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            dragConnect: void 0,\n            expandCollapseGlyph: void 0,\n            titleContent: void 0,\n            children: void 0,\n            managedClasses: void 0,\n            selected: void 0,\n            defaultExpanded: void 0,\n            onExpandedChange: void 0,\n            onSelected: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.expandCollapseButton = React.createRef();\n        /**\n         * Handles the focus event of the root element\n         */\n        this.handleFocus = (e) => {\n            // Only change focusability if the event is on the node itself\n            // and not a child node\n            if (e.target === e.currentTarget) {\n                this.setState({ focusable: true });\n                // Notify the parent TreeView component that a new item has been focused,\n                // and should tree this item as the last-focused item\n                if (typeof this.context.setLastFocused === \"function\") {\n                    this.context.setLastFocused(this.rootElement);\n                }\n            }\n        };\n        /**\n         * Handles the blur event on the root element\n         */\n        this.handleBlur = (e) => {\n            // Ignore the event if the event happened on a child node\n            if (!canUseDOM() || e.target !== e.currentTarget) {\n                return;\n            }\n            this.setState({ focusable: false });\n        };\n        /**\n         * handles the keydown event of the tree view item\n         */\n        this.handleKeyDown = (e) => {\n            if (e.target !== e.currentTarget) {\n                return;\n            }\n            switch (e.keyCode) {\n                case keyCodeArrowLeft:\n                    this.handleArrowLeft();\n                    break;\n                case keyCodeArrowRight:\n                    this.handleArrowRight();\n                    break;\n                case keyCodeArrowDown:\n                    // Prevent scrolling\n                    e.preventDefault();\n                    this.focusNextNode(1);\n                    break;\n                case keyCodeArrowUp:\n                    // Prevent scrolling\n                    e.preventDefault();\n                    this.focusNextNode(-1);\n                    break;\n                case keyCodeEnter:\n                    this.handleSelected(e);\n                    break;\n                case keyCodeSpace:\n                    this.handleSpaceBar();\n                    break;\n            }\n        };\n        /**\n         * Click handler for expand/collapse button\n         */\n        this.handleExpandCollapseButtonClick = () => {\n            this.setExpanded(!this.state.expanded);\n        };\n        /**\n         * Call the onSelected callback if it exists\n         */\n        this.handleSelected = (e) => {\n            if (typeof this.props.onSelected === \"function\") {\n                this.props.onSelected(this.props, e);\n            }\n        };\n        /**\n         * Handles the click event of the tree view item, except for the expand/collapse button\n         */\n        this.handleContentContainerClick = (e) => {\n            const expandButton = this.expandCollapseButton.current;\n            if (!isHTMLElement(expandButton) ||\n                (isHTMLElement(expandButton) && expandButton !== e.target)) {\n                this.handleSelected(e);\n            }\n        };\n        this.state = {\n            focusable: false,\n            expanded: this.hasChildNodes() ? this.props.defaultExpanded : undefined,\n        };\n    }\n    componentDidMount() {\n        if (this.hasChildNodes()) {\n            this.adjustNestedTreeItemCount(1);\n            if (this.hasSelectedChild() && !this.state.expanded) {\n                this.setExpanded(true);\n            }\n        }\n    }\n    componentDidUpdate(prevProps) {\n        // if we become selected, call the selected callback\n        if (this.props.selected && !prevProps.selected) {\n            this.handleSelected();\n        }\n        const hadChildNodes = this.hasChildNodes(prevProps);\n        const hasChildNodes = this.hasChildNodes();\n        if (hasChildNodes && !hadChildNodes) {\n            // if defaultExpanded is false and a child node is selected, set expanded (triggers callback)\n            // if not, set expanded state to this.props.defaultExpanded\n            this.props.defaultExpanded === false && this.hasSelectedChild()\n                ? this.setExpanded(true)\n                : this.setState({ expanded: this.props.defaultExpanded });\n            this.adjustNestedTreeItemCount(1);\n        }\n        else if (hadChildNodes && !hasChildNodes) {\n            this.adjustNestedTreeItemCount(-1);\n        }\n    }\n    componentWillUnmount() {\n        if (this.hasChildNodes()) {\n            this.adjustNestedTreeItemCount(-1);\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { role: \"treeitem\", \"aria-expanded\": this.state.expanded, \"aria-selected\": !!this.props.selected, tabIndex: this.state.focusable ? 0 : -1, className: this.generateClassNames(), onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, ref: this.rootElement }),\n            this.renderItem(),\n            this.renderChildNodes()));\n    }\n    generateClassNames() {\n        const { treeViewItem, treeViewItem__expanded, treeViewItem__nested, treeViewItem__selected, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(treeViewItem, [treeViewItem__expanded, this.state.expanded], [treeViewItem__nested, this.context.nested], [treeViewItem__selected, this.props.selected]));\n    }\n    renderItem() {\n        const { treeViewItem_contentRegion, treeViewItem_innerContentRegion, } = this.props.managedClasses;\n        const node = (React.createElement(\"div\", { className: classNames(treeViewItem_contentRegion), onClick: this.handleContentContainerClick },\n            React.createElement(\"div\", { className: classNames(treeViewItem_innerContentRegion) },\n                this.renderExpandCollapseButton(),\n                this.props.titleContent)));\n        return typeof this.props.dragConnect === \"function\"\n            ? this.props.dragConnect(node)\n            : node;\n    }\n    adjustNestedTreeItemCount(count) {\n        if (typeof this.context.adjustNestedTreeItemCount === \"function\") {\n            this.context.adjustNestedTreeItemCount(count);\n        }\n    }\n    /**\n     * Determines if the item has sub-items and should be collapse/expandable\n     */\n    hasChildNodes(props = this.props) {\n        return !!props.children;\n    }\n    /**\n     * Determines if the item has sub-items which are selected\n     */\n    hasSelectedChild() {\n        const currentNode = this.rootElement.current;\n        if (!isHTMLElement(currentNode) || !canUseDOM()) {\n            return null;\n        }\n        return !!currentNode.querySelector(\"[aria-selected='true'\");\n    }\n    /**\n     * Handles when the left arrow is pressed\n     */\n    handleArrowLeft() {\n        if (this.state.expanded) {\n            this.setExpanded(false);\n        }\n        else if (canUseDOM() &&\n            isHTMLElement(this.rootElement.current) &&\n            isHTMLElement(this.rootElement.current.parentElement)) {\n            const parentElement = this.rootElement.current.parentElement;\n            if (isHTMLElement(parentElement)) {\n                const parentNode = parentElement.closest(\"[role='treeitem']\");\n                if (isHTMLElement(parentNode)) {\n                    parentNode.focus();\n                }\n            }\n        }\n    }\n    /**\n     * Handles when the space bar is pressed\n     */\n    handleSpaceBar() {\n        if (typeof this.state.expanded !== \"boolean\") {\n            return;\n        }\n        this.setExpanded(!this.state.expanded);\n    }\n    /**\n     * Handles when the right arrow is pressed\n     */\n    handleArrowRight() {\n        if (typeof this.state.expanded !== \"boolean\") {\n            return;\n        }\n        if (!this.state.expanded) {\n            this.setExpanded(true);\n        }\n        else {\n            this.focusNextNode(1);\n        }\n    }\n    focusNextNode(delta) {\n        if (!canUseDOM()) {\n            return;\n        }\n        const visibleNodes = this.getVisibleNodes();\n        if (!visibleNodes) {\n            return;\n        }\n        const currentIndex = visibleNodes.indexOf(this.rootElement.current);\n        if (currentIndex !== -1) {\n            const nextElement = visibleNodes[currentIndex + delta];\n            if (isHTMLElement(nextElement)) {\n                nextElement.focus();\n            }\n        }\n    }\n    /**\n     * Returns an array of all tree item nodes that are\n     * currently visible (not hidden under a collapsed node)\n     */\n    getVisibleNodes() {\n        return canUseDOM()\n            ? getDisplayedNodes(this.getTreeRoot(), \"[role='treeitem']\")\n            : [];\n    }\n    /**\n     * Get the root element of the tree. This will always be the\n     * closest element with [role='tree']\n     */\n    getTreeRoot() {\n        const currentNode = this.rootElement.current;\n        if (!isHTMLElement(currentNode) || !canUseDOM()) {\n            return null;\n        }\n        return currentNode.closest(\"[role='tree']\");\n    }\n    wrapChildOnSelected(childOnSelected) {\n        return (props, e) => {\n            if (childOnSelected) {\n                childOnSelected(props, e);\n            }\n            this.setExpanded(true);\n        };\n    }\n    wrapChildOnExpandedChange(childOnExpandedChange) {\n        return (childExpanded, childProps) => {\n            if (childOnExpandedChange) {\n                childOnExpandedChange(childExpanded, childProps);\n            }\n            if (childExpanded) {\n                this.setExpanded(true);\n            }\n        };\n    }\n    renderChildNodes() {\n        return this.hasChildNodes() ? (React.createElement(\"div\", { role: \"group\", className: classNames(this.props.managedClasses.treeViewItem_childNodeRegion) }, React.Children.map(this.props.children, (child) => {\n            if (!React.isValidElement(child) || !child.props) {\n                return child;\n            }\n            return React.cloneElement(child, Object.assign({}, child.props, { onSelected: this.wrapChildOnSelected(child.props.onSelected), onExpandedChange: this.wrapChildOnExpandedChange(child.props.onExpandedChange) }));\n        }))) : null;\n    }\n    renderExpandCollapseButton() {\n        const { treeViewItem_expandCollapseButton, treeViewItem_expandCollapseGlyph, } = this.props.managedClasses;\n        return this.hasChildNodes() ? (\n        // This really should render a button but Narrator sometimes still brings it focus\n        // in scan-mode, so making this a div\n        React.createElement(\"div\", { \"aria-hidden\": true, className: classNames(treeViewItem_expandCollapseButton), onClick: this.handleExpandCollapseButtonClick, ref: this.expandCollapseButton }, typeof this.props.expandCollapseGlyph === \"function\"\n            ? this.props.expandCollapseGlyph(treeViewItem_expandCollapseGlyph)\n            : null)) : null;\n    }\n    /**\n     * Sets the expanded state of the component if necessary and\n     * notifies listeners of the state change.\n     */\n    setExpanded(expanded) {\n        if (this.hasChildNodes()) {\n            this.setState({\n                expanded,\n            }, () => {\n                if (typeof this.props.onExpandedChange === \"function\") {\n                    this.props.onExpandedChange(expanded, this.props);\n                }\n            });\n        }\n    }\n}\nTreeViewItem.displayName = `${DisplayNamePrefix}TreeViewItem`;\nTreeViewItem.defaultProps = {\n    defaultExpanded: false,\n    managedClasses: {},\n};\nTreeViewItem.contextType = TreeViewContext;\nexport default TreeViewItem;\n"]},"metadata":{},"sourceType":"module"}