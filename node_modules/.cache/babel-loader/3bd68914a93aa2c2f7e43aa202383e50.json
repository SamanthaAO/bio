{"ast":null,"code":"// tslint:disable:member-ordering\nimport { clamp, denormalize, getHexStringForByte, roundToPrecisionSmall } from \"./math-utilities\";\nexport class ColorRGBA64 {\n  static fromObject(data) {\n    return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b) ? new ColorRGBA64(data.r, data.g, data.b, data.a) : null;\n  }\n\n  constructor(red, green, blue, alpha) {\n    this.r = red;\n    this.g = green;\n    this.b = blue;\n    this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n  }\n\n  equalValue(rhs) {\n    return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;\n  } // #RRGGBB\n\n\n  toStringHexRGB() {\n    return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n  } // #RRGGBBAA\n\n\n  toStringHexRGBA() {\n    return this.toStringHexRGB() + this.formatHexValue(this.a);\n  } // #AARRGGBB\n\n\n  toStringHexARGB() {\n    return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n  } // rgb(0xRR, 0xGG, 0xBB)\n\n\n  toStringWebRGB() {\n    return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n  } // rgba(0xRR, 0xGG, 0xBB, a)\n  // Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n\n\n  toStringWebRGBA() {\n    return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n  }\n\n  roundToPrecision(precision) {\n    return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n  }\n\n  clamp() {\n    return new ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n  }\n\n  toObject() {\n    return {\n      r: this.r,\n      g: this.g,\n      b: this.b,\n      a: this.a\n    };\n  }\n\n  formatHexValue(value) {\n    return getHexStringForByte(denormalize(value, 0.0, 255.0));\n  }\n\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-rgba-64.js"],"names":["clamp","denormalize","getHexStringForByte","roundToPrecisionSmall","ColorRGBA64","fromObject","data","isNaN","r","g","b","a","constructor","red","green","blue","alpha","equalValue","rhs","toStringHexRGB","map","formatHexValue","join","toStringHexRGBA","toStringHexARGB","toStringWebRGB","Math","round","toStringWebRGBA","roundToPrecision","precision","toObject","value"],"mappings":"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","sourcesContent":["// tslint:disable:member-ordering\nimport { clamp, denormalize, getHexStringForByte, roundToPrecisionSmall, } from \"./math-utilities\";\nexport class ColorRGBA64 {\n    static fromObject(data) {\n        return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b)\n            ? new ColorRGBA64(data.r, data.g, data.b, data.a)\n            : null;\n    }\n    constructor(red, green, blue, alpha) {\n        this.r = red;\n        this.g = green;\n        this.b = blue;\n        this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n    }\n    equalValue(rhs) {\n        return (this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a);\n    }\n    // #RRGGBB\n    toStringHexRGB() {\n        return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    // #RRGGBBAA\n    toStringHexRGBA() {\n        return this.toStringHexRGB() + this.formatHexValue(this.a);\n    }\n    // #AARRGGBB\n    toStringHexARGB() {\n        return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    // rgb(0xRR, 0xGG, 0xBB)\n    toStringWebRGB() {\n        return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n    }\n    // rgba(0xRR, 0xGG, 0xBB, a)\n    // Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n    toStringWebRGBA() {\n        return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n    }\n    roundToPrecision(precision) {\n        return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n    }\n    clamp() {\n        return new ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n    }\n    toObject() {\n        return { r: this.r, g: this.g, b: this.b, a: this.a };\n    }\n    formatHexValue(value) {\n        return getHexStringForByte(denormalize(value, 0.0, 255.0));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}