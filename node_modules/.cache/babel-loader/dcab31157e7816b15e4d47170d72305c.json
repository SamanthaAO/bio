{"ast":null,"code":"import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { getValueByBreakpoint } from \"../utilities/breakpoints\";\nimport { GridAlignment, GridTag } from \"./grid.props\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Column } from \"../column\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nimport { toPx } from \"@microsoft/fast-jss-utilities\";\nexport class Grid extends Foundation {\n  constructor() {\n    super(...arguments);\n    this.handledProps = {\n      columnCount: void 0,\n      gridColumn: void 0,\n      gutter: void 0,\n      horizontalAlign: void 0,\n      managedClasses: void 0,\n      tag: void 0,\n      verticalAlign: void 0,\n      cssGridPropertyName: void 0\n    };\n    /**\n     * Force the component to update\n     */\n\n    this.update = () => {\n      this.forceUpdate();\n    };\n  }\n  /**\n   * Stores HTML tag for use in render\n   */\n\n\n  get tag() {\n    return this.generateHTMLTag();\n  }\n  /**\n   * Renders the Grid markup\n   */\n\n\n  render() {\n    return React.createElement(this.tag, Object.assign({}, this.unhandledProps(), {\n      className: this.generateClassNames(),\n      style: this.generateStyleAttributes()\n    }), this.renderChildren());\n  }\n  /**\n   * Component has mounted\n   */\n\n\n  componentDidMount() {\n    if (this.shouldTrackBreakpoints(this.props)) {\n      BreakpointTracker.subscribe(this.update);\n    }\n  }\n  /**\n   * Component will be unmounted\n   */\n\n\n  componentWillUnmount() {\n    BreakpointTracker.unsubscribe(this.update);\n  }\n  /**\n   * Component has updated\n   */\n\n\n  componentDidUpdate(previousProps) {\n    if (this.shouldTrackBreakpoints(this.props) && !this.shouldTrackBreakpoints(previousProps)) {\n      // If we should be tracking breakpoints but previously weren't, subscribe to changes\n      BreakpointTracker.subscribe(this.update);\n    } else if (!this.shouldTrackBreakpoints(this.props) && this.shouldTrackBreakpoints(previousProps)) {\n      // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n      BreakpointTracker.unsubscribe(this.update);\n    }\n  }\n\n  generateClassNames() {\n    return super.generateClassNames(classNames(this.props.managedClasses.grid));\n  }\n  /**\n   * Determines if we should be tracking breakpoints based on a set of props\n   */\n\n\n  shouldTrackBreakpoints(props) {\n    return Array.isArray(props.gutter) && props.gutter.length > 1;\n  }\n  /**\n   * Generates the column-span value\n   */\n\n\n  generateGutter() {\n    if (typeof this.props.gutter === \"number\") {\n      return this.props.gutter;\n    } else if (Array.isArray(this.props.gutter)) {\n      return getValueByBreakpoint(this.props.gutter);\n    }\n\n    return null;\n  }\n\n  generateAlignment(alignment) {\n    return GridAlignment[alignment];\n  }\n\n  generateStyleAttributes() {\n    const displayStyle = this.props.cssGridPropertyName || Grid.display;\n    return Object.assign({\n      display: displayStyle\n    }, displayStyle === \"grid\" ? this.cssGridStyles() : this.msGridStyles(), this.unhandledProps().style);\n  }\n\n  cssGridStyles() {\n    return {\n      alignItems: this.generateAlignment(this.props.verticalAlign),\n      gridAutoRows: \"auto\",\n      gridColumn: this.props.gridColumn,\n      gridColumnGap: `${this.generateGutter()}px`,\n      gridRow: this.props.row,\n      gridTemplateColumns: `repeat(${this.props.columnCount}, 1fr)`,\n      justifyItems: this.generateAlignment(this.props.horizontalAlign)\n    };\n  }\n\n  msGridStyles() {\n    return {\n      msGridColumns: `1fr (${toPx(this.generateGutter())} 1fr)[${this.props.columnCount - 1}]`,\n      [\"msGridRow\"]: this.props.row,\n      [\"msGridColumn\"]: this.props.gridColumn\n    };\n  }\n  /**\n   * Creates tags for rendering based on href\n   */\n\n\n  generateHTMLTag() {\n    return GridTag[this.props.tag] || GridTag.div;\n  }\n\n  renderChildren() {\n    // We only need to communicate gutters size to ms-grid columns because\n    // css grid gives us a css property to set for gutter. If we support\n    // css grid, we can safely return children w/o gutter augmentation.\n    if (canUseCssGrid()) {\n      return this.props.children;\n    }\n\n    return React.Children.map(this.props.children, child => {\n      if (!child || child.type !== Column || child.props.gutter) {\n        return child;\n      }\n\n      return React.cloneElement(child, {\n        gutter: this.props.gutter\n      }, child.props.children);\n    });\n  }\n\n}\nGrid.displayName = \"Grid\";\nGrid.defaultProps = {\n  tag: GridTag.div,\n  gridColumn: 2,\n  gutter: 8,\n  verticalAlign: GridAlignment.stretch,\n  horizontalAlign: GridAlignment.stretch,\n  columnCount: 12,\n  managedClasses: {}\n};\nGrid.display = canUseCssGrid() ? \"grid\" : \"-ms-grid\";\nexport * from \"./grid.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/grid/grid.js"],"names":["React","BreakpointTracker","getValueByBreakpoint","GridAlignment","GridTag","Foundation","Column","canUseCssGrid","classNames","toPx","Grid","constructor","arguments","handledProps","columnCount","gridColumn","gutter","horizontalAlign","managedClasses","tag","verticalAlign","cssGridPropertyName","update","forceUpdate","generateHTMLTag","render","createElement","Object","assign","unhandledProps","className","generateClassNames","style","generateStyleAttributes","renderChildren","componentDidMount","shouldTrackBreakpoints","props","subscribe","componentWillUnmount","unsubscribe","componentDidUpdate","previousProps","grid","Array","isArray","length","generateGutter","generateAlignment","alignment","displayStyle","display","cssGridStyles","msGridStyles","alignItems","gridAutoRows","gridColumnGap","gridRow","row","gridTemplateColumns","justifyItems","msGridColumns","div","children","Children","map","child","type","cloneElement","displayName","defaultProps","stretch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { getValueByBreakpoint } from \"../utilities/breakpoints\";\nimport { GridAlignment, GridTag, } from \"./grid.props\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Column } from \"../column\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nimport { toPx } from \"@microsoft/fast-jss-utilities\";\nexport class Grid extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            columnCount: void 0,\n            gridColumn: void 0,\n            gutter: void 0,\n            horizontalAlign: void 0,\n            managedClasses: void 0,\n            tag: void 0,\n            verticalAlign: void 0,\n            cssGridPropertyName: void 0,\n        };\n        /**\n         * Force the component to update\n         */\n        this.update = () => {\n            this.forceUpdate();\n        };\n    }\n    /**\n     * Stores HTML tag for use in render\n     */\n    get tag() {\n        return this.generateHTMLTag();\n    }\n    /**\n     * Renders the Grid markup\n     */\n    render() {\n        return (React.createElement(this.tag, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: this.generateStyleAttributes() }), this.renderChildren()));\n    }\n    /**\n     * Component has mounted\n     */\n    componentDidMount() {\n        if (this.shouldTrackBreakpoints(this.props)) {\n            BreakpointTracker.subscribe(this.update);\n        }\n    }\n    /**\n     * Component will be unmounted\n     */\n    componentWillUnmount() {\n        BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n    componentDidUpdate(previousProps) {\n        if (this.shouldTrackBreakpoints(this.props) &&\n            !this.shouldTrackBreakpoints(previousProps)) {\n            // If we should be tracking breakpoints but previously weren't, subscribe to changes\n            BreakpointTracker.subscribe(this.update);\n        }\n        else if (!this.shouldTrackBreakpoints(this.props) &&\n            this.shouldTrackBreakpoints(previousProps)) {\n            // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n            BreakpointTracker.unsubscribe(this.update);\n        }\n    }\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.grid));\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n    shouldTrackBreakpoints(props) {\n        return Array.isArray(props.gutter) && props.gutter.length > 1;\n    }\n    /**\n     * Generates the column-span value\n     */\n    generateGutter() {\n        if (typeof this.props.gutter === \"number\") {\n            return this.props.gutter;\n        }\n        else if (Array.isArray(this.props.gutter)) {\n            return getValueByBreakpoint(this.props.gutter);\n        }\n        return null;\n    }\n    generateAlignment(alignment) {\n        return GridAlignment[alignment];\n    }\n    generateStyleAttributes() {\n        const displayStyle = this.props.cssGridPropertyName || Grid.display;\n        return Object.assign({ display: displayStyle }, (displayStyle === \"grid\" ? this.cssGridStyles() : this.msGridStyles()), this.unhandledProps().style);\n    }\n    cssGridStyles() {\n        return {\n            alignItems: this.generateAlignment(this.props.verticalAlign),\n            gridAutoRows: \"auto\",\n            gridColumn: this.props.gridColumn,\n            gridColumnGap: `${this.generateGutter()}px`,\n            gridRow: this.props.row,\n            gridTemplateColumns: `repeat(${this.props.columnCount}, 1fr)`,\n            justifyItems: this.generateAlignment(this.props.horizontalAlign),\n        };\n    }\n    msGridStyles() {\n        return {\n            msGridColumns: `1fr (${toPx(this.generateGutter())} 1fr)[${this.props\n                .columnCount - 1}]`,\n            [\"msGridRow\"]: this.props.row,\n            [\"msGridColumn\"]: this.props.gridColumn,\n        };\n    }\n    /**\n     * Creates tags for rendering based on href\n     */\n    generateHTMLTag() {\n        return GridTag[this.props.tag] || GridTag.div;\n    }\n    renderChildren() {\n        // We only need to communicate gutters size to ms-grid columns because\n        // css grid gives us a css property to set for gutter. If we support\n        // css grid, we can safely return children w/o gutter augmentation.\n        if (canUseCssGrid()) {\n            return this.props.children;\n        }\n        return React.Children.map(this.props.children, (child) => {\n            if (!child ||\n                child.type !== Column ||\n                child.props.gutter) {\n                return child;\n            }\n            return React.cloneElement(child, { gutter: this.props.gutter }, child.props.children);\n        });\n    }\n}\nGrid.displayName = \"Grid\";\nGrid.defaultProps = {\n    tag: GridTag.div,\n    gridColumn: 2,\n    gutter: 8,\n    verticalAlign: GridAlignment.stretch,\n    horizontalAlign: GridAlignment.stretch,\n    columnCount: 12,\n    managedClasses: {},\n};\nGrid.display = canUseCssGrid() ? \"grid\" : \"-ms-grid\";\nexport * from \"./grid.props\";\n"]},"metadata":{},"sourceType":"module"}