{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\n/**\n * Toggle base component\n */\n\nclass Toggle extends Foundation {\n  /**\n   * Define constructor\n   */\n  constructor(props) {\n    super(props);\n    this.handledProps = {\n      managedClasses: void 0,\n      disabled: void 0,\n      inputId: void 0,\n      labelId: void 0,\n      name: void 0,\n      selected: void 0,\n      selectedMessage: void 0,\n      statusMessageId: void 0,\n      unselectedMessage: void 0,\n      onChange: void 0\n    };\n    /**\n     * Handles onChange as a controlled component\n     */\n\n    this.handleToggleChange = e => {\n      if (typeof this.props.selected !== \"boolean\") {\n        this.setState({\n          selected: !this.state.selected\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(e);\n      }\n    };\n\n    this.state = {\n      selected: this.props.selected || false\n    };\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (typeof nextProps.selected === \"boolean\" && nextProps.selected !== prevState.selected) {\n      return {\n        selected: nextProps.selected\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    const _this$props$managedCl = this.props.managedClasses,\n          toggle_toggleButton = _this$props$managedCl.toggle_toggleButton,\n          toggle_input = _this$props$managedCl.toggle_input,\n          toggle_stateIndicator = _this$props$managedCl.toggle_stateIndicator;\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      className: this.generateClassNames(),\n      \"aria-disabled\": this.props.disabled || null\n    }), this.generateLabel(), React.createElement(\"div\", {\n      className: classNames(toggle_toggleButton)\n    }, React.createElement(\"input\", {\n      className: classNames(toggle_input),\n      type: \"checkbox\",\n      id: this.props.inputId,\n      \"aria-describedby\": this.props.statusMessageId,\n      disabled: this.props.disabled,\n      name: this.props.name,\n      value: this.generateToggleStateLabel(),\n      onChange: this.handleToggleChange,\n      checked: this.state.selected\n    }), React.createElement(\"span\", {\n      className: classNames(toggle_stateIndicator)\n    })), this.renderStatusMessage());\n  }\n  /**\n   * Generates class names\n   */\n\n\n  generateClassNames() {\n    const _this$props$managedCl2 = this.props.managedClasses,\n          toggle = _this$props$managedCl2.toggle,\n          toggle__disabled = _this$props$managedCl2.toggle__disabled,\n          toggle__checked = _this$props$managedCl2.toggle__checked;\n    return super.generateClassNames(classNames(toggle, [toggle__disabled, this.props.disabled], [toggle__checked, this.state.selected]));\n  }\n  /**\n   * Creates proper string based on state\n   */\n\n\n  generateToggleStateLabel() {\n    return this.state.selected ? this.props.selectedMessage : this.props.unselectedMessage;\n  }\n  /**\n   * Generates label if it exists\n   */\n\n\n  generateLabel() {\n    if (this.props.labelId || this.props.children) {\n      return React.createElement(\"label\", {\n        className: classNames(this.props.managedClasses.toggle_label),\n        id: this.props.labelId,\n        htmlFor: this.props.inputId\n      }, this.props.children);\n    }\n  }\n\n  renderStatusMessage() {\n    if (this.props.selectedMessage || this.props.unselectedMessage) {\n      return React.createElement(\"span\", {\n        id: this.props.statusMessageId,\n        className: classNames(this.props.managedClasses.toggle_statusMessage)\n      }, this.generateToggleStateLabel());\n    }\n  }\n\n}\n\nToggle.displayName = `${DisplayNamePrefix}Toggle`;\nToggle.defaultProps = {\n  managedClasses: {}\n};\nexport default Toggle;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/toggle/toggle.js"],"names":["Foundation","classNames","React","DisplayNamePrefix","Toggle","constructor","props","handledProps","managedClasses","disabled","inputId","labelId","name","selected","selectedMessage","statusMessageId","unselectedMessage","onChange","handleToggleChange","e","setState","state","getDerivedStateFromProps","nextProps","prevState","render","toggle_toggleButton","toggle_input","toggle_stateIndicator","createElement","Object","assign","unhandledProps","className","generateClassNames","generateLabel","type","id","value","generateToggleStateLabel","checked","renderStatusMessage","toggle","toggle__disabled","toggle__checked","children","toggle_label","htmlFor","toggle_statusMessage","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\n/**\n * Toggle base component\n */\nclass Toggle extends Foundation {\n    /**\n     * Define constructor\n     */\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            managedClasses: void 0,\n            disabled: void 0,\n            inputId: void 0,\n            labelId: void 0,\n            name: void 0,\n            selected: void 0,\n            selectedMessage: void 0,\n            statusMessageId: void 0,\n            unselectedMessage: void 0,\n            onChange: void 0,\n        };\n        /**\n         * Handles onChange as a controlled component\n         */\n        this.handleToggleChange = (e) => {\n            if (typeof this.props.selected !== \"boolean\") {\n                this.setState({ selected: !this.state.selected });\n            }\n            if (this.props.onChange) {\n                this.props.onChange(e);\n            }\n        };\n        this.state = {\n            selected: this.props.selected || false,\n        };\n    }\n    /**\n     * React life-cycle method\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (typeof nextProps.selected === \"boolean\" &&\n            nextProps.selected !== prevState.selected) {\n            return {\n                selected: nextProps.selected,\n            };\n        }\n        return null;\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const { toggle_toggleButton, toggle_input, toggle_stateIndicator, } = this.props.managedClasses;\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), \"aria-disabled\": this.props.disabled || null }),\n            this.generateLabel(),\n            React.createElement(\"div\", { className: classNames(toggle_toggleButton) },\n                React.createElement(\"input\", { className: classNames(toggle_input), type: \"checkbox\", id: this.props.inputId, \"aria-describedby\": this.props.statusMessageId, disabled: this.props.disabled, name: this.props.name, value: this.generateToggleStateLabel(), onChange: this.handleToggleChange, checked: this.state.selected }),\n                React.createElement(\"span\", { className: classNames(toggle_stateIndicator) })),\n            this.renderStatusMessage()));\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        const { toggle, toggle__disabled, toggle__checked, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(toggle, [toggle__disabled, this.props.disabled], [toggle__checked, this.state.selected]));\n    }\n    /**\n     * Creates proper string based on state\n     */\n    generateToggleStateLabel() {\n        return this.state.selected\n            ? this.props.selectedMessage\n            : this.props.unselectedMessage;\n    }\n    /**\n     * Generates label if it exists\n     */\n    generateLabel() {\n        if (this.props.labelId || this.props.children) {\n            return (React.createElement(\"label\", { className: classNames(this.props.managedClasses.toggle_label), id: this.props.labelId, htmlFor: this.props.inputId }, this.props.children));\n        }\n    }\n    renderStatusMessage() {\n        if (this.props.selectedMessage || this.props.unselectedMessage) {\n            return (React.createElement(\"span\", { id: this.props.statusMessageId, className: classNames(this.props.managedClasses.toggle_statusMessage) }, this.generateToggleStateLabel()));\n        }\n    }\n}\nToggle.displayName = `${DisplayNamePrefix}Toggle`;\nToggle.defaultProps = {\n    managedClasses: {},\n};\nexport default Toggle;\n"]},"metadata":{},"sourceType":"module"}