{"ast":null,"code":"import { contrastRatio, isColorStringHexRGB, isColorStringWebRGB, parseColorHexRGB, parseColorWebRGB, rgbToRelativeLuminance } from \"@microsoft/fast-colors\";\nimport { memoize } from \"lodash-es\";\n/**\n * The states that a swatch can have\n */\n\nexport var SwatchFamilyType;\n\n(function (SwatchFamilyType) {\n  SwatchFamilyType[\"rest\"] = \"rest\";\n  SwatchFamilyType[\"hover\"] = \"hover\";\n  SwatchFamilyType[\"active\"] = \"active\";\n  SwatchFamilyType[\"focus\"] = \"focus\";\n  SwatchFamilyType[\"selected\"] = \"selected\";\n})(SwatchFamilyType || (SwatchFamilyType = {}));\n\nexport function colorRecipeFactory(recipe) {\n  const memoizedRecipe = memoize(recipe);\n\n  function curryRecipe(arg) {\n    if (typeof arg === \"function\") {\n      return designSystem => {\n        return memoizedRecipe(Object.assign({}, designSystem, {\n          backgroundColor: arg(designSystem)\n        }));\n      };\n    } else {\n      return memoizedRecipe(arg);\n    }\n  }\n\n  return curryRecipe;\n}\n/**\n * Helper function to transform a SwatchFamilyResolver into simple ColorRecipe for simple use\n * use in stylesheets.\n */\n\nexport function swatchFamilyToSwatchRecipeFactory(type, callback) {\n  const memoizedRecipe = memoize(callback);\n  return arg => {\n    if (typeof arg === \"function\") {\n      return designSystem => {\n        return memoizedRecipe(Object.assign({}, designSystem, {\n          backgroundColor: arg(designSystem)\n        }))[type];\n      };\n    } else {\n      return memoizedRecipe(arg)[type];\n    }\n  };\n}\n/**\n * Converts a color string into a ColorRGBA64 instance.\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\n\nexport const parseColorString = memoize(color => {\n  let parsed = parseColorHexRGB(color);\n\n  if (parsed !== null) {\n    return parsed;\n  }\n\n  parsed = parseColorWebRGB(color);\n\n  if (parsed !== null) {\n    return parsed;\n  }\n\n  throw new Error(`${color} cannot be converted to a ColorRGBA64. Color strings must be one of the following formats: \"#RGB\", \"#RRGGBB\", or \"rgb(r, g, b)\"`);\n});\n/**\n * Determines if a string value represents a color\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\n\nexport function isValidColor(color) {\n  return isColorStringHexRGB(color) || isColorStringWebRGB(color);\n}\n/**\n * Determines if a color string matches another color.\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\n\nexport function colorMatches(a, b) {\n  return parseColorString(a).equalValue(parseColorString(b));\n}\n/**\n * Returns the contrast value between two color strings.\n * Supports #RRGGBB and rgb(r, g, b) formats.\n */\n\nexport const contrast = memoize((a, b) => {\n  return contrastRatio(parseColorString(a), parseColorString(b));\n}, (a, b) => a + b);\n/**\n * Returns the relative luminance of a color. If the value is not a color, -1 will be returned\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\n\nexport function luminance(color) {\n  return rgbToRelativeLuminance(parseColorString(color));\n}\nexport function designSystemResolverMax(...args) {\n  return designSystem => Math.max.apply(null, args.map(fn => fn(designSystem)));\n}\nexport const clamp = (value, min, max) => Math.min(Math.max(value, min), max);","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/color/common.js"],"names":["contrastRatio","isColorStringHexRGB","isColorStringWebRGB","parseColorHexRGB","parseColorWebRGB","rgbToRelativeLuminance","memoize","SwatchFamilyType","colorRecipeFactory","recipe","memoizedRecipe","curryRecipe","arg","designSystem","Object","assign","backgroundColor","swatchFamilyToSwatchRecipeFactory","type","callback","parseColorString","color","parsed","Error","isValidColor","colorMatches","a","b","equalValue","contrast","luminance","designSystemResolverMax","args","Math","max","apply","map","fn","clamp","value","min"],"mappings":"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","sourcesContent":["import { contrastRatio, isColorStringHexRGB, isColorStringWebRGB, parseColorHexRGB, parseColorWebRGB, rgbToRelativeLuminance, } from \"@microsoft/fast-colors\";\nimport { memoize } from \"lodash-es\";\n/**\n * The states that a swatch can have\n */\nexport var SwatchFamilyType;\n(function (SwatchFamilyType) {\n    SwatchFamilyType[\"rest\"] = \"rest\";\n    SwatchFamilyType[\"hover\"] = \"hover\";\n    SwatchFamilyType[\"active\"] = \"active\";\n    SwatchFamilyType[\"focus\"] = \"focus\";\n    SwatchFamilyType[\"selected\"] = \"selected\";\n})(SwatchFamilyType || (SwatchFamilyType = {}));\nexport function colorRecipeFactory(recipe) {\n    const memoizedRecipe = memoize(recipe);\n    function curryRecipe(arg) {\n        if (typeof arg === \"function\") {\n            return (designSystem) => {\n                return memoizedRecipe(Object.assign({}, designSystem, {\n                    backgroundColor: arg(designSystem),\n                }));\n            };\n        }\n        else {\n            return memoizedRecipe(arg);\n        }\n    }\n    return curryRecipe;\n}\n/**\n * Helper function to transform a SwatchFamilyResolver into simple ColorRecipe for simple use\n * use in stylesheets.\n */\nexport function swatchFamilyToSwatchRecipeFactory(type, callback) {\n    const memoizedRecipe = memoize(callback);\n    return (arg) => {\n        if (typeof arg === \"function\") {\n            return (designSystem) => {\n                return memoizedRecipe(Object.assign({}, designSystem, {\n                    backgroundColor: arg(designSystem),\n                }))[type];\n            };\n        }\n        else {\n            return memoizedRecipe(arg)[type];\n        }\n    };\n}\n/**\n * Converts a color string into a ColorRGBA64 instance.\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\nexport const parseColorString = memoize((color) => {\n    let parsed = parseColorHexRGB(color);\n    if (parsed !== null) {\n        return parsed;\n    }\n    parsed = parseColorWebRGB(color);\n    if (parsed !== null) {\n        return parsed;\n    }\n    throw new Error(`${color} cannot be converted to a ColorRGBA64. Color strings must be one of the following formats: \"#RGB\", \"#RRGGBB\", or \"rgb(r, g, b)\"`);\n});\n/**\n * Determines if a string value represents a color\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\nexport function isValidColor(color) {\n    return isColorStringHexRGB(color) || isColorStringWebRGB(color);\n}\n/**\n * Determines if a color string matches another color.\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\nexport function colorMatches(a, b) {\n    return parseColorString(a).equalValue(parseColorString(b));\n}\n/**\n * Returns the contrast value between two color strings.\n * Supports #RRGGBB and rgb(r, g, b) formats.\n */\nexport const contrast = memoize((a, b) => {\n    return contrastRatio(parseColorString(a), parseColorString(b));\n}, (a, b) => a + b);\n/**\n * Returns the relative luminance of a color. If the value is not a color, -1 will be returned\n * Supports #RRGGBB and rgb(r, g, b) formats\n */\nexport function luminance(color) {\n    return rgbToRelativeLuminance(parseColorString(color));\n}\nexport function designSystemResolverMax(...args) {\n    return (designSystem) => Math.max.apply(null, args.map((fn) => fn(designSystem)));\n}\nexport const clamp = (value, min, max) => Math.min(Math.max(value, min), max);\n"]},"metadata":{},"sourceType":"module"}