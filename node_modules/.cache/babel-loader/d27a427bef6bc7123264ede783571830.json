{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorPalette } from \"./color-palette\";\nimport { hslToRGB, rgbToHSL, rgbToLinearLuminance } from \"./color-converters\";\nimport { ColorScale } from \"./color-scale\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorInterpolationSpace } from \"./color-interpolation\";\nimport { parseColorHexRGB } from \"./parse-color\";\nexport var ComponentStateColorPalette =\n/*#__PURE__*/\nfunction () {\n  function ComponentStateColorPalette(config) {\n    _classCallCheck(this, ComponentStateColorPalette);\n\n    this.palette = [];\n    this.config = Object.assign({}, ComponentStateColorPalette.defaultPaletteConfig, config);\n    this.regenPalettes();\n  }\n\n  _createClass(ComponentStateColorPalette, [{\n    key: \"regenPalettes\",\n    value: function regenPalettes() {\n      var steps = this.config.steps;\n\n      if (isNaN(steps) || steps < 3) {\n        steps = 3;\n      } // This palette is tuned to go as dark as differences between the levels can be perceived according to tests\n      // on numerous monitors in different conditions. Stay linear from white until this first cutoff.\n\n\n      var darkLum = 0.14; // In the dark compression, this is the last luminance value before full black.\n\n      var darkestLum = 0.06; // The Color for the luminance value above, placed on the ramp at it's normal position, so darker colors after\n      // it can be compressed.\n\n      var darkLumColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1); // The number of steps in the ramp that has been tuned for default use. This coincides with the size of the\n      // default ramp, but the palette could be generated with fewer steps to increase final contrast. This number\n      // should however stay the same.\n\n      var stepsForLuminanceRamp = 94; // Create the reference, dark-compressed, grey palette, like:\n      // F------------------------------------------------------------------------------------[dark]------[darkest]0\n      //                                                                                      |--compressed area--|\n\n      var r = new ColorPalette(Object.assign({}, ColorPalette.greyscalePaletteConfig, {\n        baseColor: darkLumColor,\n        baseScalePosition: (1 - darkLum) * 100 / stepsForLuminanceRamp,\n        steps: steps\n      }));\n      var referencePalette = r.palette; // Find the requested base color on the adjusted luminance reference ramp.\n      // There is no _right_ way to desaturate a color, and both methods we've tested have value, so average them out.\n\n      var baseColorLum1 = rgbToLinearLuminance(this.config.baseColor);\n      var baseColorLum2 = rgbToHSL(this.config.baseColor).l;\n      var baseColorLum = (baseColorLum1 + baseColorLum2) / 2;\n      var baseColorRefIndex = this.matchRelativeLuminanceIndex(baseColorLum, referencePalette);\n      var baseColorPercent = baseColorRefIndex / (steps - 1); // Find the luminance location for the dark cutoff.\n\n      var darkRefIndex = this.matchRelativeLuminanceIndex(darkLum, referencePalette);\n      var darkPercent = darkRefIndex / (steps - 1); // Issue https://github.com/microsoft/fast-dna/issues/1904\n      // Creating a color from H, S, and a known L value is not the inverse of getting the relative\n      // luminace as above. Need to derive a relative luminance version of the color to better match on the dark end.\n      // Find the dark cutoff and darkest variations of the requested base color.\n\n      var baseColorHSL = rgbToHSL(this.config.baseColor);\n      var darkBaseColor = hslToRGB(ColorHSL.fromObject({\n        h: baseColorHSL.h,\n        s: baseColorHSL.s,\n        l: darkLum\n      }));\n      var darkestBaseColor = hslToRGB(ColorHSL.fromObject({\n        h: baseColorHSL.h,\n        s: baseColorHSL.s,\n        l: darkestLum\n      })); // Create the gradient stops, including the base color and anchor colors for the dark end compression.\n\n      var fullColorScaleStops = new Array(5);\n      fullColorScaleStops[0] = {\n        position: 0,\n        color: new ColorRGBA64(1, 1, 1, 1)\n      };\n      fullColorScaleStops[1] = {\n        position: baseColorPercent,\n        color: this.config.baseColor\n      };\n      fullColorScaleStops[2] = {\n        position: darkPercent,\n        color: darkBaseColor\n      };\n      fullColorScaleStops[3] = {\n        position: 0.99,\n        color: darkestBaseColor\n      };\n      fullColorScaleStops[4] = {\n        position: 1,\n        color: new ColorRGBA64(0, 0, 0, 1)\n      };\n      var scale = new ColorScale(fullColorScaleStops); // Create the palette.\n\n      this.palette = new Array(steps);\n\n      for (var i = 0; i < steps; i++) {\n        var c = scale.getColor(i / (steps - 1), ColorInterpolationSpace.RGB);\n        this.palette[i] = c;\n      }\n    }\n  }, {\n    key: \"matchRelativeLuminanceIndex\",\n    value: function matchRelativeLuminanceIndex(input, reference) {\n      var bestFitValue = Number.MAX_VALUE;\n      var bestFitIndex = 0;\n      var i = 0;\n      var referenceLength = reference.length;\n\n      for (; i < referenceLength; i++) {\n        var fitValue = Math.abs(rgbToLinearLuminance(reference[i]) - input);\n\n        if (fitValue < bestFitValue) {\n          bestFitValue = fitValue;\n          bestFitIndex = i;\n        }\n      }\n\n      return bestFitIndex;\n    }\n  }]);\n\n  return ComponentStateColorPalette;\n}();\nComponentStateColorPalette.defaultPaletteConfig = {\n  baseColor: parseColorHexRGB(\"#808080\"),\n  steps: 94\n};","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/component-state-color-palette.js"],"names":["ColorRGBA64","ColorPalette","hslToRGB","rgbToHSL","rgbToLinearLuminance","ColorScale","ColorHSL","ColorInterpolationSpace","parseColorHexRGB","ComponentStateColorPalette","config","palette","Object","assign","defaultPaletteConfig","regenPalettes","steps","isNaN","darkLum","darkestLum","darkLumColor","stepsForLuminanceRamp","r","greyscalePaletteConfig","baseColor","baseScalePosition","referencePalette","baseColorLum1","baseColorLum2","l","baseColorLum","baseColorRefIndex","matchRelativeLuminanceIndex","baseColorPercent","darkRefIndex","darkPercent","baseColorHSL","darkBaseColor","fromObject","h","s","darkestBaseColor","fullColorScaleStops","Array","position","color","scale","i","c","getColor","RGB","input","reference","bestFitValue","Number","MAX_VALUE","bestFitIndex","referenceLength","length","fitValue","Math","abs"],"mappings":"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","sourcesContent":["import { ColorRGBA64 } from \"./color-rgba-64\";\nimport { ColorPalette } from \"./color-palette\";\nimport { hslToRGB, rgbToHSL, rgbToLinearLuminance } from \"./color-converters\";\nimport { ColorScale } from \"./color-scale\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorInterpolationSpace } from \"./color-interpolation\";\nimport { parseColorHexRGB } from \"./parse-color\";\nexport class ComponentStateColorPalette {\n    constructor(config) {\n        this.palette = [];\n        this.config = Object.assign({}, ComponentStateColorPalette.defaultPaletteConfig, config);\n        this.regenPalettes();\n    }\n    regenPalettes() {\n        let steps = this.config.steps;\n        if (isNaN(steps) || steps < 3) {\n            steps = 3;\n        }\n        // This palette is tuned to go as dark as differences between the levels can be perceived according to tests\n        // on numerous monitors in different conditions. Stay linear from white until this first cutoff.\n        const darkLum = 0.14;\n        // In the dark compression, this is the last luminance value before full black.\n        const darkestLum = 0.06;\n        // The Color for the luminance value above, placed on the ramp at it's normal position, so darker colors after\n        // it can be compressed.\n        const darkLumColor = new ColorRGBA64(darkLum, darkLum, darkLum, 1);\n        // The number of steps in the ramp that has been tuned for default use. This coincides with the size of the\n        // default ramp, but the palette could be generated with fewer steps to increase final contrast. This number\n        // should however stay the same.\n        const stepsForLuminanceRamp = 94;\n        // Create the reference, dark-compressed, grey palette, like:\n        // F------------------------------------------------------------------------------------[dark]------[darkest]0\n        //                                                                                      |--compressed area--|\n        const r = new ColorPalette(Object.assign({}, ColorPalette.greyscalePaletteConfig, { baseColor: darkLumColor, baseScalePosition: ((1 - darkLum) * 100) / stepsForLuminanceRamp, steps }));\n        const referencePalette = r.palette;\n        // Find the requested base color on the adjusted luminance reference ramp.\n        // There is no _right_ way to desaturate a color, and both methods we've tested have value, so average them out.\n        const baseColorLum1 = rgbToLinearLuminance(this.config.baseColor);\n        const baseColorLum2 = rgbToHSL(this.config.baseColor).l;\n        const baseColorLum = (baseColorLum1 + baseColorLum2) / 2;\n        const baseColorRefIndex = this.matchRelativeLuminanceIndex(baseColorLum, referencePalette);\n        const baseColorPercent = baseColorRefIndex / (steps - 1);\n        // Find the luminance location for the dark cutoff.\n        const darkRefIndex = this.matchRelativeLuminanceIndex(darkLum, referencePalette);\n        const darkPercent = darkRefIndex / (steps - 1);\n        // Issue https://github.com/microsoft/fast-dna/issues/1904\n        // Creating a color from H, S, and a known L value is not the inverse of getting the relative\n        // luminace as above. Need to derive a relative luminance version of the color to better match on the dark end.\n        // Find the dark cutoff and darkest variations of the requested base color.\n        const baseColorHSL = rgbToHSL(this.config.baseColor);\n        const darkBaseColor = hslToRGB(ColorHSL.fromObject({\n            h: baseColorHSL.h,\n            s: baseColorHSL.s,\n            l: darkLum,\n        }));\n        const darkestBaseColor = hslToRGB(ColorHSL.fromObject({\n            h: baseColorHSL.h,\n            s: baseColorHSL.s,\n            l: darkestLum,\n        }));\n        // Create the gradient stops, including the base color and anchor colors for the dark end compression.\n        const fullColorScaleStops = new Array(5);\n        fullColorScaleStops[0] = {\n            position: 0,\n            color: new ColorRGBA64(1, 1, 1, 1),\n        };\n        fullColorScaleStops[1] = {\n            position: baseColorPercent,\n            color: this.config.baseColor,\n        };\n        fullColorScaleStops[2] = {\n            position: darkPercent,\n            color: darkBaseColor,\n        };\n        fullColorScaleStops[3] = {\n            position: 0.99,\n            color: darkestBaseColor,\n        };\n        fullColorScaleStops[4] = {\n            position: 1,\n            color: new ColorRGBA64(0, 0, 0, 1),\n        };\n        const scale = new ColorScale(fullColorScaleStops);\n        // Create the palette.\n        this.palette = new Array(steps);\n        for (let i = 0; i < steps; i++) {\n            const c = scale.getColor(i / (steps - 1), ColorInterpolationSpace.RGB);\n            this.palette[i] = c;\n        }\n    }\n    matchRelativeLuminanceIndex(input, reference) {\n        let bestFitValue = Number.MAX_VALUE;\n        let bestFitIndex = 0;\n        let i = 0;\n        const referenceLength = reference.length;\n        for (; i < referenceLength; i++) {\n            const fitValue = Math.abs(rgbToLinearLuminance(reference[i]) - input);\n            if (fitValue < bestFitValue) {\n                bestFitValue = fitValue;\n                bestFitIndex = i;\n            }\n        }\n        return bestFitIndex;\n    }\n}\nComponentStateColorPalette.defaultPaletteConfig = {\n    baseColor: parseColorHexRGB(\"#808080\"),\n    steps: 94,\n};\n"]},"metadata":{},"sourceType":"module"}