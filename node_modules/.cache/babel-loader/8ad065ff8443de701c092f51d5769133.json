{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\n// tslint:disable:member-ordering\nimport { clamp as _clamp, denormalize, getHexStringForByte, roundToPrecisionSmall } from \"./math-utilities\";\nexport var ColorRGBA64 =\n/*#__PURE__*/\nfunction () {\n  _createClass(ColorRGBA64, null, [{\n    key: \"fromObject\",\n    value: function fromObject(data) {\n      return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b) ? new ColorRGBA64(data.r, data.g, data.b, data.a) : null;\n    }\n  }]);\n\n  function ColorRGBA64(red, green, blue, alpha) {\n    _classCallCheck(this, ColorRGBA64);\n\n    this.r = red;\n    this.g = green;\n    this.b = blue;\n    this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n  }\n\n  _createClass(ColorRGBA64, [{\n    key: \"equalValue\",\n    value: function equalValue(rhs) {\n      return this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a;\n    } // #RRGGBB\n\n  }, {\n    key: \"toStringHexRGB\",\n    value: function toStringHexRGB() {\n      return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    } // #RRGGBBAA\n\n  }, {\n    key: \"toStringHexRGBA\",\n    value: function toStringHexRGBA() {\n      return this.toStringHexRGB() + this.formatHexValue(this.a);\n    } // #AARRGGBB\n\n  }, {\n    key: \"toStringHexARGB\",\n    value: function toStringHexARGB() {\n      return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    } // rgb(0xRR, 0xGG, 0xBB)\n\n  }, {\n    key: \"toStringWebRGB\",\n    value: function toStringWebRGB() {\n      return \"rgb(\".concat(Math.round(denormalize(this.r, 0.0, 255.0)), \",\").concat(Math.round(denormalize(this.g, 0.0, 255.0)), \",\").concat(Math.round(denormalize(this.b, 0.0, 255.0)), \")\");\n    } // rgba(0xRR, 0xGG, 0xBB, a)\n    // Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n\n  }, {\n    key: \"toStringWebRGBA\",\n    value: function toStringWebRGBA() {\n      return \"rgba(\".concat(Math.round(denormalize(this.r, 0.0, 255.0)), \",\").concat(Math.round(denormalize(this.g, 0.0, 255.0)), \",\").concat(Math.round(denormalize(this.b, 0.0, 255.0)), \",\").concat(_clamp(this.a, 0, 1), \")\");\n    }\n  }, {\n    key: \"roundToPrecision\",\n    value: function roundToPrecision(precision) {\n      return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      return new ColorRGBA64(_clamp(this.r, 0, 1), _clamp(this.g, 0, 1), _clamp(this.b, 0, 1), _clamp(this.a, 0, 1));\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        r: this.r,\n        g: this.g,\n        b: this.b,\n        a: this.a\n      };\n    }\n  }, {\n    key: \"formatHexValue\",\n    value: function formatHexValue(value) {\n      return getHexStringForByte(denormalize(value, 0.0, 255.0));\n    }\n  }]);\n\n  return ColorRGBA64;\n}();","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-rgba-64.js"],"names":["clamp","denormalize","getHexStringForByte","roundToPrecisionSmall","ColorRGBA64","data","isNaN","r","g","b","a","red","green","blue","alpha","rhs","map","formatHexValue","join","toStringHexRGB","Math","round","precision","value"],"mappings":"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","sourcesContent":["// tslint:disable:member-ordering\nimport { clamp, denormalize, getHexStringForByte, roundToPrecisionSmall, } from \"./math-utilities\";\nexport class ColorRGBA64 {\n    static fromObject(data) {\n        return data && !isNaN(data.r) && !isNaN(data.g) && !isNaN(data.b)\n            ? new ColorRGBA64(data.r, data.g, data.b, data.a)\n            : null;\n    }\n    constructor(red, green, blue, alpha) {\n        this.r = red;\n        this.g = green;\n        this.b = blue;\n        this.a = typeof alpha === \"number\" && !isNaN(alpha) ? alpha : 1;\n    }\n    equalValue(rhs) {\n        return (this.r === rhs.r && this.g === rhs.g && this.b === rhs.b && this.a === rhs.a);\n    }\n    // #RRGGBB\n    toStringHexRGB() {\n        return \"#\" + [this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    // #RRGGBBAA\n    toStringHexRGBA() {\n        return this.toStringHexRGB() + this.formatHexValue(this.a);\n    }\n    // #AARRGGBB\n    toStringHexARGB() {\n        return \"#\" + [this.a, this.r, this.g, this.b].map(this.formatHexValue).join(\"\");\n    }\n    // rgb(0xRR, 0xGG, 0xBB)\n    toStringWebRGB() {\n        return `rgb(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))})`;\n    }\n    // rgba(0xRR, 0xGG, 0xBB, a)\n    // Note that this follows the convention of putting alpha in the range [0.0,1.0] while the other three channels are [0,255]\n    toStringWebRGBA() {\n        return `rgba(${Math.round(denormalize(this.r, 0.0, 255.0))},${Math.round(denormalize(this.g, 0.0, 255.0))},${Math.round(denormalize(this.b, 0.0, 255.0))},${clamp(this.a, 0, 1)})`;\n    }\n    roundToPrecision(precision) {\n        return new ColorRGBA64(roundToPrecisionSmall(this.r, precision), roundToPrecisionSmall(this.g, precision), roundToPrecisionSmall(this.b, precision), roundToPrecisionSmall(this.a, precision));\n    }\n    clamp() {\n        return new ColorRGBA64(clamp(this.r, 0, 1), clamp(this.g, 0, 1), clamp(this.b, 0, 1), clamp(this.a, 0, 1));\n    }\n    toObject() {\n        return { r: this.r, g: this.g, b: this.b, a: this.a };\n    }\n    formatHexValue(value) {\n        return getHexStringForByte(denormalize(value, 0.0, 255.0));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}