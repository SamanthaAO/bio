{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnter, keyCodeSpace } from \"@microsoft/fast-web-utilities\";\nimport { getDisplayedNodes, isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { TreeViewContext } from \"../tree-view/tree-view\";\nimport { DisplayNamePrefix } from \"../utilities\";\n\nvar TreeViewItem =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(TreeViewItem, _Foundation);\n\n  function TreeViewItem(props) {\n    var _this;\n\n    _classCallCheck(this, TreeViewItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeViewItem).call(this, props));\n    _this.handledProps = {\n      dragConnect: void 0,\n      expandCollapseGlyph: void 0,\n      titleContent: void 0,\n      children: void 0,\n      managedClasses: void 0,\n      selected: void 0,\n      defaultExpanded: void 0,\n      onExpandedChange: void 0,\n      onSelected: void 0\n    };\n    _this.rootElement = React.createRef();\n    _this.expandCollapseButton = React.createRef();\n    /**\n     * Handles the focus event of the root element\n     */\n\n    _this.handleFocus = function (e) {\n      // Only change focusability if the event is on the node itself\n      // and not a child node\n      if (e.target === e.currentTarget) {\n        _this.setState({\n          focusable: true\n        }); // Notify the parent TreeView component that a new item has been focused,\n        // and should tree this item as the last-focused item\n\n\n        if (typeof _this.context.setLastFocused === \"function\") {\n          _this.context.setLastFocused(_this.rootElement);\n        }\n      }\n    };\n    /**\n     * Handles the blur event on the root element\n     */\n\n\n    _this.handleBlur = function (e) {\n      // Ignore the event if the event happened on a child node\n      if (!canUseDOM() || e.target !== e.currentTarget) {\n        return;\n      }\n\n      _this.setState({\n        focusable: false\n      });\n    };\n    /**\n     * handles the keydown event of the tree view item\n     */\n\n\n    _this.handleKeyDown = function (e) {\n      if (e.target !== e.currentTarget) {\n        return;\n      }\n\n      switch (e.keyCode) {\n        case keyCodeArrowLeft:\n          _this.handleArrowLeft();\n\n          break;\n\n        case keyCodeArrowRight:\n          _this.handleArrowRight();\n\n          break;\n\n        case keyCodeArrowDown:\n          // Prevent scrolling\n          e.preventDefault();\n\n          _this.focusNextNode(1);\n\n          break;\n\n        case keyCodeArrowUp:\n          // Prevent scrolling\n          e.preventDefault();\n\n          _this.focusNextNode(-1);\n\n          break;\n\n        case keyCodeEnter:\n          _this.handleSelected(e);\n\n          break;\n\n        case keyCodeSpace:\n          _this.handleSpaceBar();\n\n          break;\n      }\n    };\n    /**\n     * Click handler for expand/collapse button\n     */\n\n\n    _this.handleExpandCollapseButtonClick = function () {\n      _this.setExpanded(!_this.state.expanded);\n    };\n    /**\n     * Call the onSelected callback if it exists\n     */\n\n\n    _this.handleSelected = function (e) {\n      if (typeof _this.props.onSelected === \"function\") {\n        _this.props.onSelected(_this.props, e);\n      }\n    };\n    /**\n     * Handles the click event of the tree view item, except for the expand/collapse button\n     */\n\n\n    _this.handleContentContainerClick = function (e) {\n      var expandButton = _this.expandCollapseButton.current;\n\n      if (!isHTMLElement(expandButton) || isHTMLElement(expandButton) && expandButton !== e.target) {\n        _this.handleSelected(e);\n      }\n    };\n\n    _this.state = {\n      focusable: false,\n      expanded: _this.hasChildNodes() ? _this.props.defaultExpanded : undefined\n    };\n    return _this;\n  }\n\n  _createClass(TreeViewItem, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.hasChildNodes()) {\n        this.adjustNestedTreeItemCount(1);\n\n        if (this.hasSelectedChild() && !this.state.expanded) {\n          this.setExpanded(true);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // if we become selected, call the selected callback\n      if (this.props.selected && !prevProps.selected) {\n        this.handleSelected();\n      }\n\n      var hadChildNodes = this.hasChildNodes(prevProps);\n      var hasChildNodes = this.hasChildNodes();\n\n      if (hasChildNodes && !hadChildNodes) {\n        // if defaultExpanded is false and a child node is selected, set expanded (triggers callback)\n        // if not, set expanded state to this.props.defaultExpanded\n        this.props.defaultExpanded === false && this.hasSelectedChild() ? this.setExpanded(true) : this.setState({\n          expanded: this.props.defaultExpanded\n        });\n        this.adjustNestedTreeItemCount(1);\n      } else if (hadChildNodes && !hasChildNodes) {\n        this.adjustNestedTreeItemCount(-1);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.hasChildNodes()) {\n        this.adjustNestedTreeItemCount(-1);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        role: \"treeitem\",\n        \"aria-expanded\": this.state.expanded,\n        \"aria-selected\": !!this.props.selected,\n        tabIndex: this.state.focusable ? 0 : -1,\n        className: this.generateClassNames(),\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onKeyDown: this.handleKeyDown,\n        ref: this.rootElement\n      }), this.renderItem(), this.renderChildNodes());\n    }\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          treeViewItem = _this$props$managedCl.treeViewItem,\n          treeViewItem__expanded = _this$props$managedCl.treeViewItem__expanded,\n          treeViewItem__nested = _this$props$managedCl.treeViewItem__nested,\n          treeViewItem__selected = _this$props$managedCl.treeViewItem__selected;\n      return _get(_getPrototypeOf(TreeViewItem.prototype), \"generateClassNames\", this).call(this, classNames(treeViewItem, [treeViewItem__expanded, this.state.expanded], [treeViewItem__nested, this.context.nested], [treeViewItem__selected, this.props.selected]));\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem() {\n      var _this$props$managedCl2 = this.props.managedClasses,\n          treeViewItem_contentRegion = _this$props$managedCl2.treeViewItem_contentRegion,\n          treeViewItem_innerContentRegion = _this$props$managedCl2.treeViewItem_innerContentRegion;\n      var node = React.createElement(\"div\", {\n        className: classNames(treeViewItem_contentRegion),\n        onClick: this.handleContentContainerClick\n      }, React.createElement(\"div\", {\n        className: classNames(treeViewItem_innerContentRegion)\n      }, this.renderExpandCollapseButton(), this.props.titleContent));\n      return typeof this.props.dragConnect === \"function\" ? this.props.dragConnect(node) : node;\n    }\n  }, {\n    key: \"adjustNestedTreeItemCount\",\n    value: function adjustNestedTreeItemCount(count) {\n      if (typeof this.context.adjustNestedTreeItemCount === \"function\") {\n        this.context.adjustNestedTreeItemCount(count);\n      }\n    }\n    /**\n     * Determines if the item has sub-items and should be collapse/expandable\n     */\n\n  }, {\n    key: \"hasChildNodes\",\n    value: function hasChildNodes() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      return !!props.children;\n    }\n    /**\n     * Determines if the item has sub-items which are selected\n     */\n\n  }, {\n    key: \"hasSelectedChild\",\n    value: function hasSelectedChild() {\n      var currentNode = this.rootElement.current;\n\n      if (!isHTMLElement(currentNode) || !canUseDOM()) {\n        return null;\n      }\n\n      return !!currentNode.querySelector(\"[aria-selected='true'\");\n    }\n    /**\n     * Handles when the left arrow is pressed\n     */\n\n  }, {\n    key: \"handleArrowLeft\",\n    value: function handleArrowLeft() {\n      if (this.state.expanded) {\n        this.setExpanded(false);\n      } else if (canUseDOM() && isHTMLElement(this.rootElement.current) && isHTMLElement(this.rootElement.current.parentElement)) {\n        var parentElement = this.rootElement.current.parentElement;\n\n        if (isHTMLElement(parentElement)) {\n          var parentNode = parentElement.closest(\"[role='treeitem']\");\n\n          if (isHTMLElement(parentNode)) {\n            parentNode.focus();\n          }\n        }\n      }\n    }\n    /**\n     * Handles when the space bar is pressed\n     */\n\n  }, {\n    key: \"handleSpaceBar\",\n    value: function handleSpaceBar() {\n      if (typeof this.state.expanded !== \"boolean\") {\n        return;\n      }\n\n      this.setExpanded(!this.state.expanded);\n    }\n    /**\n     * Handles when the right arrow is pressed\n     */\n\n  }, {\n    key: \"handleArrowRight\",\n    value: function handleArrowRight() {\n      if (typeof this.state.expanded !== \"boolean\") {\n        return;\n      }\n\n      if (!this.state.expanded) {\n        this.setExpanded(true);\n      } else {\n        this.focusNextNode(1);\n      }\n    }\n  }, {\n    key: \"focusNextNode\",\n    value: function focusNextNode(delta) {\n      if (!canUseDOM()) {\n        return;\n      }\n\n      var visibleNodes = this.getVisibleNodes();\n\n      if (!visibleNodes) {\n        return;\n      }\n\n      var currentIndex = visibleNodes.indexOf(this.rootElement.current);\n\n      if (currentIndex !== -1) {\n        var nextElement = visibleNodes[currentIndex + delta];\n\n        if (isHTMLElement(nextElement)) {\n          nextElement.focus();\n        }\n      }\n    }\n    /**\n     * Returns an array of all tree item nodes that are\n     * currently visible (not hidden under a collapsed node)\n     */\n\n  }, {\n    key: \"getVisibleNodes\",\n    value: function getVisibleNodes() {\n      return canUseDOM() ? getDisplayedNodes(this.getTreeRoot(), \"[role='treeitem']\") : [];\n    }\n    /**\n     * Get the root element of the tree. This will always be the\n     * closest element with [role='tree']\n     */\n\n  }, {\n    key: \"getTreeRoot\",\n    value: function getTreeRoot() {\n      var currentNode = this.rootElement.current;\n\n      if (!isHTMLElement(currentNode) || !canUseDOM()) {\n        return null;\n      }\n\n      return currentNode.closest(\"[role='tree']\");\n    }\n  }, {\n    key: \"wrapChildOnSelected\",\n    value: function wrapChildOnSelected(childOnSelected) {\n      var _this2 = this;\n\n      return function (props, e) {\n        if (childOnSelected) {\n          childOnSelected(props, e);\n        }\n\n        _this2.setExpanded(true);\n      };\n    }\n  }, {\n    key: \"wrapChildOnExpandedChange\",\n    value: function wrapChildOnExpandedChange(childOnExpandedChange) {\n      var _this3 = this;\n\n      return function (childExpanded, childProps) {\n        if (childOnExpandedChange) {\n          childOnExpandedChange(childExpanded, childProps);\n        }\n\n        if (childExpanded) {\n          _this3.setExpanded(true);\n        }\n      };\n    }\n  }, {\n    key: \"renderChildNodes\",\n    value: function renderChildNodes() {\n      var _this4 = this;\n\n      return this.hasChildNodes() ? React.createElement(\"div\", {\n        role: \"group\",\n        className: classNames(this.props.managedClasses.treeViewItem_childNodeRegion)\n      }, React.Children.map(this.props.children, function (child) {\n        if (!React.isValidElement(child) || !child.props) {\n          return child;\n        }\n\n        return React.cloneElement(child, Object.assign({}, child.props, {\n          onSelected: _this4.wrapChildOnSelected(child.props.onSelected),\n          onExpandedChange: _this4.wrapChildOnExpandedChange(child.props.onExpandedChange)\n        }));\n      })) : null;\n    }\n  }, {\n    key: \"renderExpandCollapseButton\",\n    value: function renderExpandCollapseButton() {\n      var _this$props$managedCl3 = this.props.managedClasses,\n          treeViewItem_expandCollapseButton = _this$props$managedCl3.treeViewItem_expandCollapseButton,\n          treeViewItem_expandCollapseGlyph = _this$props$managedCl3.treeViewItem_expandCollapseGlyph;\n      return this.hasChildNodes() ? // This really should render a button but Narrator sometimes still brings it focus\n      // in scan-mode, so making this a div\n      React.createElement(\"div\", {\n        \"aria-hidden\": true,\n        className: classNames(treeViewItem_expandCollapseButton),\n        onClick: this.handleExpandCollapseButtonClick,\n        ref: this.expandCollapseButton\n      }, typeof this.props.expandCollapseGlyph === \"function\" ? this.props.expandCollapseGlyph(treeViewItem_expandCollapseGlyph) : null) : null;\n    }\n    /**\n     * Sets the expanded state of the component if necessary and\n     * notifies listeners of the state change.\n     */\n\n  }, {\n    key: \"setExpanded\",\n    value: function setExpanded(expanded) {\n      var _this5 = this;\n\n      if (this.hasChildNodes()) {\n        this.setState({\n          expanded: expanded\n        }, function () {\n          if (typeof _this5.props.onExpandedChange === \"function\") {\n            _this5.props.onExpandedChange(expanded, _this5.props);\n          }\n        });\n      }\n    }\n  }]);\n\n  return TreeViewItem;\n}(Foundation);\n\nTreeViewItem.displayName = \"\".concat(DisplayNamePrefix, \"TreeViewItem\");\nTreeViewItem.defaultProps = {\n  defaultExpanded: false,\n  managedClasses: {}\n};\nTreeViewItem.contextType = TreeViewContext;\nexport default TreeViewItem;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/tree-view-item/tree-view-item.js"],"names":["React","Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnter","keyCodeSpace","getDisplayedNodes","isHTMLElement","canUseDOM","TreeViewContext","DisplayNamePrefix","TreeViewItem","props","handledProps","dragConnect","expandCollapseGlyph","titleContent","children","managedClasses","selected","defaultExpanded","onExpandedChange","onSelected","rootElement","createRef","expandCollapseButton","handleFocus","e","target","currentTarget","setState","focusable","context","setLastFocused","handleBlur","handleKeyDown","keyCode","handleArrowLeft","handleArrowRight","preventDefault","focusNextNode","handleSelected","handleSpaceBar","handleExpandCollapseButtonClick","setExpanded","state","expanded","handleContentContainerClick","expandButton","current","hasChildNodes","undefined","adjustNestedTreeItemCount","hasSelectedChild","prevProps","hadChildNodes","createElement","Object","assign","unhandledProps","role","tabIndex","className","generateClassNames","onFocus","onBlur","onKeyDown","ref","renderItem","renderChildNodes","treeViewItem","treeViewItem__expanded","treeViewItem__nested","treeViewItem__selected","nested","treeViewItem_contentRegion","treeViewItem_innerContentRegion","node","onClick","renderExpandCollapseButton","count","currentNode","querySelector","parentElement","parentNode","closest","focus","delta","visibleNodes","getVisibleNodes","currentIndex","indexOf","nextElement","getTreeRoot","childOnSelected","childOnExpandedChange","childExpanded","childProps","treeViewItem_childNodeRegion","Children","map","child","isValidElement","cloneElement","wrapChildOnSelected","wrapChildOnExpandedChange","treeViewItem_expandCollapseButton","treeViewItem_expandCollapseGlyph","displayName","defaultProps","contextType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnter, keyCodeSpace, } from \"@microsoft/fast-web-utilities\";\nimport { getDisplayedNodes, isHTMLElement } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { TreeViewContext } from \"../tree-view/tree-view\";\nimport { DisplayNamePrefix } from \"../utilities\";\nclass TreeViewItem extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            dragConnect: void 0,\n            expandCollapseGlyph: void 0,\n            titleContent: void 0,\n            children: void 0,\n            managedClasses: void 0,\n            selected: void 0,\n            defaultExpanded: void 0,\n            onExpandedChange: void 0,\n            onSelected: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.expandCollapseButton = React.createRef();\n        /**\n         * Handles the focus event of the root element\n         */\n        this.handleFocus = (e) => {\n            // Only change focusability if the event is on the node itself\n            // and not a child node\n            if (e.target === e.currentTarget) {\n                this.setState({ focusable: true });\n                // Notify the parent TreeView component that a new item has been focused,\n                // and should tree this item as the last-focused item\n                if (typeof this.context.setLastFocused === \"function\") {\n                    this.context.setLastFocused(this.rootElement);\n                }\n            }\n        };\n        /**\n         * Handles the blur event on the root element\n         */\n        this.handleBlur = (e) => {\n            // Ignore the event if the event happened on a child node\n            if (!canUseDOM() || e.target !== e.currentTarget) {\n                return;\n            }\n            this.setState({ focusable: false });\n        };\n        /**\n         * handles the keydown event of the tree view item\n         */\n        this.handleKeyDown = (e) => {\n            if (e.target !== e.currentTarget) {\n                return;\n            }\n            switch (e.keyCode) {\n                case keyCodeArrowLeft:\n                    this.handleArrowLeft();\n                    break;\n                case keyCodeArrowRight:\n                    this.handleArrowRight();\n                    break;\n                case keyCodeArrowDown:\n                    // Prevent scrolling\n                    e.preventDefault();\n                    this.focusNextNode(1);\n                    break;\n                case keyCodeArrowUp:\n                    // Prevent scrolling\n                    e.preventDefault();\n                    this.focusNextNode(-1);\n                    break;\n                case keyCodeEnter:\n                    this.handleSelected(e);\n                    break;\n                case keyCodeSpace:\n                    this.handleSpaceBar();\n                    break;\n            }\n        };\n        /**\n         * Click handler for expand/collapse button\n         */\n        this.handleExpandCollapseButtonClick = () => {\n            this.setExpanded(!this.state.expanded);\n        };\n        /**\n         * Call the onSelected callback if it exists\n         */\n        this.handleSelected = (e) => {\n            if (typeof this.props.onSelected === \"function\") {\n                this.props.onSelected(this.props, e);\n            }\n        };\n        /**\n         * Handles the click event of the tree view item, except for the expand/collapse button\n         */\n        this.handleContentContainerClick = (e) => {\n            const expandButton = this.expandCollapseButton.current;\n            if (!isHTMLElement(expandButton) ||\n                (isHTMLElement(expandButton) && expandButton !== e.target)) {\n                this.handleSelected(e);\n            }\n        };\n        this.state = {\n            focusable: false,\n            expanded: this.hasChildNodes() ? this.props.defaultExpanded : undefined,\n        };\n    }\n    componentDidMount() {\n        if (this.hasChildNodes()) {\n            this.adjustNestedTreeItemCount(1);\n            if (this.hasSelectedChild() && !this.state.expanded) {\n                this.setExpanded(true);\n            }\n        }\n    }\n    componentDidUpdate(prevProps) {\n        // if we become selected, call the selected callback\n        if (this.props.selected && !prevProps.selected) {\n            this.handleSelected();\n        }\n        const hadChildNodes = this.hasChildNodes(prevProps);\n        const hasChildNodes = this.hasChildNodes();\n        if (hasChildNodes && !hadChildNodes) {\n            // if defaultExpanded is false and a child node is selected, set expanded (triggers callback)\n            // if not, set expanded state to this.props.defaultExpanded\n            this.props.defaultExpanded === false && this.hasSelectedChild()\n                ? this.setExpanded(true)\n                : this.setState({ expanded: this.props.defaultExpanded });\n            this.adjustNestedTreeItemCount(1);\n        }\n        else if (hadChildNodes && !hasChildNodes) {\n            this.adjustNestedTreeItemCount(-1);\n        }\n    }\n    componentWillUnmount() {\n        if (this.hasChildNodes()) {\n            this.adjustNestedTreeItemCount(-1);\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { role: \"treeitem\", \"aria-expanded\": this.state.expanded, \"aria-selected\": !!this.props.selected, tabIndex: this.state.focusable ? 0 : -1, className: this.generateClassNames(), onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, ref: this.rootElement }),\n            this.renderItem(),\n            this.renderChildNodes()));\n    }\n    generateClassNames() {\n        const { treeViewItem, treeViewItem__expanded, treeViewItem__nested, treeViewItem__selected, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(treeViewItem, [treeViewItem__expanded, this.state.expanded], [treeViewItem__nested, this.context.nested], [treeViewItem__selected, this.props.selected]));\n    }\n    renderItem() {\n        const { treeViewItem_contentRegion, treeViewItem_innerContentRegion, } = this.props.managedClasses;\n        const node = (React.createElement(\"div\", { className: classNames(treeViewItem_contentRegion), onClick: this.handleContentContainerClick },\n            React.createElement(\"div\", { className: classNames(treeViewItem_innerContentRegion) },\n                this.renderExpandCollapseButton(),\n                this.props.titleContent)));\n        return typeof this.props.dragConnect === \"function\"\n            ? this.props.dragConnect(node)\n            : node;\n    }\n    adjustNestedTreeItemCount(count) {\n        if (typeof this.context.adjustNestedTreeItemCount === \"function\") {\n            this.context.adjustNestedTreeItemCount(count);\n        }\n    }\n    /**\n     * Determines if the item has sub-items and should be collapse/expandable\n     */\n    hasChildNodes(props = this.props) {\n        return !!props.children;\n    }\n    /**\n     * Determines if the item has sub-items which are selected\n     */\n    hasSelectedChild() {\n        const currentNode = this.rootElement.current;\n        if (!isHTMLElement(currentNode) || !canUseDOM()) {\n            return null;\n        }\n        return !!currentNode.querySelector(\"[aria-selected='true'\");\n    }\n    /**\n     * Handles when the left arrow is pressed\n     */\n    handleArrowLeft() {\n        if (this.state.expanded) {\n            this.setExpanded(false);\n        }\n        else if (canUseDOM() &&\n            isHTMLElement(this.rootElement.current) &&\n            isHTMLElement(this.rootElement.current.parentElement)) {\n            const parentElement = this.rootElement.current.parentElement;\n            if (isHTMLElement(parentElement)) {\n                const parentNode = parentElement.closest(\"[role='treeitem']\");\n                if (isHTMLElement(parentNode)) {\n                    parentNode.focus();\n                }\n            }\n        }\n    }\n    /**\n     * Handles when the space bar is pressed\n     */\n    handleSpaceBar() {\n        if (typeof this.state.expanded !== \"boolean\") {\n            return;\n        }\n        this.setExpanded(!this.state.expanded);\n    }\n    /**\n     * Handles when the right arrow is pressed\n     */\n    handleArrowRight() {\n        if (typeof this.state.expanded !== \"boolean\") {\n            return;\n        }\n        if (!this.state.expanded) {\n            this.setExpanded(true);\n        }\n        else {\n            this.focusNextNode(1);\n        }\n    }\n    focusNextNode(delta) {\n        if (!canUseDOM()) {\n            return;\n        }\n        const visibleNodes = this.getVisibleNodes();\n        if (!visibleNodes) {\n            return;\n        }\n        const currentIndex = visibleNodes.indexOf(this.rootElement.current);\n        if (currentIndex !== -1) {\n            const nextElement = visibleNodes[currentIndex + delta];\n            if (isHTMLElement(nextElement)) {\n                nextElement.focus();\n            }\n        }\n    }\n    /**\n     * Returns an array of all tree item nodes that are\n     * currently visible (not hidden under a collapsed node)\n     */\n    getVisibleNodes() {\n        return canUseDOM()\n            ? getDisplayedNodes(this.getTreeRoot(), \"[role='treeitem']\")\n            : [];\n    }\n    /**\n     * Get the root element of the tree. This will always be the\n     * closest element with [role='tree']\n     */\n    getTreeRoot() {\n        const currentNode = this.rootElement.current;\n        if (!isHTMLElement(currentNode) || !canUseDOM()) {\n            return null;\n        }\n        return currentNode.closest(\"[role='tree']\");\n    }\n    wrapChildOnSelected(childOnSelected) {\n        return (props, e) => {\n            if (childOnSelected) {\n                childOnSelected(props, e);\n            }\n            this.setExpanded(true);\n        };\n    }\n    wrapChildOnExpandedChange(childOnExpandedChange) {\n        return (childExpanded, childProps) => {\n            if (childOnExpandedChange) {\n                childOnExpandedChange(childExpanded, childProps);\n            }\n            if (childExpanded) {\n                this.setExpanded(true);\n            }\n        };\n    }\n    renderChildNodes() {\n        return this.hasChildNodes() ? (React.createElement(\"div\", { role: \"group\", className: classNames(this.props.managedClasses.treeViewItem_childNodeRegion) }, React.Children.map(this.props.children, (child) => {\n            if (!React.isValidElement(child) || !child.props) {\n                return child;\n            }\n            return React.cloneElement(child, Object.assign({}, child.props, { onSelected: this.wrapChildOnSelected(child.props.onSelected), onExpandedChange: this.wrapChildOnExpandedChange(child.props.onExpandedChange) }));\n        }))) : null;\n    }\n    renderExpandCollapseButton() {\n        const { treeViewItem_expandCollapseButton, treeViewItem_expandCollapseGlyph, } = this.props.managedClasses;\n        return this.hasChildNodes() ? (\n        // This really should render a button but Narrator sometimes still brings it focus\n        // in scan-mode, so making this a div\n        React.createElement(\"div\", { \"aria-hidden\": true, className: classNames(treeViewItem_expandCollapseButton), onClick: this.handleExpandCollapseButtonClick, ref: this.expandCollapseButton }, typeof this.props.expandCollapseGlyph === \"function\"\n            ? this.props.expandCollapseGlyph(treeViewItem_expandCollapseGlyph)\n            : null)) : null;\n    }\n    /**\n     * Sets the expanded state of the component if necessary and\n     * notifies listeners of the state change.\n     */\n    setExpanded(expanded) {\n        if (this.hasChildNodes()) {\n            this.setState({\n                expanded,\n            }, () => {\n                if (typeof this.props.onExpandedChange === \"function\") {\n                    this.props.onExpandedChange(expanded, this.props);\n                }\n            });\n        }\n    }\n}\nTreeViewItem.displayName = `${DisplayNamePrefix}TreeViewItem`;\nTreeViewItem.defaultProps = {\n    defaultExpanded: false,\n    managedClasses: {},\n};\nTreeViewItem.contextType = TreeViewContext;\nexport default TreeViewItem;\n"]},"metadata":{},"sourceType":"module"}