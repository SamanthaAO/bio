{"ast":null,"code":"import { hslToRGB, labToRGB, lchToRGB, rgbToHSL, rgbToLAB, rgbToLCH } from \"./color-converters\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorLAB } from \"./color-lab\";\nimport { ColorLCH } from \"./color-lch\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { clamp } from \"./math-utilities\"; // The alpha channel of the input is ignored\n\nexport function saturateViaLCH(input, saturation) {\n  var saturationConstant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  var lch = rgbToLCH(input);\n  var sat = lch.c + saturation * saturationConstant;\n\n  if (sat < 0) {\n    sat = 0;\n  }\n\n  return lchToRGB(new ColorLCH(lch.l, sat, lch.h));\n} // The alpha channel of the input is ignored\n\nexport function desaturateViaLCH(input, saturation) {\n  var saturationConstant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  return saturateViaLCH(input, -1 * saturation, saturationConstant);\n} // The alpha channel of the input is ignored\n\nexport function darkenViaLAB(input, amount) {\n  var darkenConstant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  var lab = rgbToLAB(input);\n  var darkened = lab.l - amount * darkenConstant;\n  return labToRGB(new ColorLAB(darkened, lab.a, lab.b));\n} // The alpha channel of the input is ignored\n\nexport function lightenViaLAB(input, amount) {\n  var darkenConstant = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n  return darkenViaLAB(input, -1 * amount, darkenConstant);\n}\nexport function blendBurnChannel(bottom, top) {\n  if (top === 0.0) {\n    // Despite the discontinuity, other sources seem to use 0.0 here instead of 1\n    return 0.0;\n  }\n\n  return 1.0 - (1.0 - bottom) / top;\n} // The alpha channel of the input is ignored\n\nexport function blendBurn(bottom, top) {\n  return new ColorRGBA64(blendBurnChannel(bottom.r, top.r), blendBurnChannel(bottom.g, top.g), blendBurnChannel(bottom.b, top.b), 1);\n} // The alpha channel of the input is ignored\n\nexport function blendColor(bottom, top) {\n  var bottomHSL = rgbToHSL(bottom);\n  var topHSL = rgbToHSL(top);\n\n  if (topHSL.s === 0) {\n    return new ColorRGBA64(bottomHSL.l, bottomHSL.l, bottomHSL.l, 1);\n  }\n\n  return hslToRGB(new ColorHSL(topHSL.h, topHSL.s, bottomHSL.l));\n}\nexport function blendDarkenChannel(bottom, top) {\n  return Math.min(bottom, top);\n} // The alpha channel of the input is ignored\n\nexport function blendDarken(bottom, top) {\n  return new ColorRGBA64(blendDarkenChannel(bottom.r, top.r), blendDarkenChannel(bottom.g, top.g), blendDarkenChannel(bottom.b, top.b), 1);\n}\nexport function blendDodgeChannel(bottom, top) {\n  if (top >= 1.0) {\n    return 1.0;\n  }\n\n  var retVal = bottom / (1.0 - top);\n\n  if (retVal >= 1.0) {\n    return 1.0;\n  }\n\n  return retVal;\n} // The alpha channel of the input is ignored\n\nexport function blendDodge(bottom, top) {\n  return new ColorRGBA64(blendDodgeChannel(bottom.r, top.r), blendDodgeChannel(bottom.g, top.g), blendDodgeChannel(bottom.b, top.b), 1);\n}\nexport function blendLightenChannel(bottom, top) {\n  return Math.max(bottom, top);\n} // The alpha channel of the input is ignored\n\nexport function blendLighten(bottom, top) {\n  return new ColorRGBA64(blendLightenChannel(bottom.r, top.r), blendLightenChannel(bottom.g, top.g), blendLightenChannel(bottom.b, top.b), 1);\n}\nexport function blendMultiplyChannel(bottom, top) {\n  return bottom * top;\n} // The alpha channel of the input is ignored\n\nexport function blendMultiply(bottom, top) {\n  return new ColorRGBA64(blendMultiplyChannel(bottom.r, top.r), blendMultiplyChannel(bottom.g, top.g), blendMultiplyChannel(bottom.b, top.b), 1);\n}\nexport function blendOverlayChannel(bottom, top) {\n  if (bottom < 0.5) {\n    return clamp(2.0 * top * bottom, 0, 1);\n  }\n\n  return clamp(1.0 - 2.0 * (1.0 - top) * (1.0 - bottom), 0, 1);\n} // The alpha channel of the input is ignored\n\nexport function blendOverlay(bottom, top) {\n  return new ColorRGBA64(blendOverlayChannel(bottom.r, top.r), blendOverlayChannel(bottom.g, top.g), blendOverlayChannel(bottom.b, top.b), 1);\n}\nexport function blendScreenChannel(bottom, top) {\n  return 1.0 - (1.0 - top) * (1.0 - bottom);\n} // The alpha channel of the input is ignored\n\nexport function blendScreen(bottom, top) {\n  return new ColorRGBA64(blendScreenChannel(bottom.r, top.r), blendScreenChannel(bottom.g, top.g), blendScreenChannel(bottom.b, top.b), 1);\n}\nexport var ColorBlendMode;\n\n(function (ColorBlendMode) {\n  ColorBlendMode[ColorBlendMode[\"Burn\"] = 0] = \"Burn\";\n  ColorBlendMode[ColorBlendMode[\"Color\"] = 1] = \"Color\";\n  ColorBlendMode[ColorBlendMode[\"Darken\"] = 2] = \"Darken\";\n  ColorBlendMode[ColorBlendMode[\"Dodge\"] = 3] = \"Dodge\";\n  ColorBlendMode[ColorBlendMode[\"Lighten\"] = 4] = \"Lighten\";\n  ColorBlendMode[ColorBlendMode[\"Multiply\"] = 5] = \"Multiply\";\n  ColorBlendMode[ColorBlendMode[\"Overlay\"] = 6] = \"Overlay\";\n  ColorBlendMode[ColorBlendMode[\"Screen\"] = 7] = \"Screen\";\n})(ColorBlendMode || (ColorBlendMode = {})); // The alpha channel of the input is ignored\n\n\nexport function blend(mode, bottom, top) {\n  switch (mode) {\n    case ColorBlendMode.Burn:\n      return blendBurn(bottom, top);\n\n    case ColorBlendMode.Color:\n      return blendColor(bottom, top);\n\n    case ColorBlendMode.Darken:\n      return blendDarken(bottom, top);\n\n    case ColorBlendMode.Dodge:\n      return blendDodge(bottom, top);\n\n    case ColorBlendMode.Lighten:\n      return blendLighten(bottom, top);\n\n    case ColorBlendMode.Multiply:\n      return blendMultiply(bottom, top);\n\n    case ColorBlendMode.Overlay:\n      return blendOverlay(bottom, top);\n\n    case ColorBlendMode.Screen:\n      return blendScreen(bottom, top);\n\n    default:\n      throw new Error(\"Unknown blend mode\");\n  }\n} // Alpha channel of bottom is ignored\n// The returned color always has an alpha channel of 1\n// Different programs (eg: paint.net, photoshop) will give different answers than this occasionally but within +/- 1/255 in each channel. Just depends on the details of how they round off decimals\n\nexport function computeAlphaBlend(bottom, top) {\n  if (top.a >= 1) {\n    return top;\n  } else if (top.a <= 0) {\n    return new ColorRGBA64(bottom.r, bottom.g, bottom.b, 1);\n  }\n\n  var r = top.a * top.r + (1 - top.a) * bottom.r;\n  var g = top.a * top.g + (1 - top.a) * bottom.g;\n  var b = top.a * top.b + (1 - top.a) * bottom.b;\n  return new ColorRGBA64(r, g, b, 1);\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/color-blending.js"],"names":["hslToRGB","labToRGB","lchToRGB","rgbToHSL","rgbToLAB","rgbToLCH","ColorHSL","ColorLAB","ColorLCH","ColorRGBA64","clamp","saturateViaLCH","input","saturation","saturationConstant","lch","sat","c","l","h","desaturateViaLCH","darkenViaLAB","amount","darkenConstant","lab","darkened","a","b","lightenViaLAB","blendBurnChannel","bottom","top","blendBurn","r","g","blendColor","bottomHSL","topHSL","s","blendDarkenChannel","Math","min","blendDarken","blendDodgeChannel","retVal","blendDodge","blendLightenChannel","max","blendLighten","blendMultiplyChannel","blendMultiply","blendOverlayChannel","blendOverlay","blendScreenChannel","blendScreen","ColorBlendMode","blend","mode","Burn","Color","Darken","Dodge","Lighten","Multiply","Overlay","Screen","Error","computeAlphaBlend"],"mappings":"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","sourcesContent":["import { hslToRGB, labToRGB, lchToRGB, rgbToHSL, rgbToLAB, rgbToLCH, } from \"./color-converters\";\nimport { ColorHSL } from \"./color-hsl\";\nimport { ColorLAB } from \"./color-lab\";\nimport { ColorLCH } from \"./color-lch\";\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { clamp } from \"./math-utilities\";\n// The alpha channel of the input is ignored\nexport function saturateViaLCH(input, saturation, saturationConstant = 18) {\n    const lch = rgbToLCH(input);\n    let sat = lch.c + saturation * saturationConstant;\n    if (sat < 0) {\n        sat = 0;\n    }\n    return lchToRGB(new ColorLCH(lch.l, sat, lch.h));\n}\n// The alpha channel of the input is ignored\nexport function desaturateViaLCH(input, saturation, saturationConstant = 18) {\n    return saturateViaLCH(input, -1 * saturation, saturationConstant);\n}\n// The alpha channel of the input is ignored\nexport function darkenViaLAB(input, amount, darkenConstant = 18) {\n    const lab = rgbToLAB(input);\n    const darkened = lab.l - amount * darkenConstant;\n    return labToRGB(new ColorLAB(darkened, lab.a, lab.b));\n}\n// The alpha channel of the input is ignored\nexport function lightenViaLAB(input, amount, darkenConstant = 18) {\n    return darkenViaLAB(input, -1 * amount, darkenConstant);\n}\nexport function blendBurnChannel(bottom, top) {\n    if (top === 0.0) {\n        // Despite the discontinuity, other sources seem to use 0.0 here instead of 1\n        return 0.0;\n    }\n    return 1.0 - (1.0 - bottom) / top;\n}\n// The alpha channel of the input is ignored\nexport function blendBurn(bottom, top) {\n    return new ColorRGBA64(blendBurnChannel(bottom.r, top.r), blendBurnChannel(bottom.g, top.g), blendBurnChannel(bottom.b, top.b), 1);\n}\n// The alpha channel of the input is ignored\nexport function blendColor(bottom, top) {\n    const bottomHSL = rgbToHSL(bottom);\n    const topHSL = rgbToHSL(top);\n    if (topHSL.s === 0) {\n        return new ColorRGBA64(bottomHSL.l, bottomHSL.l, bottomHSL.l, 1);\n    }\n    return hslToRGB(new ColorHSL(topHSL.h, topHSL.s, bottomHSL.l));\n}\nexport function blendDarkenChannel(bottom, top) {\n    return Math.min(bottom, top);\n}\n// The alpha channel of the input is ignored\nexport function blendDarken(bottom, top) {\n    return new ColorRGBA64(blendDarkenChannel(bottom.r, top.r), blendDarkenChannel(bottom.g, top.g), blendDarkenChannel(bottom.b, top.b), 1);\n}\nexport function blendDodgeChannel(bottom, top) {\n    if (top >= 1.0) {\n        return 1.0;\n    }\n    const retVal = bottom / (1.0 - top);\n    if (retVal >= 1.0) {\n        return 1.0;\n    }\n    return retVal;\n}\n// The alpha channel of the input is ignored\nexport function blendDodge(bottom, top) {\n    return new ColorRGBA64(blendDodgeChannel(bottom.r, top.r), blendDodgeChannel(bottom.g, top.g), blendDodgeChannel(bottom.b, top.b), 1);\n}\nexport function blendLightenChannel(bottom, top) {\n    return Math.max(bottom, top);\n}\n// The alpha channel of the input is ignored\nexport function blendLighten(bottom, top) {\n    return new ColorRGBA64(blendLightenChannel(bottom.r, top.r), blendLightenChannel(bottom.g, top.g), blendLightenChannel(bottom.b, top.b), 1);\n}\nexport function blendMultiplyChannel(bottom, top) {\n    return bottom * top;\n}\n// The alpha channel of the input is ignored\nexport function blendMultiply(bottom, top) {\n    return new ColorRGBA64(blendMultiplyChannel(bottom.r, top.r), blendMultiplyChannel(bottom.g, top.g), blendMultiplyChannel(bottom.b, top.b), 1);\n}\nexport function blendOverlayChannel(bottom, top) {\n    if (bottom < 0.5) {\n        return clamp(2.0 * top * bottom, 0, 1);\n    }\n    return clamp(1.0 - 2.0 * (1.0 - top) * (1.0 - bottom), 0, 1);\n}\n// The alpha channel of the input is ignored\nexport function blendOverlay(bottom, top) {\n    return new ColorRGBA64(blendOverlayChannel(bottom.r, top.r), blendOverlayChannel(bottom.g, top.g), blendOverlayChannel(bottom.b, top.b), 1);\n}\nexport function blendScreenChannel(bottom, top) {\n    return 1.0 - (1.0 - top) * (1.0 - bottom);\n}\n// The alpha channel of the input is ignored\nexport function blendScreen(bottom, top) {\n    return new ColorRGBA64(blendScreenChannel(bottom.r, top.r), blendScreenChannel(bottom.g, top.g), blendScreenChannel(bottom.b, top.b), 1);\n}\nexport var ColorBlendMode;\n(function (ColorBlendMode) {\n    ColorBlendMode[ColorBlendMode[\"Burn\"] = 0] = \"Burn\";\n    ColorBlendMode[ColorBlendMode[\"Color\"] = 1] = \"Color\";\n    ColorBlendMode[ColorBlendMode[\"Darken\"] = 2] = \"Darken\";\n    ColorBlendMode[ColorBlendMode[\"Dodge\"] = 3] = \"Dodge\";\n    ColorBlendMode[ColorBlendMode[\"Lighten\"] = 4] = \"Lighten\";\n    ColorBlendMode[ColorBlendMode[\"Multiply\"] = 5] = \"Multiply\";\n    ColorBlendMode[ColorBlendMode[\"Overlay\"] = 6] = \"Overlay\";\n    ColorBlendMode[ColorBlendMode[\"Screen\"] = 7] = \"Screen\";\n})(ColorBlendMode || (ColorBlendMode = {}));\n// The alpha channel of the input is ignored\nexport function blend(mode, bottom, top) {\n    switch (mode) {\n        case ColorBlendMode.Burn:\n            return blendBurn(bottom, top);\n        case ColorBlendMode.Color:\n            return blendColor(bottom, top);\n        case ColorBlendMode.Darken:\n            return blendDarken(bottom, top);\n        case ColorBlendMode.Dodge:\n            return blendDodge(bottom, top);\n        case ColorBlendMode.Lighten:\n            return blendLighten(bottom, top);\n        case ColorBlendMode.Multiply:\n            return blendMultiply(bottom, top);\n        case ColorBlendMode.Overlay:\n            return blendOverlay(bottom, top);\n        case ColorBlendMode.Screen:\n            return blendScreen(bottom, top);\n        default:\n            throw new Error(\"Unknown blend mode\");\n    }\n}\n// Alpha channel of bottom is ignored\n// The returned color always has an alpha channel of 1\n// Different programs (eg: paint.net, photoshop) will give different answers than this occasionally but within +/- 1/255 in each channel. Just depends on the details of how they round off decimals\nexport function computeAlphaBlend(bottom, top) {\n    if (top.a >= 1) {\n        return top;\n    }\n    else if (top.a <= 0) {\n        return new ColorRGBA64(bottom.r, bottom.g, bottom.b, 1);\n    }\n    const r = top.a * top.r + (1 - top.a) * bottom.r;\n    const g = top.a * top.g + (1 - top.a) * bottom.g;\n    const b = top.a * top.b + (1 - top.a) * bottom.b;\n    return new ColorRGBA64(r, g, b, 1);\n}\n"]},"metadata":{},"sourceType":"module"}