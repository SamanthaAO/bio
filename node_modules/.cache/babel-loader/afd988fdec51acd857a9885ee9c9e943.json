{"ast":null,"code":"import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { identifyBreakpoint } from \"../utilities/breakpoints\";\nimport { canUseDOM } from \"exenv-es6\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nexport class Column extends Foundation {\n  constructor() {\n    super(...arguments);\n    this.handledProps = {\n      managedClasses: void 0,\n      span: void 0,\n      position: void 0,\n      row: void 0,\n      order: void 0,\n      gutter: void 0,\n      cssGridPropertyName: void 0,\n      defaultBreakpoint: void 0\n    };\n    /**\n     * Force the component to update\n     */\n\n    this.update = () => {\n      this.forceUpdate();\n    };\n  }\n  /**\n   * Component has mounted\n   */\n\n\n  componentDidMount() {\n    if (this.shouldTrackBreakpoints(this.props)) {\n      BreakpointTracker.subscribe(this.update);\n    }\n  }\n  /**\n   * Component will be unmounted\n   */\n\n\n  componentWillUnmount() {\n    BreakpointTracker.unsubscribe(this.update);\n  }\n  /**\n   * Component has updated\n   */\n\n\n  componentDidUpdate(previousProps) {\n    if (this.shouldTrackBreakpoints(this.props) && !this.shouldTrackBreakpoints(previousProps)) {\n      // If we should be tracking breakpoints but previously weren't, subscribe to changes\n      BreakpointTracker.subscribe(this.update);\n    } else if (!this.shouldTrackBreakpoints(this.props) && this.shouldTrackBreakpoints(previousProps)) {\n      // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n      BreakpointTracker.unsubscribe(this.update);\n    }\n  }\n  /**\n   * Render the component\n   */\n\n\n  render() {\n    return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n      className: this.generateClassNames(),\n      style: this.generateStyleAttribute()\n    }), this.props.children);\n  }\n  /**\n   * Generates the column classes\n   */\n\n\n  generateClassNames() {\n    return super.generateClassNames(classNames(this.props.managedClasses.column));\n  }\n  /**\n   * Gets a value from an array where the index retrieved is either the current break-point\n   * or the nearest preceding break-point if no entry exists for the current break-point\n   */\n\n\n  getValueByBreakpoint(breakpointSet) {\n    const breakpoint = canUseDOM() ? identifyBreakpoint(window.innerWidth) : this.props.defaultBreakpoint;\n    return breakpointSet.slice(0, breakpoint + 1).pop();\n  }\n  /**\n   * Generates the column-span value\n   */\n\n\n  generateColumnSpan() {\n    if (typeof this.props.span === \"number\") {\n      return this.props.span;\n    }\n\n    if (!Array.isArray(this.props.span)) {\n      return Column.defaultProps.span;\n    }\n\n    return this.getValueByBreakpoint(this.props.span);\n  }\n  /**\n   * Generates the position of a column\n   */\n\n\n  generateColumnPosition() {\n    if (typeof this.props.position === \"number\") {\n      return this.props.position;\n    } else if (Array.isArray(this.props.position)) {\n      return this.getValueByBreakpoint(this.props.position);\n    }\n\n    return null;\n  }\n  /**\n   * Generates the row that a column should be placed in\n   */\n\n\n  generateRow() {\n    if (typeof this.props.row === \"number\") {\n      return this.props.row.toString();\n    } else if (Array.isArray(this.props.row)) {\n      return this.getValueByBreakpoint(this.props.row).toString();\n    }\n\n    return null;\n  }\n\n  augmentMsGrid(value) {\n    if (this.props.gutter === 0 || value === null) {\n      return value;\n    }\n\n    return value === 1 ? 1 : value * 2 - 1;\n  }\n  /**\n   * Generates the style attribute of the column\n   */\n\n\n  generateStyleAttribute() {\n    const position = this.generateColumnPosition();\n    const row = this.generateRow();\n    const span = this.generateColumnSpan();\n    const gridColumnValue = [position, `span ${span}`].filter(item => Boolean(item)).join(\" / \");\n    const order = Array.isArray(this.props.order) ? this.getValueByBreakpoint(this.props.order) : this.props.order;\n    const canUseCssGridStyle = this.props.cssGridPropertyName === \"grid\" ? true : this.props.cssGridPropertyName === \"-ms-grid\" ? false : canUseCssGrid();\n    const gridStyles = canUseCssGridStyle ? {\n      gridColumn: gridColumnValue,\n      gridRowStart: row\n    } : {\n      [\"msGridColumn\"]: this.augmentMsGrid(position),\n      [\"msGridColumnSpan\"]: this.augmentMsGrid(span),\n      [\"msGridRow\"]: row\n    };\n    return Object.assign({}, gridStyles, {\n      order: typeof order === \"number\" ? order : null,\n      // Fixes issue found in firefox where columns that have overflow\n      // or full width content cause scroll bars\n      minWidth: \"0\"\n    }, this.unhandledProps().style);\n  }\n  /**\n   * Determines if we should be tracking breakpoints based on a set of props\n   */\n\n\n  shouldTrackBreakpoints(props) {\n    return Array.isArray(props.span) && props.span.length > 1 || Array.isArray(props.position) && props.position.length > 1;\n  }\n\n}\nColumn.displayName = \"Column\";\n/**\n * Define default props\n */\n\nColumn.defaultProps = {\n  managedClasses: {},\n  span: 12,\n  defaultBreakpoint: 0\n};","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/column/column.js"],"names":["React","BreakpointTracker","identifyBreakpoint","canUseDOM","Foundation","canUseCssGrid","classNames","Column","constructor","arguments","handledProps","managedClasses","span","position","row","order","gutter","cssGridPropertyName","defaultBreakpoint","update","forceUpdate","componentDidMount","shouldTrackBreakpoints","props","subscribe","componentWillUnmount","unsubscribe","componentDidUpdate","previousProps","render","createElement","Object","assign","unhandledProps","className","generateClassNames","style","generateStyleAttribute","children","column","getValueByBreakpoint","breakpointSet","breakpoint","window","innerWidth","slice","pop","generateColumnSpan","Array","isArray","defaultProps","generateColumnPosition","generateRow","toString","augmentMsGrid","value","gridColumnValue","filter","item","Boolean","join","canUseCssGridStyle","gridStyles","gridColumn","gridRowStart","minWidth","length","displayName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { identifyBreakpoint } from \"../utilities/breakpoints\";\nimport { canUseDOM } from \"exenv-es6\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nexport class Column extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            managedClasses: void 0,\n            span: void 0,\n            position: void 0,\n            row: void 0,\n            order: void 0,\n            gutter: void 0,\n            cssGridPropertyName: void 0,\n            defaultBreakpoint: void 0,\n        };\n        /**\n         * Force the component to update\n         */\n        this.update = () => {\n            this.forceUpdate();\n        };\n    }\n    /**\n     * Component has mounted\n     */\n    componentDidMount() {\n        if (this.shouldTrackBreakpoints(this.props)) {\n            BreakpointTracker.subscribe(this.update);\n        }\n    }\n    /**\n     * Component will be unmounted\n     */\n    componentWillUnmount() {\n        BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n    componentDidUpdate(previousProps) {\n        if (this.shouldTrackBreakpoints(this.props) &&\n            !this.shouldTrackBreakpoints(previousProps)) {\n            // If we should be tracking breakpoints but previously weren't, subscribe to changes\n            BreakpointTracker.subscribe(this.update);\n        }\n        else if (!this.shouldTrackBreakpoints(this.props) &&\n            this.shouldTrackBreakpoints(previousProps)) {\n            // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n            BreakpointTracker.unsubscribe(this.update);\n        }\n    }\n    /**\n     * Render the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: this.generateStyleAttribute() }), this.props.children));\n    }\n    /**\n     * Generates the column classes\n     */\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.column));\n    }\n    /**\n     * Gets a value from an array where the index retrieved is either the current break-point\n     * or the nearest preceding break-point if no entry exists for the current break-point\n     */\n    getValueByBreakpoint(breakpointSet) {\n        const breakpoint = canUseDOM()\n            ? identifyBreakpoint(window.innerWidth)\n            : this.props.defaultBreakpoint;\n        return breakpointSet.slice(0, breakpoint + 1).pop();\n    }\n    /**\n     * Generates the column-span value\n     */\n    generateColumnSpan() {\n        if (typeof this.props.span === \"number\") {\n            return this.props.span;\n        }\n        if (!Array.isArray(this.props.span)) {\n            return Column.defaultProps.span;\n        }\n        return this.getValueByBreakpoint(this.props.span);\n    }\n    /**\n     * Generates the position of a column\n     */\n    generateColumnPosition() {\n        if (typeof this.props.position === \"number\") {\n            return this.props.position;\n        }\n        else if (Array.isArray(this.props.position)) {\n            return this.getValueByBreakpoint(this.props.position);\n        }\n        return null;\n    }\n    /**\n     * Generates the row that a column should be placed in\n     */\n    generateRow() {\n        if (typeof this.props.row === \"number\") {\n            return this.props.row.toString();\n        }\n        else if (Array.isArray(this.props.row)) {\n            return this.getValueByBreakpoint(this.props.row).toString();\n        }\n        return null;\n    }\n    augmentMsGrid(value) {\n        if (this.props.gutter === 0 || value === null) {\n            return value;\n        }\n        return value === 1 ? 1 : value * 2 - 1;\n    }\n    /**\n     * Generates the style attribute of the column\n     */\n    generateStyleAttribute() {\n        const position = this.generateColumnPosition();\n        const row = this.generateRow();\n        const span = this.generateColumnSpan();\n        const gridColumnValue = [position, `span ${span}`]\n            .filter((item) => Boolean(item))\n            .join(\" / \");\n        const order = Array.isArray(this.props.order)\n            ? this.getValueByBreakpoint(this.props.order)\n            : this.props.order;\n        const canUseCssGridStyle = this.props.cssGridPropertyName === \"grid\"\n            ? true\n            : this.props.cssGridPropertyName === \"-ms-grid\"\n                ? false\n                : canUseCssGrid();\n        const gridStyles = canUseCssGridStyle\n            ? {\n                gridColumn: gridColumnValue,\n                gridRowStart: row,\n            }\n            : {\n                [\"msGridColumn\"]: this.augmentMsGrid(position),\n                [\"msGridColumnSpan\"]: this.augmentMsGrid(span),\n                [\"msGridRow\"]: row,\n            };\n        return Object.assign({}, gridStyles, { order: typeof order === \"number\" ? order : null, \n            // Fixes issue found in firefox where columns that have overflow\n            // or full width content cause scroll bars\n            minWidth: \"0\" }, this.unhandledProps().style);\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n    shouldTrackBreakpoints(props) {\n        return ((Array.isArray(props.span) && props.span.length > 1) ||\n            (Array.isArray(props.position) && props.position.length > 1));\n    }\n}\nColumn.displayName = \"Column\";\n/**\n * Define default props\n */\nColumn.defaultProps = {\n    managedClasses: {},\n    span: 12,\n    defaultBreakpoint: 0,\n};\n"]},"metadata":{},"sourceType":"module"}