{"ast":null,"code":"import { canUseDOM } from \"exenv-es6\";\nimport { Direction } from \"./localization\";\n/**\n * Standardize left scroll conversion when direction is rtl\n * inspired by\n * https://github.com/alitaheri/normalize-scroll-left\n */\n\nexport class RtlScrollConverter {\n  /**\n   *  Gets the scrollLeft value of the provided element\n   */\n  static getScrollLeft(scrolledElement, direction) {\n    if (direction === Direction.rtl) {\n      return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n    }\n\n    return scrolledElement.scrollLeft;\n  }\n  /**\n   * Sets the scrollLeft value of the provided element\n   */\n\n\n  static setScrollLeft(scrolledElement, scrollValue, direction) {\n    if (direction === Direction.rtl) {\n      RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, scrollValue);\n      return;\n    }\n\n    scrolledElement.scrollLeft = scrollValue;\n  }\n  /**\n   * The initial rtl scroll converter getter function, it calls the browser test to set the correct converter\n   * functions and then invokes the getter\n   */\n\n\n  static initialGetRtlScrollConverter(scrolledElement) {\n    RtlScrollConverter.initializeRtlScrollConverters();\n    return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n  }\n  /**\n   * The \"direct\" rtl get scroll converter does not need to tamper with the scrollLeft\n   * values as the browser is already doing the right thing.  Content start = 0 and\n   * scrolling left goes negative.\n   */\n\n\n  static directGetRtlScrollConverter(scrolledElement) {\n    return scrolledElement.scrollLeft;\n  }\n  /**\n   * The \"inverted\" get scroll converter is used when the browser reports scroll left\n   * as a positive maximum scroll value at content start and then goes to zero as content\n   * is scrolled left\n   */\n\n\n  static invertedGetRtlScrollConverter(scrolledElement) {\n    return -Math.abs(scrolledElement.scrollLeft);\n  }\n  /**\n   * The \"reverse\" get scroll converter is used when the browser reports scroll left\n   * as 0 at content start and then goes positive as content is scrolled left\n   */\n\n\n  static reverseGetRtlScrollConverter(scrolledElement) {\n    return scrolledElement.scrollLeft - (scrolledElement.scrollWidth - scrolledElement.clientWidth);\n  }\n  /**\n   * The initial rtl scroll converter setter function, it calls the browser test to set the correct converter\n   * functions and then invokes the setter\n   */\n\n\n  static initialSetRtlScrollConverter(scrolledElement, newScrollValue) {\n    RtlScrollConverter.initializeRtlScrollConverters();\n    RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, newScrollValue);\n  }\n  /**\n   * The \"direct\" rtl set scroll converter does not need to tamper with the scrollLeft\n   * values as the browser is already doing the right thing.  Content start = 0 and\n   * scrolling left goes negative.\n   */\n\n\n  static directSetRtlScrollConverter(scrolledElement, newScrollValue) {\n    scrolledElement.scrollLeft = newScrollValue;\n  }\n  /**\n   * The \"inverted\" set scroll converter is used when the browser reports scroll left\n   * as a positive maximum scroll value at content start and then goes to zero as content\n   * is scrolled left\n   */\n\n\n  static invertedSetRtlScrollConverter(scrolledElement, newScrollValue) {\n    scrolledElement.scrollLeft = Math.abs(newScrollValue);\n  }\n  /**\n   * The \"reverse\" set scroll converter is used when the browser reports scroll left\n   * as 0 at content start and then goes positive as content is scrolled left\n   */\n\n\n  static reverseSetRtlScrollConverter(scrolledElement, newScrollValue) {\n    const maxScroll = scrolledElement.scrollWidth - scrolledElement.clientWidth;\n    scrolledElement.scrollLeft = maxScroll + newScrollValue;\n  }\n  /**\n   * detects the appropriate rtl scroll converter functions and assigns them\n   * should only run once\n   */\n\n\n  static initializeRtlScrollConverters() {\n    if (!canUseDOM()) {\n      RtlScrollConverter.applyDirectScrollConverters();\n      return;\n    }\n\n    const testElement = RtlScrollConverter.getTestElement();\n    document.body.appendChild(testElement);\n    RtlScrollConverter.checkForScrollType(testElement);\n    document.body.removeChild(testElement);\n  }\n  /**\n   * checks the provided test element to determine scroll type\n   * and apply appropriate converters\n   */\n\n\n  static checkForScrollType(testElement) {\n    if (RtlScrollConverter.isReverse(testElement)) {\n      RtlScrollConverter.applyReverseScrollConverters();\n    } else {\n      if (RtlScrollConverter.isDirect(testElement)) {\n        RtlScrollConverter.applyDirectScrollConverters();\n      } else {\n        RtlScrollConverter.applyInvertedScrollConverters();\n      }\n    }\n  }\n  /**\n   * checks test element initial state for rtl \"reverse\" mode\n   */\n\n\n  static isReverse(testElement) {\n    return testElement.scrollLeft > 0;\n  }\n  /**\n   * checks test element for rtl \"direct\" mode\n   */\n\n\n  static isDirect(testElement) {\n    testElement.scrollLeft = -1;\n    return testElement.scrollLeft === -1;\n  }\n  /**\n   * apply direct scroll conververters\n   */\n\n\n  static applyDirectScrollConverters() {\n    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.directSetRtlScrollConverter;\n    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.directGetRtlScrollConverter;\n  }\n  /**\n   * apply inverted scroll conververters\n   */\n\n\n  static applyInvertedScrollConverters() {\n    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.invertedSetRtlScrollConverter;\n    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.invertedGetRtlScrollConverter;\n  }\n  /**\n   * apply reverse scroll conververters\n   */\n\n\n  static applyReverseScrollConverters() {\n    RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.reverseSetRtlScrollConverter;\n    RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.reverseGetRtlScrollConverter;\n  }\n  /**\n   * generate a test element for rtl testing\n   */\n\n\n  static getTestElement() {\n    const testElement = document.createElement(\"div\");\n    testElement.appendChild(document.createTextNode(\"ABCD\"));\n    testElement.dir = \"rtl\";\n    testElement.style.fontSize = \"14px\";\n    testElement.style.width = \"4px\";\n    testElement.style.height = \"1px\";\n    testElement.style.position = \"absolute\";\n    testElement.style.top = \"-1000px\";\n    testElement.style.overflow = \"scroll\";\n    return testElement;\n  }\n\n}\n/**\n * This variable holds the appropriate converter function to get the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct converter based on browser and then invokes it\n */\n\nRtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.initialGetRtlScrollConverter;\n/**\n * This variable holds the appropriate converter function to set the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct function based on browser and then invokes it\n */\n\nRtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.initialSetRtlScrollConverter;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-web-utilities/dist/rtl-scroll-converter.js"],"names":["canUseDOM","Direction","RtlScrollConverter","getScrollLeft","scrolledElement","direction","rtl","getRtlScrollLeftConverter","scrollLeft","setScrollLeft","scrollValue","setRtlScrollLeftConverter","initialGetRtlScrollConverter","initializeRtlScrollConverters","directGetRtlScrollConverter","invertedGetRtlScrollConverter","Math","abs","reverseGetRtlScrollConverter","scrollWidth","clientWidth","initialSetRtlScrollConverter","newScrollValue","directSetRtlScrollConverter","invertedSetRtlScrollConverter","reverseSetRtlScrollConverter","maxScroll","applyDirectScrollConverters","testElement","getTestElement","document","body","appendChild","checkForScrollType","removeChild","isReverse","applyReverseScrollConverters","isDirect","applyInvertedScrollConverters","createElement","createTextNode","dir","style","fontSize","width","height","position","top","overflow"],"mappings":"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","sourcesContent":["import { canUseDOM } from \"exenv-es6\";\nimport { Direction } from \"./localization\";\n/**\n * Standardize left scroll conversion when direction is rtl\n * inspired by\n * https://github.com/alitaheri/normalize-scroll-left\n */\nexport class RtlScrollConverter {\n    /**\n     *  Gets the scrollLeft value of the provided element\n     */\n    static getScrollLeft(scrolledElement, direction) {\n        if (direction === Direction.rtl) {\n            return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n        }\n        return scrolledElement.scrollLeft;\n    }\n    /**\n     * Sets the scrollLeft value of the provided element\n     */\n    static setScrollLeft(scrolledElement, scrollValue, direction) {\n        if (direction === Direction.rtl) {\n            RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, scrollValue);\n            return;\n        }\n        scrolledElement.scrollLeft = scrollValue;\n    }\n    /**\n     * The initial rtl scroll converter getter function, it calls the browser test to set the correct converter\n     * functions and then invokes the getter\n     */\n    static initialGetRtlScrollConverter(scrolledElement) {\n        RtlScrollConverter.initializeRtlScrollConverters();\n        return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n    }\n    /**\n     * The \"direct\" rtl get scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n    static directGetRtlScrollConverter(scrolledElement) {\n        return scrolledElement.scrollLeft;\n    }\n    /**\n     * The \"inverted\" get scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n    static invertedGetRtlScrollConverter(scrolledElement) {\n        return -Math.abs(scrolledElement.scrollLeft);\n    }\n    /**\n     * The \"reverse\" get scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n    static reverseGetRtlScrollConverter(scrolledElement) {\n        return (scrolledElement.scrollLeft -\n            (scrolledElement.scrollWidth - scrolledElement.clientWidth));\n    }\n    /**\n     * The initial rtl scroll converter setter function, it calls the browser test to set the correct converter\n     * functions and then invokes the setter\n     */\n    static initialSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        RtlScrollConverter.initializeRtlScrollConverters();\n        RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, newScrollValue);\n    }\n    /**\n     * The \"direct\" rtl set scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n    static directSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        scrolledElement.scrollLeft = newScrollValue;\n    }\n    /**\n     * The \"inverted\" set scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n    static invertedSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        scrolledElement.scrollLeft = Math.abs(newScrollValue);\n    }\n    /**\n     * The \"reverse\" set scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n    static reverseSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        const maxScroll = scrolledElement.scrollWidth - scrolledElement.clientWidth;\n        scrolledElement.scrollLeft = maxScroll + newScrollValue;\n    }\n    /**\n     * detects the appropriate rtl scroll converter functions and assigns them\n     * should only run once\n     */\n    static initializeRtlScrollConverters() {\n        if (!canUseDOM()) {\n            RtlScrollConverter.applyDirectScrollConverters();\n            return;\n        }\n        const testElement = RtlScrollConverter.getTestElement();\n        document.body.appendChild(testElement);\n        RtlScrollConverter.checkForScrollType(testElement);\n        document.body.removeChild(testElement);\n    }\n    /**\n     * checks the provided test element to determine scroll type\n     * and apply appropriate converters\n     */\n    static checkForScrollType(testElement) {\n        if (RtlScrollConverter.isReverse(testElement)) {\n            RtlScrollConverter.applyReverseScrollConverters();\n        }\n        else {\n            if (RtlScrollConverter.isDirect(testElement)) {\n                RtlScrollConverter.applyDirectScrollConverters();\n            }\n            else {\n                RtlScrollConverter.applyInvertedScrollConverters();\n            }\n        }\n    }\n    /**\n     * checks test element initial state for rtl \"reverse\" mode\n     */\n    static isReverse(testElement) {\n        return testElement.scrollLeft > 0;\n    }\n    /**\n     * checks test element for rtl \"direct\" mode\n     */\n    static isDirect(testElement) {\n        testElement.scrollLeft = -1;\n        return testElement.scrollLeft === -1;\n    }\n    /**\n     * apply direct scroll conververters\n     */\n    static applyDirectScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.directSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.directGetRtlScrollConverter;\n    }\n    /**\n     * apply inverted scroll conververters\n     */\n    static applyInvertedScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.invertedSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.invertedGetRtlScrollConverter;\n    }\n    /**\n     * apply reverse scroll conververters\n     */\n    static applyReverseScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.reverseSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.reverseGetRtlScrollConverter;\n    }\n    /**\n     * generate a test element for rtl testing\n     */\n    static getTestElement() {\n        const testElement = document.createElement(\"div\");\n        testElement.appendChild(document.createTextNode(\"ABCD\"));\n        testElement.dir = \"rtl\";\n        testElement.style.fontSize = \"14px\";\n        testElement.style.width = \"4px\";\n        testElement.style.height = \"1px\";\n        testElement.style.position = \"absolute\";\n        testElement.style.top = \"-1000px\";\n        testElement.style.overflow = \"scroll\";\n        return testElement;\n    }\n}\n/**\n * This variable holds the appropriate converter function to get the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct converter based on browser and then invokes it\n */\nRtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.initialGetRtlScrollConverter;\n/**\n * This variable holds the appropriate converter function to set the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct function based on browser and then invokes it\n */\nRtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.initialSetRtlScrollConverter;\n"]},"metadata":{},"sourceType":"module"}