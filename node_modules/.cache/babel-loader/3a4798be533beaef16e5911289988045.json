{"ast":null,"code":"import _defineProperty from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { getValueByBreakpoint } from \"../utilities/breakpoints\";\nimport { GridAlignment, GridTag } from \"./grid.props\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Column } from \"../column\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nimport { toPx } from \"@microsoft/fast-jss-utilities\";\nexport var Grid =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(Grid, _Foundation);\n\n  function Grid() {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).apply(this, arguments));\n    _this.handledProps = {\n      columnCount: void 0,\n      gridColumn: void 0,\n      gutter: void 0,\n      horizontalAlign: void 0,\n      managedClasses: void 0,\n      tag: void 0,\n      verticalAlign: void 0,\n      cssGridPropertyName: void 0\n    };\n    /**\n     * Force the component to update\n     */\n\n    _this.update = function () {\n      _this.forceUpdate();\n    };\n\n    return _this;\n  }\n  /**\n   * Stores HTML tag for use in render\n   */\n\n\n  _createClass(Grid, [{\n    key: \"render\",\n\n    /**\n     * Renders the Grid markup\n     */\n    value: function render() {\n      return React.createElement(this.tag, Object.assign({}, this.unhandledProps(), {\n        className: this.generateClassNames(),\n        style: this.generateStyleAttributes()\n      }), this.renderChildren());\n    }\n    /**\n     * Component has mounted\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.shouldTrackBreakpoints(this.props)) {\n        BreakpointTracker.subscribe(this.update);\n      }\n    }\n    /**\n     * Component will be unmounted\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(previousProps) {\n      if (this.shouldTrackBreakpoints(this.props) && !this.shouldTrackBreakpoints(previousProps)) {\n        // If we should be tracking breakpoints but previously weren't, subscribe to changes\n        BreakpointTracker.subscribe(this.update);\n      } else if (!this.shouldTrackBreakpoints(this.props) && this.shouldTrackBreakpoints(previousProps)) {\n        // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n        BreakpointTracker.unsubscribe(this.update);\n      }\n    }\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      return _get(_getPrototypeOf(Grid.prototype), \"generateClassNames\", this).call(this, classNames(this.props.managedClasses.grid));\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n\n  }, {\n    key: \"shouldTrackBreakpoints\",\n    value: function shouldTrackBreakpoints(props) {\n      return Array.isArray(props.gutter) && props.gutter.length > 1;\n    }\n    /**\n     * Generates the column-span value\n     */\n\n  }, {\n    key: \"generateGutter\",\n    value: function generateGutter() {\n      if (typeof this.props.gutter === \"number\") {\n        return this.props.gutter;\n      } else if (Array.isArray(this.props.gutter)) {\n        return getValueByBreakpoint(this.props.gutter);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"generateAlignment\",\n    value: function generateAlignment(alignment) {\n      return GridAlignment[alignment];\n    }\n  }, {\n    key: \"generateStyleAttributes\",\n    value: function generateStyleAttributes() {\n      var displayStyle = this.props.cssGridPropertyName || Grid.display;\n      return Object.assign({\n        display: displayStyle\n      }, displayStyle === \"grid\" ? this.cssGridStyles() : this.msGridStyles(), this.unhandledProps().style);\n    }\n  }, {\n    key: \"cssGridStyles\",\n    value: function cssGridStyles() {\n      return {\n        alignItems: this.generateAlignment(this.props.verticalAlign),\n        gridAutoRows: \"auto\",\n        gridColumn: this.props.gridColumn,\n        gridColumnGap: \"\".concat(this.generateGutter(), \"px\"),\n        gridRow: this.props.row,\n        gridTemplateColumns: \"repeat(\".concat(this.props.columnCount, \", 1fr)\"),\n        justifyItems: this.generateAlignment(this.props.horizontalAlign)\n      };\n    }\n  }, {\n    key: \"msGridStyles\",\n    value: function msGridStyles() {\n      var _ref;\n\n      return _ref = {\n        msGridColumns: \"1fr (\".concat(toPx(this.generateGutter()), \" 1fr)[\").concat(this.props.columnCount - 1, \"]\")\n      }, _defineProperty(_ref, \"msGridRow\", this.props.row), _defineProperty(_ref, \"msGridColumn\", this.props.gridColumn), _ref;\n    }\n    /**\n     * Creates tags for rendering based on href\n     */\n\n  }, {\n    key: \"generateHTMLTag\",\n    value: function generateHTMLTag() {\n      return GridTag[this.props.tag] || GridTag.div;\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this2 = this;\n\n      // We only need to communicate gutters size to ms-grid columns because\n      // css grid gives us a css property to set for gutter. If we support\n      // css grid, we can safely return children w/o gutter augmentation.\n      if (canUseCssGrid()) {\n        return this.props.children;\n      }\n\n      return React.Children.map(this.props.children, function (child) {\n        if (!child || child.type !== Column || child.props.gutter) {\n          return child;\n        }\n\n        return React.cloneElement(child, {\n          gutter: _this2.props.gutter\n        }, child.props.children);\n      });\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      return this.generateHTMLTag();\n    }\n  }]);\n\n  return Grid;\n}(Foundation);\nGrid.displayName = \"Grid\";\nGrid.defaultProps = {\n  tag: GridTag.div,\n  gridColumn: 2,\n  gutter: 8,\n  verticalAlign: GridAlignment.stretch,\n  horizontalAlign: GridAlignment.stretch,\n  columnCount: 12,\n  managedClasses: {}\n};\nGrid.display = canUseCssGrid() ? \"grid\" : \"-ms-grid\";\nexport * from \"./grid.props\";","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-layouts-react/dist/grid/grid.js"],"names":["React","BreakpointTracker","getValueByBreakpoint","GridAlignment","GridTag","Foundation","Column","canUseCssGrid","classNames","toPx","Grid","arguments","handledProps","columnCount","gridColumn","gutter","horizontalAlign","managedClasses","tag","verticalAlign","cssGridPropertyName","update","forceUpdate","createElement","Object","assign","unhandledProps","className","generateClassNames","style","generateStyleAttributes","renderChildren","shouldTrackBreakpoints","props","subscribe","unsubscribe","previousProps","grid","Array","isArray","length","alignment","displayStyle","display","cssGridStyles","msGridStyles","alignItems","generateAlignment","gridAutoRows","gridColumnGap","generateGutter","gridRow","row","gridTemplateColumns","justifyItems","msGridColumns","div","children","Children","map","child","type","cloneElement","generateHTMLTag","displayName","defaultProps","stretch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport BreakpointTracker from \"../utilities/breakpoint-tracker\";\nimport { getValueByBreakpoint } from \"../utilities/breakpoints\";\nimport { GridAlignment, GridTag, } from \"./grid.props\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { Column } from \"../column\";\nimport { canUseCssGrid, classNames } from \"@microsoft/fast-web-utilities\";\nimport { toPx } from \"@microsoft/fast-jss-utilities\";\nexport class Grid extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            columnCount: void 0,\n            gridColumn: void 0,\n            gutter: void 0,\n            horizontalAlign: void 0,\n            managedClasses: void 0,\n            tag: void 0,\n            verticalAlign: void 0,\n            cssGridPropertyName: void 0,\n        };\n        /**\n         * Force the component to update\n         */\n        this.update = () => {\n            this.forceUpdate();\n        };\n    }\n    /**\n     * Stores HTML tag for use in render\n     */\n    get tag() {\n        return this.generateHTMLTag();\n    }\n    /**\n     * Renders the Grid markup\n     */\n    render() {\n        return (React.createElement(this.tag, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: this.generateStyleAttributes() }), this.renderChildren()));\n    }\n    /**\n     * Component has mounted\n     */\n    componentDidMount() {\n        if (this.shouldTrackBreakpoints(this.props)) {\n            BreakpointTracker.subscribe(this.update);\n        }\n    }\n    /**\n     * Component will be unmounted\n     */\n    componentWillUnmount() {\n        BreakpointTracker.unsubscribe(this.update);\n    }\n    /**\n     * Component has updated\n     */\n    componentDidUpdate(previousProps) {\n        if (this.shouldTrackBreakpoints(this.props) &&\n            !this.shouldTrackBreakpoints(previousProps)) {\n            // If we should be tracking breakpoints but previously weren't, subscribe to changes\n            BreakpointTracker.subscribe(this.update);\n        }\n        else if (!this.shouldTrackBreakpoints(this.props) &&\n            this.shouldTrackBreakpoints(previousProps)) {\n            // If we were tracking breakpoints but we shouldn't be now, unsubscribe from changes\n            BreakpointTracker.unsubscribe(this.update);\n        }\n    }\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.grid));\n    }\n    /**\n     * Determines if we should be tracking breakpoints based on a set of props\n     */\n    shouldTrackBreakpoints(props) {\n        return Array.isArray(props.gutter) && props.gutter.length > 1;\n    }\n    /**\n     * Generates the column-span value\n     */\n    generateGutter() {\n        if (typeof this.props.gutter === \"number\") {\n            return this.props.gutter;\n        }\n        else if (Array.isArray(this.props.gutter)) {\n            return getValueByBreakpoint(this.props.gutter);\n        }\n        return null;\n    }\n    generateAlignment(alignment) {\n        return GridAlignment[alignment];\n    }\n    generateStyleAttributes() {\n        const displayStyle = this.props.cssGridPropertyName || Grid.display;\n        return Object.assign({ display: displayStyle }, (displayStyle === \"grid\" ? this.cssGridStyles() : this.msGridStyles()), this.unhandledProps().style);\n    }\n    cssGridStyles() {\n        return {\n            alignItems: this.generateAlignment(this.props.verticalAlign),\n            gridAutoRows: \"auto\",\n            gridColumn: this.props.gridColumn,\n            gridColumnGap: `${this.generateGutter()}px`,\n            gridRow: this.props.row,\n            gridTemplateColumns: `repeat(${this.props.columnCount}, 1fr)`,\n            justifyItems: this.generateAlignment(this.props.horizontalAlign),\n        };\n    }\n    msGridStyles() {\n        return {\n            msGridColumns: `1fr (${toPx(this.generateGutter())} 1fr)[${this.props\n                .columnCount - 1}]`,\n            [\"msGridRow\"]: this.props.row,\n            [\"msGridColumn\"]: this.props.gridColumn,\n        };\n    }\n    /**\n     * Creates tags for rendering based on href\n     */\n    generateHTMLTag() {\n        return GridTag[this.props.tag] || GridTag.div;\n    }\n    renderChildren() {\n        // We only need to communicate gutters size to ms-grid columns because\n        // css grid gives us a css property to set for gutter. If we support\n        // css grid, we can safely return children w/o gutter augmentation.\n        if (canUseCssGrid()) {\n            return this.props.children;\n        }\n        return React.Children.map(this.props.children, (child) => {\n            if (!child ||\n                child.type !== Column ||\n                child.props.gutter) {\n                return child;\n            }\n            return React.cloneElement(child, { gutter: this.props.gutter }, child.props.children);\n        });\n    }\n}\nGrid.displayName = \"Grid\";\nGrid.defaultProps = {\n    tag: GridTag.div,\n    gridColumn: 2,\n    gutter: 8,\n    verticalAlign: GridAlignment.stretch,\n    horizontalAlign: GridAlignment.stretch,\n    columnCount: 12,\n    managedClasses: {},\n};\nGrid.display = canUseCssGrid() ? \"grid\" : \"-ms-grid\";\nexport * from \"./grid.props\";\n"]},"metadata":{},"sourceType":"module"}