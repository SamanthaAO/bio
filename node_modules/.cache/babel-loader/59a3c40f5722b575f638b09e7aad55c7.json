{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { mergeWith } from \"lodash-es\";\nimport React from \"react\";\nimport { designSystemContext } from \"./context\";\nimport SheetManager from \"./sheet-manager\";\nexport function mergeClassNames(a, b) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a.concat(\" \", b);\n  } else if (typeof a === \"string\") {\n    return a;\n  } else if (typeof b === \"string\") {\n    return b;\n  }\n}\n\nvar JSSManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(JSSManager, _React$Component);\n\n  function JSSManager(props, context) {\n    var _this;\n\n    _classCallCheck(this, JSSManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSSManager).call(this, props, context));\n    /**\n     * Simple switch to track the initial creation of styles.\n     * Because the \"styles\" property is abstract and abstract properties\n     * are not accessible in the constructor,  we need to compile styles\n     * inside the first call of the render function\n     */\n\n    _this.hasCreatedIntialStyleSheets = false;\n    _this.index = JSSManager.index -= 1;\n    _this.designSystem = context;\n    return _this;\n  }\n  /**\n   * Sets the JSS instance used by all JSSManger instances\n   */\n\n\n  _createClass(JSSManager, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.hasCreatedIntialStyleSheets) {\n        if (!!this.styles) {\n          var options = {\n            meta: this.managedComponent.displayName || this.managedComponent.name,\n            index: this.index\n          };\n\n          if (typeof JSSManager.createGenerateClassName === \"function\") {\n            options.generateClassName = JSSManager.createGenerateClassName(this.designSystem);\n          }\n\n          JSSManager.sheetManager.add(this.styles, this.designSystem, options);\n        }\n\n        if (this.props.jssStyleSheet) {\n          this.createPropStyleSheet();\n        }\n\n        this.hasCreatedIntialStyleSheets = true;\n      }\n\n      return React.createElement(this.managedComponent, this.managedComponentProps());\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var hasSheetProps = !!this.props.jssStyleSheet;\n      var hadSheetProps = !!prevProps.jssStyleSheet;\n\n      if (this.designSystem !== this.context) {\n        if (!!this.styles) {\n          JSSManager.sheetManager.update(this.styles, this.designSystem, this.context);\n          this.forceUpdate();\n        }\n\n        if (hadSheetProps && hasSheetProps) {\n          if (prevProps.jssStyleSheet === this.props.jssStyleSheet) {\n            JSSManager.sheetManager.update(this.props.jssStyleSheet, this.designSystem, this.context);\n          } else {\n            JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n            this.createPropStyleSheet(this.context);\n          }\n\n          this.forceUpdate();\n        } else if (hadSheetProps && !hasSheetProps) {\n          JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n        } else if (!hadSheetProps && hasSheetProps) {\n          this.createPropStyleSheet(this.context);\n          this.forceUpdate();\n        }\n\n        this.designSystem = this.context;\n      } else if (hadSheetProps && hasSheetProps && prevProps.jssStyleSheet !== this.props.jssStyleSheet) {\n        JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n        this.createPropStyleSheet();\n        this.forceUpdate();\n      }\n\n      if (hadSheetProps && !hasSheetProps) {\n        JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n      } else if (!hadSheetProps && hasSheetProps) {\n        this.createPropStyleSheet();\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.styles) {\n        JSSManager.sheetManager.remove(this.styles, this.designSystem);\n      }\n\n      if (this.props.jssStyleSheet) {\n        JSSManager.sheetManager.remove(this.props.jssStyleSheet, this.designSystem);\n      }\n\n      JSSManager.index++; // reset style creation tracker in case the instance is re-used\n\n      this.hasCreatedIntialStyleSheets = false;\n    }\n    /**\n     * Return the JSSStyleSheet associated with the current designSystem and style\n     */\n\n  }, {\n    key: \"primaryStyleSheet\",\n    value: function primaryStyleSheet() {\n      if (!!this.styles) {\n        return JSSManager.sheetManager.get(this.styles, this.designSystem);\n      }\n    }\n    /**\n     * Return the JSSStylesheet associated with the jssStyleSheet prop\n     */\n\n  }, {\n    key: \"secondaryStyleSheet\",\n    value: function secondaryStyleSheet() {\n      if (!!this.props.jssStyleSheet) {\n        return JSSManager.sheetManager.get(this.props.jssStyleSheet, this.designSystem);\n      }\n    }\n    /**\n     * Generate a prop object to give to the managed component\n     */\n\n  }, {\n    key: \"managedComponentProps\",\n    value: function managedComponentProps() {\n      var props = Object.assign({}, this.props, {\n        managedClasses: this.getManagedClassNames(),\n        ref: this.props.innerRef\n      });\n      delete props.jssStyleSheet;\n      delete props.innerRef;\n      return props;\n    }\n    /**\n     * Returns the classes to pass down to the managed component\n     */\n\n  }, {\n    key: \"getManagedClassNames\",\n    value: function getManagedClassNames() {\n      var primaryClasses = {};\n      var secondaryClasses = {};\n      var primarySheet = this.primaryStyleSheet();\n      var secondarySheet = this.secondaryStyleSheet();\n\n      if (!!primarySheet && primarySheet.hasOwnProperty(\"classes\")) {\n        primaryClasses = Object.assign({}, primarySheet.classes);\n      }\n\n      if (!!secondarySheet && secondarySheet.hasOwnProperty(\"classes\")) {\n        secondaryClasses = Object.assign({}, secondarySheet.classes);\n      }\n\n      return mergeWith(primaryClasses, secondaryClasses, mergeClassNames);\n    }\n  }, {\n    key: \"createPropStyleSheet\",\n    value: function createPropStyleSheet() {\n      var designSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.designSystem;\n      var stylesheet = this.primaryStyleSheet();\n      var options = {\n        meta: \"\".concat(this.managedComponent.displayName || this.managedComponent.name, \" - jssStyleSheet\"),\n        index: stylesheet ? stylesheet.options.index + 1 : this.index + 1\n      };\n\n      if (typeof JSSManager.createGenerateClassName === \"function\") {\n        options.generateClassName = JSSManager.createGenerateClassName(designSystem);\n      }\n\n      JSSManager.sheetManager.add(this.props.jssStyleSheet, designSystem, options);\n    }\n  }], [{\n    key: \"jss\",\n    set: function set(instance) {\n      JSSManager.sheetManager.jss = instance;\n    }\n    /**\n     * Get the JSS instance used by all JSSManger instances\n     */\n    ,\n    get: function get() {\n      return JSSManager.sheetManager.jss;\n    }\n  }]);\n\n  return JSSManager;\n}(React.Component);\n/**\n * Define the contextType for the manager to be the design system context\n */\n\n\nJSSManager.contextType = designSystemContext;\n/**\n * JSS allows us to use an index to order the created style elements. The higher the index,\n * the later in the document the style element will be created.\n *\n * This static index allows us to globally track every stylesheet created by the JSSManager. Each\n * instance decrements this index and assigns itself the decremented value. The effect of this is that\n * a React parent will always have a higher index than it's children because react constructs trees\n * recursively starting at the root. With a parent always having a higher index then it's children,\n * we can inform JSS of this order preference and ensure parent stylesheets always come later in the DOM.\n *\n * Inspiration for this approach to style element ordering comes from\n * https://github.com/cssinjs/react-jss/blob/master/src/injectSheet.js\n */\n\nJSSManager.index = -1000;\n/**\n * Manages stylesheets\n */\n\nJSSManager.sheetManager = new SheetManager();\nexport { JSSManager };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-jss-manager-react/dist/jss-manager.js"],"names":["mergeWith","React","designSystemContext","SheetManager","mergeClassNames","a","b","concat","JSSManager","props","context","hasCreatedIntialStyleSheets","index","designSystem","styles","options","meta","managedComponent","displayName","name","createGenerateClassName","generateClassName","sheetManager","add","jssStyleSheet","createPropStyleSheet","createElement","managedComponentProps","prevProps","hasSheetProps","hadSheetProps","update","forceUpdate","remove","get","Object","assign","managedClasses","getManagedClassNames","ref","innerRef","primaryClasses","secondaryClasses","primarySheet","primaryStyleSheet","secondarySheet","secondaryStyleSheet","hasOwnProperty","classes","stylesheet","instance","jss","Component","contextType"],"mappings":"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","sourcesContent":["import { mergeWith } from \"lodash-es\";\nimport React from \"react\";\nimport { designSystemContext } from \"./context\";\nimport SheetManager from \"./sheet-manager\";\nexport function mergeClassNames(a, b) {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a.concat(\" \", b);\n    }\n    else if (typeof a === \"string\") {\n        return a;\n    }\n    else if (typeof b === \"string\") {\n        return b;\n    }\n}\nclass JSSManager extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        /**\n         * Simple switch to track the initial creation of styles.\n         * Because the \"styles\" property is abstract and abstract properties\n         * are not accessible in the constructor,  we need to compile styles\n         * inside the first call of the render function\n         */\n        this.hasCreatedIntialStyleSheets = false;\n        this.index = JSSManager.index -= 1;\n        this.designSystem = context;\n    }\n    /**\n     * Sets the JSS instance used by all JSSManger instances\n     */\n    static set jss(instance) {\n        JSSManager.sheetManager.jss = instance;\n    }\n    /**\n     * Get the JSS instance used by all JSSManger instances\n     */\n    static get jss() {\n        return JSSManager.sheetManager.jss;\n    }\n    render() {\n        if (!this.hasCreatedIntialStyleSheets) {\n            if (!!this.styles) {\n                const options = {\n                    meta: this.managedComponent.displayName || this.managedComponent.name,\n                    index: this.index,\n                };\n                if (typeof JSSManager.createGenerateClassName === \"function\") {\n                    options.generateClassName = JSSManager.createGenerateClassName(this.designSystem);\n                }\n                JSSManager.sheetManager.add(this.styles, this.designSystem, options);\n            }\n            if (this.props.jssStyleSheet) {\n                this.createPropStyleSheet();\n            }\n            this.hasCreatedIntialStyleSheets = true;\n        }\n        return React.createElement(this.managedComponent, this.managedComponentProps());\n    }\n    componentDidUpdate(prevProps) {\n        const hasSheetProps = !!this.props.jssStyleSheet;\n        const hadSheetProps = !!prevProps.jssStyleSheet;\n        if (this.designSystem !== this.context) {\n            if (!!this.styles) {\n                JSSManager.sheetManager.update(this.styles, this.designSystem, this.context);\n                this.forceUpdate();\n            }\n            if (hadSheetProps && hasSheetProps) {\n                if (prevProps.jssStyleSheet === this.props.jssStyleSheet) {\n                    JSSManager.sheetManager.update(this.props.jssStyleSheet, this.designSystem, this.context);\n                }\n                else {\n                    JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n                    this.createPropStyleSheet(this.context);\n                }\n                this.forceUpdate();\n            }\n            else if (hadSheetProps && !hasSheetProps) {\n                JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n            }\n            else if (!hadSheetProps && hasSheetProps) {\n                this.createPropStyleSheet(this.context);\n                this.forceUpdate();\n            }\n            this.designSystem = this.context;\n        }\n        else if (hadSheetProps &&\n            hasSheetProps &&\n            prevProps.jssStyleSheet !== this.props.jssStyleSheet) {\n            JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n            this.createPropStyleSheet();\n            this.forceUpdate();\n        }\n        if (hadSheetProps && !hasSheetProps) {\n            JSSManager.sheetManager.remove(prevProps.jssStyleSheet, this.designSystem);\n        }\n        else if (!hadSheetProps && hasSheetProps) {\n            this.createPropStyleSheet();\n            this.forceUpdate();\n        }\n    }\n    componentWillUnmount() {\n        if (this.styles) {\n            JSSManager.sheetManager.remove(this.styles, this.designSystem);\n        }\n        if (this.props.jssStyleSheet) {\n            JSSManager.sheetManager.remove(this.props.jssStyleSheet, this.designSystem);\n        }\n        JSSManager.index++;\n        // reset style creation tracker in case the instance is re-used\n        this.hasCreatedIntialStyleSheets = false;\n    }\n    /**\n     * Return the JSSStyleSheet associated with the current designSystem and style\n     */\n    primaryStyleSheet() {\n        if (!!this.styles) {\n            return JSSManager.sheetManager.get(this.styles, this.designSystem);\n        }\n    }\n    /**\n     * Return the JSSStylesheet associated with the jssStyleSheet prop\n     */\n    secondaryStyleSheet() {\n        if (!!this.props.jssStyleSheet) {\n            return JSSManager.sheetManager.get(this.props.jssStyleSheet, this.designSystem);\n        }\n    }\n    /**\n     * Generate a prop object to give to the managed component\n     */\n    managedComponentProps() {\n        const props = Object.assign({}, this.props, { managedClasses: this.getManagedClassNames(), ref: this.props.innerRef });\n        delete props.jssStyleSheet;\n        delete props.innerRef;\n        return props;\n    }\n    /**\n     * Returns the classes to pass down to the managed component\n     */\n    getManagedClassNames() {\n        let primaryClasses = {};\n        let secondaryClasses = {};\n        const primarySheet = this.primaryStyleSheet();\n        const secondarySheet = this.secondaryStyleSheet();\n        if (!!primarySheet && primarySheet.hasOwnProperty(\"classes\")) {\n            primaryClasses = Object.assign({}, primarySheet.classes);\n        }\n        if (!!secondarySheet && secondarySheet.hasOwnProperty(\"classes\")) {\n            secondaryClasses = Object.assign({}, secondarySheet.classes);\n        }\n        return mergeWith(primaryClasses, secondaryClasses, mergeClassNames);\n    }\n    createPropStyleSheet(designSystem = this.designSystem) {\n        const stylesheet = this.primaryStyleSheet();\n        const options = {\n            meta: `${this.managedComponent.displayName ||\n                this.managedComponent.name} - jssStyleSheet`,\n            index: stylesheet ? stylesheet.options.index + 1 : this.index + 1,\n        };\n        if (typeof JSSManager.createGenerateClassName === \"function\") {\n            options.generateClassName = JSSManager.createGenerateClassName(designSystem);\n        }\n        JSSManager.sheetManager.add(this.props.jssStyleSheet, designSystem, options);\n    }\n}\n/**\n * Define the contextType for the manager to be the design system context\n */\nJSSManager.contextType = designSystemContext;\n/**\n * JSS allows us to use an index to order the created style elements. The higher the index,\n * the later in the document the style element will be created.\n *\n * This static index allows us to globally track every stylesheet created by the JSSManager. Each\n * instance decrements this index and assigns itself the decremented value. The effect of this is that\n * a React parent will always have a higher index than it's children because react constructs trees\n * recursively starting at the root. With a parent always having a higher index then it's children,\n * we can inform JSS of this order preference and ensure parent stylesheets always come later in the DOM.\n *\n * Inspiration for this approach to style element ordering comes from\n * https://github.com/cssinjs/react-jss/blob/master/src/injectSheet.js\n */\nJSSManager.index = -1000;\n/**\n * Manages stylesheets\n */\nJSSManager.sheetManager = new SheetManager();\nexport { JSSManager };\n"]},"metadata":{},"sourceType":"module"}