{"ast":null,"code":"// tslint:disable:no-bitwise\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { normalize } from \"./math-utilities\";\nimport { namedColorsConfigs } from \"./named-colors\"; // Matches rgb(R, G, B) where R, G, and B are integers [0 - 255]\n\nconst webRGBRegex = /^rgb\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){2}(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*)\\)$/i; // Matches rgb(R, G, B, A) where R, G, and B are integers [0 - 255] and A is [0-1] floating\n\nconst webRGBARegex = /^rgba\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){3}(?:0|1|0?\\.\\d*)\\s*)\\)$/i; // Matches #RGB and #RRGGBB, where R, G, and B are [0-9] or [A-F]\n\nconst hexRGBRegex = /^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i; // Matches #RGB and #RRGGBBAA, where R, G, B, and A are [0-9] or [A-F]\n\nconst hexRGBARegex = /^#((?:[0-9a-f]{8}|[0-9a-f]{4}))$/i;\n/**\n * Test if a color matches #RRGGBB or #RGB\n */\n\nexport function isColorStringHexRGB(raw) {\n  return hexRGBRegex.test(raw);\n}\n/**\n * Test if a color matches #RRGGBBAA or #RGBA\n */\n\nexport function isColorStringHexRGBA(raw) {\n  return isColorStringHexARGB(raw); // No way to differentiate these two formats, so just use the same test\n}\n/**\n * Test if a color matches #AARRGGBB or #ARGB\n */\n\nexport function isColorStringHexARGB(raw) {\n  return hexRGBARegex.test(raw);\n}\n/**\n * Test if a color matches rgb(rr, gg, bb)\n */\n\nexport function isColorStringWebRGB(raw) {\n  return webRGBRegex.test(raw);\n}\n/**\n * Test if a color matches rgba(rr, gg, bb, aa)\n */\n\nexport function isColorStringWebRGBA(raw) {\n  return webRGBARegex.test(raw);\n}\nexport function isColorNamed(raw) {\n  return namedColorsConfigs.hasOwnProperty(raw);\n} // Expects format #RRGGBB or #RGB\n\nexport function parseColorHexRGB(raw) {\n  const result = hexRGBRegex.exec(raw);\n\n  if (result === null) {\n    return null;\n  }\n\n  let digits = result[1];\n\n  if (digits.length === 3) {\n    const r = digits.charAt(0);\n    const g = digits.charAt(1);\n    const b = digits.charAt(2);\n    digits = r.concat(r, g, g, b, b);\n  }\n\n  const rawInt = parseInt(digits, 16);\n\n  if (isNaN(rawInt)) {\n    return null;\n  } // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n\n\n  return new ColorRGBA64(normalize((rawInt & 0xff0000) >>> 16, 0, 255), normalize((rawInt & 0x00ff00) >>> 8, 0, 255), normalize(rawInt & 0x0000ff, 0, 255), 1);\n} // Expects format #AARRGGBB\n\nexport function parseColorHexARGB(raw) {\n  const result = hexRGBARegex.exec(raw);\n\n  if (result === null) {\n    return null;\n  }\n\n  let digits = result[1];\n\n  if (digits.length === 4) {\n    const a = digits.charAt(0);\n    const r = digits.charAt(1);\n    const g = digits.charAt(2);\n    const b = digits.charAt(3);\n    digits = a.concat(a, r, r, g, g, b, b);\n  }\n\n  const rawInt = parseInt(digits, 16);\n\n  if (isNaN(rawInt)) {\n    return null;\n  } // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n\n\n  return new ColorRGBA64(normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255), normalize((rawInt & 0xff000000) >>> 24, 0, 255));\n} // Expects format #RRGGBBAA or #RGBA\n\nexport function parseColorHexRGBA(raw) {\n  const result = hexRGBARegex.exec(raw);\n\n  if (result === null) {\n    return null;\n  }\n\n  let digits = result[1];\n\n  if (digits.length === 4) {\n    const r = digits.charAt(0);\n    const g = digits.charAt(1);\n    const b = digits.charAt(2);\n    const a = digits.charAt(3);\n    digits = r.concat(r, g, g, b, b, a, a);\n  }\n\n  const rawInt = parseInt(digits, 16);\n\n  if (isNaN(rawInt)) {\n    return null;\n  } // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n\n\n  return new ColorRGBA64(normalize((rawInt & 0xff000000) >>> 24, 0, 255), normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255));\n} // Expects format rgb(RR,GG,BB) where RR,GG,BB are [0,255]\n\nexport function parseColorWebRGB(raw) {\n  const result = webRGBRegex.exec(raw);\n\n  if (result === null) {\n    return null;\n  }\n\n  const split = result[1].split(\",\");\n  return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), 1);\n} // Expects format rgba(RR,GG,BB,a) where RR,GG,BB are [0,255] and a is [0,1]\n\nexport function parseColorWebRGBA(raw) {\n  const result = webRGBARegex.exec(raw);\n\n  if (result === null) {\n    return null;\n  }\n\n  const split = result[1].split(\",\");\n\n  if (split.length === 4) {\n    return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), Number(split[3]));\n  }\n\n  return null;\n} // Expects any of the CSS color names https://www.w3schools.com/colors/colors_names.asp\n\nexport function parseColorNamed(raw) {\n  // const rawLower: typeof raw =  raw.toLowerCase() : raw.toString();\n  const config = namedColorsConfigs[raw.toLowerCase()];\n  return !!config ? new ColorRGBA64(config.r, config.g, config.b, config.hasOwnProperty(\"a\") ? config.a : void 0) : null;\n} // Expects any of the following and attempts to determine which is being used\n// #RRGGBB\n// #AARRGGBB\n// rgb(RR,GG,BB)\n// rgba(RR,GG,BB,a)\n// or any of the CSS color names https://www.w3schools.com/colors/colors_names.asp\n\nexport function parseColor(raw) {\n  const rawLower = raw.toLowerCase();\n  return isColorStringHexRGB(rawLower) ? parseColorHexRGB(rawLower) : isColorStringHexRGBA(rawLower) ? parseColorHexARGB(rawLower) : isColorStringWebRGB(rawLower) ? parseColorWebRGB(rawLower) : isColorStringWebRGBA(rawLower) ? parseColorWebRGBA(rawLower) : isColorNamed(rawLower) ? parseColorNamed(rawLower) : null;\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-colors/dist/parse-color.js"],"names":["ColorRGBA64","normalize","namedColorsConfigs","webRGBRegex","webRGBARegex","hexRGBRegex","hexRGBARegex","isColorStringHexRGB","raw","test","isColorStringHexRGBA","isColorStringHexARGB","isColorStringWebRGB","isColorStringWebRGBA","isColorNamed","hasOwnProperty","parseColorHexRGB","result","exec","digits","length","r","charAt","g","b","concat","rawInt","parseInt","isNaN","parseColorHexARGB","a","parseColorHexRGBA","parseColorWebRGB","split","Number","parseColorWebRGBA","parseColorNamed","config","toLowerCase","parseColor","rawLower"],"mappings":"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","sourcesContent":["// tslint:disable:no-bitwise\nimport { ColorRGBA64 } from \"./color-rgba-64\";\nimport { normalize } from \"./math-utilities\";\nimport { namedColorsConfigs } from \"./named-colors\";\n// Matches rgb(R, G, B) where R, G, and B are integers [0 - 255]\nconst webRGBRegex = /^rgb\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){2}(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*)\\)$/i;\n// Matches rgb(R, G, B, A) where R, G, and B are integers [0 - 255] and A is [0-1] floating\nconst webRGBARegex = /^rgba\\(\\s*((?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|\\d{1,2})\\s*,\\s*){3}(?:0|1|0?\\.\\d*)\\s*)\\)$/i;\n// Matches #RGB and #RRGGBB, where R, G, and B are [0-9] or [A-F]\nconst hexRGBRegex = /^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i;\n// Matches #RGB and #RRGGBBAA, where R, G, B, and A are [0-9] or [A-F]\nconst hexRGBARegex = /^#((?:[0-9a-f]{8}|[0-9a-f]{4}))$/i;\n/**\n * Test if a color matches #RRGGBB or #RGB\n */\nexport function isColorStringHexRGB(raw) {\n    return hexRGBRegex.test(raw);\n}\n/**\n * Test if a color matches #RRGGBBAA or #RGBA\n */\nexport function isColorStringHexRGBA(raw) {\n    return isColorStringHexARGB(raw); // No way to differentiate these two formats, so just use the same test\n}\n/**\n * Test if a color matches #AARRGGBB or #ARGB\n */\nexport function isColorStringHexARGB(raw) {\n    return hexRGBARegex.test(raw);\n}\n/**\n * Test if a color matches rgb(rr, gg, bb)\n */\nexport function isColorStringWebRGB(raw) {\n    return webRGBRegex.test(raw);\n}\n/**\n * Test if a color matches rgba(rr, gg, bb, aa)\n */\nexport function isColorStringWebRGBA(raw) {\n    return webRGBARegex.test(raw);\n}\nexport function isColorNamed(raw) {\n    return namedColorsConfigs.hasOwnProperty(raw);\n}\n// Expects format #RRGGBB or #RGB\nexport function parseColorHexRGB(raw) {\n    const result = hexRGBRegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 3) {\n        const r = digits.charAt(0);\n        const g = digits.charAt(1);\n        const b = digits.charAt(2);\n        digits = r.concat(r, g, g, b, b);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new ColorRGBA64(normalize((rawInt & 0xff0000) >>> 16, 0, 255), normalize((rawInt & 0x00ff00) >>> 8, 0, 255), normalize(rawInt & 0x0000ff, 0, 255), 1);\n}\n// Expects format #AARRGGBB\nexport function parseColorHexARGB(raw) {\n    const result = hexRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 4) {\n        const a = digits.charAt(0);\n        const r = digits.charAt(1);\n        const g = digits.charAt(2);\n        const b = digits.charAt(3);\n        digits = a.concat(a, r, r, g, g, b, b);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new ColorRGBA64(normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255), normalize((rawInt & 0xff000000) >>> 24, 0, 255));\n}\n// Expects format #RRGGBBAA or #RGBA\nexport function parseColorHexRGBA(raw) {\n    const result = hexRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    let digits = result[1];\n    if (digits.length === 4) {\n        const r = digits.charAt(0);\n        const g = digits.charAt(1);\n        const b = digits.charAt(2);\n        const a = digits.charAt(3);\n        digits = r.concat(r, g, g, b, b, a, a);\n    }\n    const rawInt = parseInt(digits, 16);\n    if (isNaN(rawInt)) {\n        return null;\n    }\n    // Note the use of >>> rather than >> as we want JS to manipulate these as unsigned numbers\n    return new ColorRGBA64(normalize((rawInt & 0xff000000) >>> 24, 0, 255), normalize((rawInt & 0x00ff0000) >>> 16, 0, 255), normalize((rawInt & 0x0000ff00) >>> 8, 0, 255), normalize(rawInt & 0x000000ff, 0, 255));\n}\n// Expects format rgb(RR,GG,BB) where RR,GG,BB are [0,255]\nexport function parseColorWebRGB(raw) {\n    const result = webRGBRegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    const split = result[1].split(\",\");\n    return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), 1);\n}\n// Expects format rgba(RR,GG,BB,a) where RR,GG,BB are [0,255] and a is [0,1]\nexport function parseColorWebRGBA(raw) {\n    const result = webRGBARegex.exec(raw);\n    if (result === null) {\n        return null;\n    }\n    const split = result[1].split(\",\");\n    if (split.length === 4) {\n        return new ColorRGBA64(normalize(Number(split[0]), 0, 255), normalize(Number(split[1]), 0, 255), normalize(Number(split[2]), 0, 255), Number(split[3]));\n    }\n    return null;\n}\n// Expects any of the CSS color names https://www.w3schools.com/colors/colors_names.asp\nexport function parseColorNamed(raw) {\n    // const rawLower: typeof raw =  raw.toLowerCase() : raw.toString();\n    const config = namedColorsConfigs[raw.toLowerCase()];\n    return !!config\n        ? new ColorRGBA64(config.r, config.g, config.b, config.hasOwnProperty(\"a\") ? config.a : void 0)\n        : null;\n}\n// Expects any of the following and attempts to determine which is being used\n// #RRGGBB\n// #AARRGGBB\n// rgb(RR,GG,BB)\n// rgba(RR,GG,BB,a)\n// or any of the CSS color names https://www.w3schools.com/colors/colors_names.asp\nexport function parseColor(raw) {\n    const rawLower = raw.toLowerCase();\n    return isColorStringHexRGB(rawLower)\n        ? parseColorHexRGB(rawLower)\n        : isColorStringHexRGBA(rawLower)\n            ? parseColorHexARGB(rawLower)\n            : isColorStringWebRGB(rawLower)\n                ? parseColorWebRGB(rawLower)\n                : isColorStringWebRGBA(rawLower)\n                    ? parseColorWebRGBA(rawLower)\n                    : isColorNamed(rawLower)\n                        ? parseColorNamed(rawLower)\n                        : null;\n}\n"]},"metadata":{},"sourceType":"module"}