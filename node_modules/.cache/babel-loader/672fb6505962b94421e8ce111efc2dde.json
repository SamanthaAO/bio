{"ast":null,"code":"/**\n * Expose ltr and rtl strings\n */\nexport var Direction;\n\n(function (Direction) {\n  Direction[\"ltr\"] = \"ltr\";\n  Direction[\"rtl\"] = \"rtl\";\n})(Direction || (Direction = {}));\n/**\n * Localizes top/left/bottom/right formatted arguments, such as the format used by CSS's padding and margin\n * properties.\n * eg. when dir is RTL, \"2px 3px 4px 5px\" -> \"2px 5px 4px 3px\"\n */\n\n\nexport function localizeSpacing(dir) {\n  return value => {\n    if (typeof value !== \"string\") {\n      return \"\";\n    }\n\n    const space = \" \";\n    const split = value.split(space);\n    return split.length !== 4 ? value : dir === Direction.rtl ? [split[0], split[3], split[2], split[1]].join(space) : value;\n  };\n}\n/**\n * Returns a css property based on a given direction value\n */\n\nexport function applyLocalizedProperty(ltrProperty, rtlProperty, dir) {\n  return dir === Direction.ltr ? ltrProperty : rtlProperty;\n}\n/**\n * Utility for returning one of two values, where the predicate is the\n * direction property on the design-system. If provided values are functions,\n * the function will return the return value of the function invoked with\n * the design system\n */\n\nexport function directionSwitch(ltr, rtl) {\n  return designSystem => {\n    const dir = designSystem && designSystem.direction ? designSystem.direction : Direction.ltr;\n    const value = dir === Direction.rtl ? rtl : ltr;\n    return typeof value === \"function\" ? value(designSystem) : value;\n  };\n}","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-jss-utilities/dist/localization.js"],"names":["Direction","localizeSpacing","dir","value","space","split","length","rtl","join","applyLocalizedProperty","ltrProperty","rtlProperty","ltr","directionSwitch","designSystem","direction"],"mappings":"AAAA;;;AAGA,OAAO,IAAIA,SAAJ;;AACP,CAAC,UAAUA,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAAC,KAAD,CAAT,GAAmB,KAAnB;AACAA,EAAAA,SAAS,CAAC,KAAD,CAAT,GAAmB,KAAnB;AACH,CAHD,EAGGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAHZ;AAIA;;;;;;;AAKA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AACjC,SAAQC,KAAD,IAAW;AACd,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,aAAO,EAAP;AACH;;AACD,UAAMC,KAAK,GAAG,GAAd;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACE,KAAN,CAAYD,KAAZ,CAAd;AACA,WAAOC,KAAK,CAACC,MAAN,KAAiB,CAAjB,GACDH,KADC,GAEDD,GAAG,KAAKF,SAAS,CAACO,GAAlB,GACI,CAACF,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,EAA+BA,KAAK,CAAC,CAAD,CAApC,EAAyCG,IAAzC,CAA8CJ,KAA9C,CADJ,GAEID,KAJV;AAKH,GAXD;AAYH;AACD;;;;AAGA,OAAO,SAASM,sBAAT,CAAgCC,WAAhC,EAA6CC,WAA7C,EAA0DT,GAA1D,EAA+D;AAClE,SAAOA,GAAG,KAAKF,SAAS,CAACY,GAAlB,GAAwBF,WAAxB,GAAsCC,WAA7C;AACH;AACD;;;;;;;AAMA,OAAO,SAASE,eAAT,CAAyBD,GAAzB,EAA8BL,GAA9B,EAAmC;AACtC,SAAQO,YAAD,IAAkB;AACrB,UAAMZ,GAAG,GAAGY,YAAY,IAAIA,YAAY,CAACC,SAA7B,GACND,YAAY,CAACC,SADP,GAENf,SAAS,CAACY,GAFhB;AAGA,UAAMT,KAAK,GAAGD,GAAG,KAAKF,SAAS,CAACO,GAAlB,GAAwBA,GAAxB,GAA8BK,GAA5C;AACA,WAAO,OAAOT,KAAP,KAAiB,UAAjB,GACDA,KAAK,CAACW,YAAD,CADJ,GAEDX,KAFN;AAGH,GARD;AASH","sourcesContent":["/**\n * Expose ltr and rtl strings\n */\nexport var Direction;\n(function (Direction) {\n    Direction[\"ltr\"] = \"ltr\";\n    Direction[\"rtl\"] = \"rtl\";\n})(Direction || (Direction = {}));\n/**\n * Localizes top/left/bottom/right formatted arguments, such as the format used by CSS's padding and margin\n * properties.\n * eg. when dir is RTL, \"2px 3px 4px 5px\" -> \"2px 5px 4px 3px\"\n */\nexport function localizeSpacing(dir) {\n    return (value) => {\n        if (typeof value !== \"string\") {\n            return \"\";\n        }\n        const space = \" \";\n        const split = value.split(space);\n        return split.length !== 4\n            ? value\n            : dir === Direction.rtl\n                ? [split[0], split[3], split[2], split[1]].join(space)\n                : value;\n    };\n}\n/**\n * Returns a css property based on a given direction value\n */\nexport function applyLocalizedProperty(ltrProperty, rtlProperty, dir) {\n    return dir === Direction.ltr ? ltrProperty : rtlProperty;\n}\n/**\n * Utility for returning one of two values, where the predicate is the\n * direction property on the design-system. If provided values are functions,\n * the function will return the return value of the function invoked with\n * the design system\n */\nexport function directionSwitch(ltr, rtl) {\n    return (designSystem) => {\n        const dir = designSystem && designSystem.direction\n            ? designSystem.direction\n            : Direction.ltr;\n        const value = dir === Direction.rtl ? rtl : ltr;\n        return typeof value === \"function\"\n            ? value(designSystem)\n            : value;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}