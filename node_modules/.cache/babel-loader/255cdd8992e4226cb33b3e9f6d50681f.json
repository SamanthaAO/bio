{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { get, isNil } from \"lodash-es\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { AxisPositioningMode, ViewportPositionerHorizontalPosition, ViewportPositionerVerticalPosition } from \"./viewport-positioner.props\";\nimport { ViewportContext } from \"./viewport-context\";\nexport var ViewportPositionerHorizontalPositionLabel;\n\n(function (ViewportPositionerHorizontalPositionLabel) {\n  ViewportPositionerHorizontalPositionLabel[\"left\"] = \"left\";\n  ViewportPositionerHorizontalPositionLabel[\"insetLeft\"] = \"insetLeft\";\n  ViewportPositionerHorizontalPositionLabel[\"insetRight\"] = \"insetRight\";\n  ViewportPositionerHorizontalPositionLabel[\"right\"] = \"right\";\n  ViewportPositionerHorizontalPositionLabel[\"undefined\"] = \"undefined\";\n})(ViewportPositionerHorizontalPositionLabel || (ViewportPositionerHorizontalPositionLabel = {}));\n\nexport var ViewportPositionerVerticalPositionLabel;\n\n(function (ViewportPositionerVerticalPositionLabel) {\n  ViewportPositionerVerticalPositionLabel[\"top\"] = \"top\";\n  ViewportPositionerVerticalPositionLabel[\"insetTop\"] = \"insetTop\";\n  ViewportPositionerVerticalPositionLabel[\"insetBottom\"] = \"insetBottom\";\n  ViewportPositionerVerticalPositionLabel[\"bottom\"] = \"bottom\";\n  ViewportPositionerVerticalPositionLabel[\"undefined\"] = \"undefined\";\n})(ViewportPositionerVerticalPositionLabel || (ViewportPositionerVerticalPositionLabel = {}));\n\nvar ViewportPositioner =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(ViewportPositioner, _Foundation);\n\n  /**\n   * constructor\n   */\n  function ViewportPositioner(props) {\n    var _this;\n\n    _classCallCheck(this, ViewportPositioner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ViewportPositioner).call(this, props));\n    _this.handledProps = {\n      managedClasses: void 0,\n      anchor: void 0,\n      viewport: void 0,\n      horizontalPositioningMode: void 0,\n      defaultHorizontalPosition: void 0,\n      horizontalThreshold: void 0,\n      horizontalAlwaysInView: void 0,\n      horizontalLockToDefault: void 0,\n      verticalPositioningMode: void 0,\n      defaultVerticalPosition: void 0,\n      verticalThreshold: void 0,\n      verticalAlwaysInView: void 0,\n      verticalLockToDefault: void 0,\n      fixedAfterInitialPlacement: void 0,\n      scaleToFit: void 0,\n      disabled: void 0\n    };\n    _this.rootElement = React.createRef();\n    _this.openRequestAnimationFrame = null;\n    _this.anchorTop = 0;\n    _this.anchorRight = 0;\n    _this.anchorBottom = 0;\n    _this.anchorLeft = 0;\n    _this.anchorHeight = 0;\n    _this.anchorWidth = 0;\n    _this.scrollTop = 0;\n    _this.scrollLeft = 0;\n    /**\n     * base offsets between the positioner's base position and the anchor's\n     */\n\n    _this.baseHorizontalOffset = 0;\n    _this.baseVerticalOffset = 0;\n    /**\n     *  gets the CSS classes to be programmatically applied to the component\n     */\n\n    _this.getPositioningStyles = function () {\n      // Check if there is already a style object being passed as props\n      var styleProps = get(_this.props, \"style\");\n      return Object.assign({}, _this.props.scaleToFit ? {\n        height: \"\".concat(_this.state.verticalSelectedPositionHeight, \"px\"),\n        width: \"\".concat(_this.state.horizontalSelectedPositionWidth, \"px\")\n      } : {}, {\n        // hide the component until afer initial layout attempst (to avoid a flicker)\n        opacity: !_this.props.disabled && !_this.state.initialLayoutComplete ? 0 : undefined,\n        position: \"relative\",\n        transformOrigin: \"\".concat(_this.state.xTransformOrigin, \" \").concat(_this.state.yTransformOrigin),\n        transform: \"translate(\\n                \".concat(Math.floor(_this.state.xTranslate), \"px, \\n                \").concat(Math.floor(_this.state.yTranslate), \"px\\n            )\"),\n        top: _this.state.top === null ? null : \"\".concat(_this.state.top, \"px\"),\n        right: _this.state.right === null ? null : \"\".concat(_this.state.right, \"px\"),\n        bottom: _this.state.bottom === null ? null : \"\".concat(_this.state.bottom, \"px\"),\n        left: _this.state.left === null ? null : \"\".concat(_this.state.left, \"px\")\n      }, styleProps);\n    };\n    /**\n     *  Checks whether component should be disabled or not\n     */\n\n\n    _this.updateDisabledState = function () {\n      if (!canUseDOM() || _this.props.disabled === true) {\n        _this.disable();\n\n        return;\n      }\n\n      if (_this.getAnchorElement() === null || _this.getViewportElement(_this.props.viewport) === null) {\n        if (_this.state.validRefChecksRemaining > 0) {\n          _this.setState({\n            validRefChecksRemaining: _this.state.validRefChecksRemaining - 1,\n            initialLayoutComplete: _this.state.validRefChecksRemaining <= 1\n          });\n\n          return;\n        }\n      }\n\n      _this.enableComponent();\n    };\n    /**\n     *  Enable the component\n     */\n\n\n    _this.enableComponent = function () {\n      var viewportElement = _this.getViewportElement(_this.props.viewport);\n\n      var anchorElement = _this.getAnchorElement();\n\n      if (!_this.state.disabled || _this.props.disabled || isNil(anchorElement) || isNil(viewportElement) || isNil(_this.rootElement.current)) {\n        return;\n      }\n\n      if (!window.IntersectionObserver || !window.ResizeObserver) {\n        _this.setNoObserverMode();\n\n        return;\n      }\n\n      _this.setState({\n        disabled: false,\n        noObserverMode: false,\n        validRefChecksRemaining: 0\n      });\n\n      _this.collisionDetector = new window.IntersectionObserver(_this.handleCollision, {\n        root: viewportElement,\n        rootMargin: \"0px\",\n        threshold: [0, 1]\n      });\n\n      _this.collisionDetector.observe(_this.rootElement.current);\n\n      _this.collisionDetector.observe(anchorElement);\n\n      _this.resizeDetector = new window.ResizeObserver(_this.handleAnchorResize);\n\n      _this.resizeDetector.observe(anchorElement);\n\n      viewportElement.addEventListener(\"scroll\", _this.handleScroll);\n    };\n    /**\n     *  If observers are not supported we do expensive getBoundingClientRect calls\n     *  once to get correct initial placement\n     */\n\n\n    _this.setNoObserverMode = function () {\n      var viewportElement = _this.getViewportElement(_this.props.viewport);\n\n      var anchorElement = _this.getAnchorElement();\n\n      if (isNil(viewportElement) || isNil(anchorElement)) {\n        return;\n      }\n\n      _this.positionerRect = _this.rootElement.current.getBoundingClientRect();\n      _this.viewportRect = viewportElement.getBoundingClientRect();\n      var anchorRect = anchorElement.getBoundingClientRect();\n      _this.anchorTop = anchorRect.top;\n      _this.anchorRight = anchorRect.right;\n      _this.anchorBottom = anchorRect.bottom;\n      _this.anchorLeft = anchorRect.left;\n      _this.anchorWidth = anchorRect.width;\n      _this.anchorHeight = anchorRect.height;\n\n      _this.updatePositionerOffset();\n\n      _this.setState({\n        validRefChecksRemaining: 0,\n        disabled: false,\n        noObserverMode: true\n      });\n\n      _this.requestFrame();\n    };\n    /**\n     *  Disable the component\n     */\n\n\n    _this.disable = function () {\n      if (_this.state.disabled) {\n        return;\n      }\n\n      _this.detachListeners(_this.props.viewport);\n\n      _this.setState({\n        disabled: true,\n        validRefChecksRemaining: 0\n      });\n    };\n    /**\n     *  removes event listeners and observers when component is being unmounted or reset\n     */\n\n\n    _this.detachListeners = function (viewportRef) {\n      var viewPortElement = _this.getViewportElement(viewportRef);\n\n      if (!isNil(viewPortElement)) {\n        viewPortElement.removeEventListener(\"scroll\", _this.handleScroll);\n      }\n\n      if (_this.collisionDetector && typeof _this.collisionDetector.disconnect === \"function\") {\n        _this.collisionDetector.disconnect();\n\n        _this.collisionDetector = null;\n      } // TODO #1142 https://github.com/Microsoft/fast-dna/issues/1142\n      // Full browser support imminent\n      // Revisit usage once Safari and Firefox adapt\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1272409\n      // https://bugs.webkit.org/show_bug.cgi?id=157743\n\n\n      if (_this.resizeDetector && typeof _this.resizeDetector.disconnect === \"function\") {\n        _this.resizeDetector.disconnect();\n\n        _this.resizeDetector = null;\n      }\n    };\n    /**\n     *  Get available Horizontal positions based on positioning mode\n     */\n\n\n    _this.getHorizontalPositioningOptions = function () {\n      switch (_this.props.horizontalPositioningMode) {\n        case AxisPositioningMode.inset:\n          return [ViewportPositionerHorizontalPositionLabel.insetLeft, ViewportPositionerHorizontalPositionLabel.insetRight];\n\n        case AxisPositioningMode.adjacent:\n          return [ViewportPositionerHorizontalPositionLabel.left, ViewportPositionerHorizontalPositionLabel.right];\n      }\n    };\n    /**\n     * Get available Vertical positions based on positioning mode\n     */\n\n\n    _this.getVerticalPositioningOptions = function () {\n      switch (_this.props.verticalPositioningMode) {\n        case AxisPositioningMode.inset:\n          return [ViewportPositionerVerticalPositionLabel.insetTop, ViewportPositionerVerticalPositionLabel.insetBottom];\n\n        case AxisPositioningMode.adjacent:\n          return [ViewportPositionerVerticalPositionLabel.top, ViewportPositionerVerticalPositionLabel.bottom];\n      }\n    };\n    /**\n     *  Get the width available for a particular horizontal position\n     */\n\n\n    _this.getAvailableWidth = function (positionOption) {\n      var spaceLeft = _this.anchorLeft - _this.viewportRect.left;\n      var spaceRight = _this.viewportRect.right - (_this.anchorLeft + _this.anchorWidth);\n\n      switch (positionOption) {\n        case ViewportPositionerHorizontalPositionLabel.left:\n          return spaceLeft;\n\n        case ViewportPositionerHorizontalPositionLabel.insetLeft:\n          return spaceLeft + _this.anchorWidth;\n\n        case ViewportPositionerHorizontalPositionLabel.insetRight:\n          return spaceRight + _this.anchorWidth;\n\n        case ViewportPositionerHorizontalPositionLabel.right:\n          return spaceRight;\n      }\n    };\n    /**\n     *  Get the height available for a particular vertical position\n     */\n\n\n    _this.getAvailableHeight = function (positionOption) {\n      var spaceAbove = _this.anchorTop - _this.viewportRect.top;\n      var spaceBelow = _this.viewportRect.bottom - (_this.anchorTop + _this.anchorHeight);\n\n      switch (positionOption) {\n        case ViewportPositionerVerticalPositionLabel.top:\n          return spaceAbove;\n\n        case ViewportPositionerVerticalPositionLabel.insetTop:\n          return spaceAbove + _this.anchorHeight;\n\n        case ViewportPositionerVerticalPositionLabel.insetBottom:\n          return spaceBelow + _this.anchorHeight;\n\n        case ViewportPositionerVerticalPositionLabel.bottom:\n          return spaceBelow;\n      }\n    };\n    /**\n     *  Handle scroll events\n     */\n\n\n    _this.handleScroll = function () {\n      _this.requestFrame();\n    };\n    /**\n     *  Handle anchor resize events\n     */\n\n\n    _this.handleAnchorResize = function (entries) {\n      var entry = entries[0];\n      _this.anchorHeight = entry.contentRect.height;\n      _this.anchorWidth = entry.contentRect.width;\n\n      if (_this.state.currentVerticalPosition === ViewportPositionerVerticalPositionLabel.top || _this.state.currentVerticalPosition === ViewportPositionerVerticalPositionLabel.insetTop) {\n        _this.anchorBottom = _this.anchorTop + _this.anchorHeight;\n      } else {\n        _this.anchorTop = _this.anchorBottom - _this.anchorHeight;\n      }\n\n      if (_this.state.currentHorizontalPosition === ViewportPositionerHorizontalPositionLabel.left || _this.state.currentHorizontalPosition === ViewportPositionerHorizontalPositionLabel.insetLeft) {\n        _this.anchorRight = _this.anchorLeft + _this.anchorWidth;\n      } else {\n        _this.anchorLeft = _this.anchorRight - _this.anchorWidth;\n      }\n\n      _this.requestFrame();\n    };\n    /**\n     *  Handle collisions\n     */\n\n\n    _this.handleCollision = function (entries, observer) {\n      entries.forEach(function (entry) {\n        if (entry.target === _this.rootElement.current) {\n          _this.handlePositionerCollision(entry, entries.length === 1);\n        } else {\n          _this.handleAnchorCollision(entry);\n        }\n      });\n\n      var viewPortElement = _this.getViewportElement(_this.props.viewport);\n\n      if (!isNil(viewPortElement)) {\n        _this.scrollTop = viewPortElement.scrollTop;\n        _this.scrollLeft = viewPortElement.scrollLeft;\n      }\n\n      if (entries.length === 2) {\n        _this.updatePositionerOffset();\n      }\n\n      _this.requestFrame();\n    };\n    /**\n     *  Update data based on anchor collisions\n     */\n\n\n    _this.handleAnchorCollision = function (anchorEntry) {\n      _this.viewportRect = anchorEntry.rootBounds;\n      _this.anchorTop = anchorEntry.boundingClientRect.top;\n      _this.anchorRight = anchorEntry.boundingClientRect.right;\n      _this.anchorBottom = anchorEntry.boundingClientRect.bottom;\n      _this.anchorLeft = anchorEntry.boundingClientRect.left;\n      _this.anchorHeight = anchorEntry.boundingClientRect.height;\n      _this.anchorWidth = anchorEntry.boundingClientRect.width;\n    };\n    /**\n     *  Update data based on positioner collisions\n     */\n\n\n    _this.handlePositionerCollision = function (positionerEntry, shouldDeriveAnchorPosition) {\n      _this.viewportRect = positionerEntry.rootBounds;\n      _this.positionerRect = positionerEntry.boundingClientRect;\n\n      if (shouldDeriveAnchorPosition) {\n        switch (_this.state.currentVerticalPosition) {\n          case ViewportPositionerVerticalPositionLabel.top:\n            _this.anchorTop = _this.positionerRect.bottom - _this.state.yTranslate;\n            _this.anchorBottom = _this.anchorTop + _this.anchorHeight;\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.insetTop:\n            _this.anchorBottom = _this.positionerRect.bottom - _this.state.yTranslate;\n            _this.anchorTop = _this.anchorBottom - _this.anchorHeight;\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.insetBottom:\n            _this.anchorTop = _this.positionerRect.top - _this.state.yTranslate;\n            _this.anchorBottom = _this.anchorTop + _this.anchorHeight;\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.bottom:\n            _this.anchorBottom = _this.positionerRect.top - _this.state.yTranslate;\n            _this.anchorTop = _this.anchorBottom - _this.anchorHeight;\n            break;\n        }\n\n        switch (_this.state.currentHorizontalPosition) {\n          case ViewportPositionerHorizontalPositionLabel.left:\n            _this.anchorLeft = _this.positionerRect.right - _this.state.xTranslate;\n            _this.anchorRight = _this.anchorLeft + _this.anchorWidth;\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.insetLeft:\n            _this.anchorRight = _this.positionerRect.right - _this.state.xTranslate;\n            _this.anchorLeft = _this.anchorRight - _this.anchorWidth;\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.insetRight:\n            _this.anchorLeft = _this.positionerRect.left - _this.state.xTranslate;\n            _this.anchorRight = _this.anchorLeft + _this.anchorWidth;\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.right:\n            _this.anchorRight = _this.positionerRect.left - _this.state.xTranslate;\n            _this.anchorLeft = _this.anchorRight - _this.anchorWidth;\n            break;\n        }\n      }\n    };\n    /**\n     *  Update the offset values\n     */\n\n\n    _this.updatePositionerOffset = function () {\n      if (_this.props.horizontalPositioningMode === AxisPositioningMode.uncontrolled) {\n        _this.baseHorizontalOffset = _this.anchorLeft - _this.positionerRect.left;\n      } else {\n        switch (_this.state.currentHorizontalPosition) {\n          case ViewportPositionerHorizontalPositionLabel.undefined:\n            _this.baseHorizontalOffset = _this.anchorLeft + _this.state.xTranslate - _this.positionerRect.left;\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.left:\n            _this.baseHorizontalOffset = _this.baseHorizontalOffset + (_this.anchorLeft + _this.state.xTranslate - _this.positionerRect.right);\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.insetLeft:\n            _this.baseHorizontalOffset = _this.baseHorizontalOffset + (_this.anchorRight + _this.state.xTranslate - _this.positionerRect.right);\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.insetRight:\n            _this.baseHorizontalOffset = _this.baseHorizontalOffset + (_this.anchorLeft + _this.state.xTranslate - _this.positionerRect.left);\n            break;\n\n          case ViewportPositionerHorizontalPositionLabel.right:\n            _this.baseHorizontalOffset = _this.baseHorizontalOffset + (_this.anchorRight + _this.state.xTranslate - _this.positionerRect.left);\n            break;\n        }\n      }\n\n      if (_this.props.verticalPositioningMode === AxisPositioningMode.uncontrolled) {\n        _this.baseVerticalOffset = _this.anchorBottom - _this.positionerRect.top;\n      } else {\n        switch (_this.state.currentVerticalPosition) {\n          case ViewportPositionerVerticalPositionLabel.undefined:\n            _this.baseVerticalOffset = _this.anchorBottom + _this.state.yTranslate - _this.positionerRect.top;\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.top:\n            _this.baseVerticalOffset = _this.baseVerticalOffset + (_this.anchorTop + _this.state.yTranslate - _this.positionerRect.bottom);\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.insetTop:\n            _this.baseVerticalOffset = _this.baseVerticalOffset + (_this.anchorBottom + _this.state.yTranslate - _this.positionerRect.bottom);\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.insetBottom:\n            _this.baseVerticalOffset = _this.baseVerticalOffset + (_this.anchorTop + _this.state.yTranslate - _this.positionerRect.top);\n            break;\n\n          case ViewportPositionerVerticalPositionLabel.bottom:\n            _this.baseVerticalOffset = _this.baseVerticalOffset + (_this.anchorBottom + _this.state.yTranslate - _this.positionerRect.top);\n            break;\n        }\n      }\n    };\n    /**\n     * Check for scroll changes in viewport and adjust position data\n     */\n\n\n    _this.updateForScrolling = function () {\n      var scrollingContainer = _this.getViewportElement(_this.props.viewport);\n\n      if (isNil(scrollingContainer) || isNaN(scrollingContainer.scrollTop)) {\n        return;\n      }\n\n      var scrollTop = scrollingContainer.scrollTop;\n      var scrollLeft = scrollingContainer.scrollLeft;\n\n      if (_this.scrollTop !== scrollTop) {\n        var verticalScrollDelta = _this.scrollTop - scrollTop;\n        _this.scrollTop = scrollTop;\n        _this.anchorTop = _this.anchorTop + verticalScrollDelta;\n        _this.anchorBottom = _this.anchorBottom + verticalScrollDelta;\n      }\n\n      if (_this.scrollLeft !== scrollLeft) {\n        var horizontalScrollDelta = _this.scrollLeft - scrollLeft;\n        _this.scrollLeft = scrollLeft;\n        _this.anchorLeft = _this.anchorLeft + horizontalScrollDelta;\n        _this.anchorRight = _this.anchorRight + horizontalScrollDelta;\n      }\n    };\n    /**\n     *  Recalculate layout related state values\n     */\n\n\n    _this.updateLayout = function () {\n      _this.openRequestAnimationFrame = null;\n\n      if (_this.state.disabled || isNil(_this.viewportRect) || isNil(_this.positionerRect) || _this.props.fixedAfterInitialPlacement && _this.state.initialLayoutComplete || _this.state.noObserverMode && _this.state.initialLayoutComplete) {\n        return;\n      }\n\n      _this.updateForScrolling();\n\n      var desiredVerticalPosition = ViewportPositionerVerticalPositionLabel.undefined;\n      var desiredHorizontalPosition = ViewportPositionerHorizontalPositionLabel.undefined;\n\n      if (_this.props.horizontalPositioningMode !== AxisPositioningMode.uncontrolled) {\n        var horizontalOptions = _this.getHorizontalPositioningOptions();\n\n        desiredHorizontalPosition = _this.state.defaultHorizontalPosition;\n        var horizontalThreshold = _this.props.horizontalThreshold !== undefined ? _this.props.horizontalThreshold : _this.positionerRect.width;\n\n        if (desiredHorizontalPosition === ViewportPositionerHorizontalPositionLabel.undefined || !_this.props.horizontalLockToDefault && _this.getAvailableWidth(desiredHorizontalPosition) < horizontalThreshold) {\n          desiredHorizontalPosition = _this.getAvailableWidth(horizontalOptions[0]) > _this.getAvailableWidth(horizontalOptions[1]) ? horizontalOptions[0] : horizontalOptions[1];\n        }\n      }\n\n      if (_this.props.verticalPositioningMode !== AxisPositioningMode.uncontrolled) {\n        var verticalOptions = _this.getVerticalPositioningOptions();\n\n        desiredVerticalPosition = _this.state.defaultVerticalPosition;\n        var verticalThreshold = _this.props.verticalThreshold !== undefined ? _this.props.verticalThreshold : _this.positionerRect.height;\n\n        if (desiredVerticalPosition === ViewportPositionerVerticalPositionLabel.undefined || !_this.props.verticalLockToDefault && _this.getAvailableHeight(desiredVerticalPosition) < verticalThreshold) {\n          desiredVerticalPosition = _this.getAvailableHeight(verticalOptions[0]) > _this.getAvailableHeight(verticalOptions[1]) ? verticalOptions[0] : verticalOptions[1];\n        }\n      }\n\n      var nextPositionerDimension = _this.getNextPositionerDimension(desiredHorizontalPosition, desiredVerticalPosition);\n\n      _this.setState(Object.assign({\n        xTranslate: _this.getHorizontalTranslate(desiredHorizontalPosition),\n        yTranslate: _this.getVerticalTranslate(desiredVerticalPosition),\n        initialLayoutComplete: true\n      }, _this.getHorizontalPositioningState(desiredHorizontalPosition, nextPositionerDimension), _this.getVerticalPositioningState(desiredVerticalPosition, nextPositionerDimension)));\n    };\n    /**\n     * Get positioner dimensions for next render\n     */\n\n\n    _this.getNextPositionerDimension = function (desiredHorizontalPosition, desiredVerticalPosition) {\n      var newPositionerDimension = {\n        height: _this.positionerRect.height,\n        width: _this.positionerRect.width\n      };\n\n      if (_this.props.scaleToFit) {\n        newPositionerDimension.height = Math.max(Math.min(_this.getAvailableHeight(desiredVerticalPosition), _this.viewportRect.height), isNil(_this.props.verticalThreshold) ? 0 : _this.props.verticalThreshold);\n        newPositionerDimension.width = Math.max(Math.min(_this.getAvailableWidth(desiredHorizontalPosition), _this.viewportRect.width), isNil(_this.props.horizontalThreshold) ? 0 : _this.props.horizontalThreshold);\n      }\n\n      return newPositionerDimension;\n    };\n    /**\n     * Get horizontal positioning state based on desired position\n     */\n\n\n    _this.getHorizontalPositioningState = function (desiredHorizontalPosition, nextPositionerDimension) {\n      var right = null;\n      var left = null;\n      var xTransformOrigin = \"left\"\n      /* left */\n      ;\n\n      switch (desiredHorizontalPosition) {\n        case ViewportPositionerHorizontalPositionLabel.left:\n          xTransformOrigin = \"right\"\n          /* right */\n          ;\n          right = nextPositionerDimension.width - _this.baseHorizontalOffset;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.insetLeft:\n          xTransformOrigin = \"right\"\n          /* right */\n          ;\n          right = nextPositionerDimension.width - _this.anchorWidth - _this.baseHorizontalOffset;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.insetRight:\n          xTransformOrigin = \"left\"\n          /* left */\n          ;\n          left = _this.baseHorizontalOffset;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.right:\n          xTransformOrigin = \"left\"\n          /* left */\n          ;\n          left = _this.anchorWidth + _this.baseHorizontalOffset;\n          break;\n      }\n\n      return {\n        xTransformOrigin: xTransformOrigin,\n        right: right,\n        left: left,\n        currentHorizontalPosition: desiredHorizontalPosition,\n        horizontalSelectedPositionWidth: nextPositionerDimension.width\n      };\n    };\n    /**\n     * Get vertical positioning state based on desired position\n     */\n\n\n    _this.getVerticalPositioningState = function (desiredVerticalPosition, nextPositionerDimension) {\n      var top = null;\n      var bottom = null;\n      var yTransformOrigin = \"top\"\n      /* top */\n      ;\n\n      switch (desiredVerticalPosition) {\n        case ViewportPositionerVerticalPositionLabel.top:\n          yTransformOrigin = \"bottom\"\n          /* bottom */\n          ;\n          bottom = nextPositionerDimension.height + _this.anchorHeight - _this.baseVerticalOffset;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.insetTop:\n          yTransformOrigin = \"bottom\"\n          /* bottom */\n          ;\n          bottom = nextPositionerDimension.height - _this.baseVerticalOffset;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.insetBottom:\n          yTransformOrigin = \"top\"\n          /* top */\n          ;\n          top = _this.baseVerticalOffset - _this.anchorHeight;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.bottom:\n          yTransformOrigin = \"top\"\n          /* top */\n          ;\n          top = _this.baseVerticalOffset;\n          break;\n      }\n\n      return {\n        yTransformOrigin: yTransformOrigin,\n        top: top,\n        bottom: bottom,\n        currentVerticalPosition: desiredVerticalPosition,\n        verticalSelectedPositionHeight: nextPositionerDimension.height\n      };\n    };\n    /**\n     *  Calculate horizontal translation to keep positioner in view\n     */\n\n\n    _this.getHorizontalTranslate = function (horizontalPosition) {\n      if (!_this.props.horizontalAlwaysInView || _this.state.disabled) {\n        return 0;\n      }\n\n      var translate = 0;\n\n      switch (horizontalPosition) {\n        case ViewportPositionerHorizontalPositionLabel.left:\n          translate = _this.viewportRect.right - _this.anchorLeft;\n          translate = translate < 0 ? translate - 1 : 0;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.insetLeft:\n          translate = _this.viewportRect.right - _this.anchorRight;\n          translate = translate < 0 ? translate - 1 : 0;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.insetRight:\n          translate = _this.viewportRect.left - _this.anchorLeft;\n          translate = translate > 0 ? translate + 1 : 0;\n          break;\n\n        case ViewportPositionerHorizontalPositionLabel.right:\n          translate = _this.viewportRect.left - _this.anchorRight;\n          translate = translate > 0 ? translate + 1 : 0;\n          break;\n      }\n\n      return translate;\n    };\n    /**\n     *  Calculate vertical translation to keep positioner in view\n     */\n\n\n    _this.getVerticalTranslate = function (verticalPosition) {\n      if (!_this.props.verticalAlwaysInView || _this.state.disabled) {\n        return 0;\n      }\n\n      var translate = 0;\n\n      switch (verticalPosition) {\n        case ViewportPositionerVerticalPositionLabel.top:\n          translate = _this.viewportRect.bottom - _this.anchorTop;\n          translate = translate < 0 ? translate - 1 : 0;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.insetTop:\n          translate = _this.viewportRect.bottom - _this.anchorBottom;\n          translate = translate < 0 ? translate - 1 : 0;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.insetBottom:\n          translate = _this.viewportRect.top - _this.anchorTop;\n          translate = translate < 0 ? 0 : translate + 1;\n          break;\n\n        case ViewportPositionerVerticalPositionLabel.bottom:\n          translate = _this.viewportRect.top - _this.anchorBottom;\n          translate = translate < 0 ? 0 : translate + 1;\n          break;\n      }\n\n      return translate;\n    };\n    /**\n     * Request's an animation frame if there are currently no open animation frame requests\n     */\n\n\n    _this.requestFrame = function () {\n      if (_this.openRequestAnimationFrame === null) {\n        _this.openRequestAnimationFrame = window.requestAnimationFrame(_this.updateLayout);\n      }\n    };\n    /**\n     * get the anchor element\n     */\n\n\n    _this.getAnchorElement = function () {\n      if (isNil(_this.props.anchor)) {\n        return null;\n      }\n\n      return _this.extractElementFromRef(_this.props.anchor);\n    };\n    /**\n     * get the viewport element, prefer one provided in props, then context, then document root\n     */\n\n\n    _this.getViewportElement = function (viewportRef) {\n      if (!isNil(viewportRef)) {\n        return _this.extractElementFromRef(viewportRef);\n      }\n\n      if (!isNil(_this.context.viewport)) {\n        return _this.extractElementFromRef(_this.context.viewport);\n      }\n\n      if (document.scrollingElement instanceof HTMLElement) {\n        return document.scrollingElement;\n      }\n\n      return null;\n    };\n    /**\n     * returns an html element from a ref\n     */\n\n\n    _this.extractElementFromRef = function (sourceRef) {\n      if (sourceRef instanceof HTMLElement) {\n        return sourceRef;\n      }\n\n      if (!isNil(sourceRef.current)) {\n        if (sourceRef.current instanceof HTMLElement) {\n          return sourceRef.current;\n        }\n\n        var foundNode = ReactDOM.findDOMNode(sourceRef.current);\n\n        if (foundNode instanceof HTMLElement) {\n          return foundNode;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Converts simple horizontal position to a position label based on AxisPositioningMode\n     */\n\n\n    _this.getHorizontalPositionToLabel = function (positioningMode, position) {\n      switch (positioningMode) {\n        case AxisPositioningMode.inset:\n          if (position === ViewportPositionerHorizontalPosition.left) {\n            return ViewportPositionerHorizontalPositionLabel.insetLeft;\n          } else if (position === ViewportPositionerHorizontalPosition.right) {\n            return ViewportPositionerHorizontalPositionLabel.insetRight;\n          }\n\n        case AxisPositioningMode.adjacent:\n          if (position === ViewportPositionerHorizontalPosition.left) {\n            return ViewportPositionerHorizontalPositionLabel.left;\n          } else if (position === ViewportPositionerHorizontalPosition.right) {\n            return ViewportPositionerHorizontalPositionLabel.right;\n          }\n\n        case AxisPositioningMode.uncontrolled:\n          return ViewportPositionerHorizontalPositionLabel.undefined;\n      }\n    };\n    /**\n     * Converts simple vertical position to a position label based on AxisPositioningMode\n     */\n\n\n    _this.getVerticalPositionToLabel = function (positioningMode, position) {\n      switch (positioningMode) {\n        case AxisPositioningMode.inset:\n          if (position === ViewportPositionerVerticalPosition.top) {\n            return ViewportPositionerVerticalPositionLabel.insetTop;\n          } else if (position === ViewportPositionerVerticalPosition.bottom) {\n            return ViewportPositionerVerticalPositionLabel.insetBottom;\n          }\n\n        case AxisPositioningMode.adjacent:\n          if (position === ViewportPositionerVerticalPosition.top) {\n            return ViewportPositionerVerticalPositionLabel.top;\n          } else if (position === ViewportPositionerVerticalPosition.bottom) {\n            return ViewportPositionerVerticalPositionLabel.bottom;\n          }\n\n        case AxisPositioningMode.uncontrolled:\n          return ViewportPositionerVerticalPositionLabel.undefined;\n      }\n    };\n    /**\n     * Gets the uninitialized state\n     */\n\n\n    _this.generateInitialState = function () {\n      return {\n        // Note: when the component is initialized or reset we start with a the disabled state set to true.\n        // This gets set to fals during component initialization assuming the disabled prop is not set to true and\n        // that required resources load correctly (ie an invalid anchor or viewport ref could prevent the component\n        // from ever becoming enabled regardless of the disable prop)\n        disabled: true,\n        noObserverMode: false,\n        xTransformOrigin: \"left\"\n        /* left */\n        ,\n        yTransformOrigin: \"top\"\n        /* top */\n        ,\n        xTranslate: 0,\n        yTranslate: 0,\n        top: null,\n        right: null,\n        bottom: null,\n        left: null,\n        currentHorizontalPosition: ViewportPositionerHorizontalPositionLabel.undefined,\n        currentVerticalPosition: ViewportPositionerVerticalPositionLabel.undefined,\n        defaultHorizontalPosition: _this.getHorizontalPositionToLabel(_this.props.horizontalPositioningMode, _this.props.defaultHorizontalPosition),\n        defaultVerticalPosition: _this.getVerticalPositionToLabel(_this.props.verticalPositioningMode, _this.props.defaultVerticalPosition),\n        horizontalSelectedPositionWidth: null,\n        verticalSelectedPositionHeight: null,\n        initialLayoutComplete: false,\n        validRefChecksRemaining: 2\n      };\n    };\n\n    _this.state = _this.generateInitialState();\n    return _this;\n  }\n\n  _createClass(ViewportPositioner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateDisabledState();\n      this.requestFrame();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.disable();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // if anchor or viewport changes the component needs to reset\n      if (prevProps.anchor !== this.props.anchor || prevProps.viewport !== this.props.viewport) {\n        this.detachListeners(prevProps.viewport);\n        this.setState(this.generateInitialState());\n        return;\n      }\n\n      if (prevProps.disabled !== this.props.disabled || this.state.validRefChecksRemaining > 0) {\n        this.updateDisabledState();\n        return;\n      }\n\n      this.requestFrame();\n    }\n    /**\n     * Renders the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        ref: this.rootElement,\n        className: this.generateClassNames(),\n        style: this.getPositioningStyles()\n      }), this.props.children);\n    }\n    /**\n     * Create class-names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          viewportPositioner = _this$props$managedCl.viewportPositioner,\n          viewportPositioner__left = _this$props$managedCl.viewportPositioner__left,\n          viewportPositioner__right = _this$props$managedCl.viewportPositioner__right,\n          viewportPositioner__top = _this$props$managedCl.viewportPositioner__top,\n          viewportPositioner__bottom = _this$props$managedCl.viewportPositioner__bottom,\n          viewportPositioner__horizontalInset = _this$props$managedCl.viewportPositioner__horizontalInset,\n          viewportPositioner__verticalInset = _this$props$managedCl.viewportPositioner__verticalInset;\n      var horizontalPosition = this.state.currentHorizontalPosition;\n      var verticalPosition = this.state.currentVerticalPosition;\n      var isVerticalInset = verticalPosition === ViewportPositionerVerticalPositionLabel.insetTop || verticalPosition === ViewportPositionerVerticalPositionLabel.insetBottom;\n      var isHorizontalInset = horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetLeft || horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetRight;\n      return _get(_getPrototypeOf(ViewportPositioner.prototype), \"generateClassNames\", this).call(this, classNames(viewportPositioner, [viewportPositioner__left, horizontalPosition === ViewportPositionerHorizontalPositionLabel.left || horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetLeft], [viewportPositioner__right, horizontalPosition === ViewportPositionerHorizontalPositionLabel.right || horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetRight], [viewportPositioner__horizontalInset, isHorizontalInset], [viewportPositioner__top, verticalPosition === ViewportPositionerVerticalPositionLabel.top || verticalPosition === ViewportPositionerVerticalPositionLabel.insetTop], [viewportPositioner__bottom, verticalPosition === ViewportPositionerVerticalPositionLabel.bottom || verticalPosition === ViewportPositionerVerticalPositionLabel.insetBottom], [viewportPositioner__verticalInset, isVerticalInset]));\n    }\n  }]);\n\n  return ViewportPositioner;\n}(Foundation);\n\nViewportPositioner.displayName = \"\".concat(DisplayNamePrefix, \"ViewportPositioner\");\nViewportPositioner.contextType = ViewportContext;\nViewportPositioner.defaultProps = {\n  horizontalPositioningMode: AxisPositioningMode.uncontrolled,\n  defaultHorizontalPosition: ViewportPositionerHorizontalPosition.uncontrolled,\n  verticalPositioningMode: AxisPositioningMode.adjacent,\n  defaultVerticalPosition: ViewportPositionerVerticalPosition.bottom,\n  horizontalAlwaysInView: false,\n  verticalAlwaysInView: false,\n  verticalLockToDefault: false,\n  horizontalLockToDefault: false,\n  fixedAfterInitialPlacement: false,\n  scaleToFit: false,\n  managedClasses: {}\n};\nViewportPositioner.contextType = ViewportContext;\nexport default ViewportPositioner;\nexport * from \"./viewport-positioner.props\";\nexport { ViewportContext };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/viewport-positioner/viewport-positioner.js"],"names":["Foundation","classNames","canUseDOM","get","isNil","React","ReactDOM","DisplayNamePrefix","AxisPositioningMode","ViewportPositionerHorizontalPosition","ViewportPositionerVerticalPosition","ViewportContext","ViewportPositionerHorizontalPositionLabel","ViewportPositionerVerticalPositionLabel","ViewportPositioner","props","handledProps","managedClasses","anchor","viewport","horizontalPositioningMode","defaultHorizontalPosition","horizontalThreshold","horizontalAlwaysInView","horizontalLockToDefault","verticalPositioningMode","defaultVerticalPosition","verticalThreshold","verticalAlwaysInView","verticalLockToDefault","fixedAfterInitialPlacement","scaleToFit","disabled","rootElement","createRef","openRequestAnimationFrame","anchorTop","anchorRight","anchorBottom","anchorLeft","anchorHeight","anchorWidth","scrollTop","scrollLeft","baseHorizontalOffset","baseVerticalOffset","getPositioningStyles","styleProps","Object","assign","height","state","verticalSelectedPositionHeight","width","horizontalSelectedPositionWidth","opacity","initialLayoutComplete","undefined","position","transformOrigin","xTransformOrigin","yTransformOrigin","transform","Math","floor","xTranslate","yTranslate","top","right","bottom","left","updateDisabledState","disable","getAnchorElement","getViewportElement","validRefChecksRemaining","setState","enableComponent","viewportElement","anchorElement","current","window","IntersectionObserver","ResizeObserver","setNoObserverMode","noObserverMode","collisionDetector","handleCollision","root","rootMargin","threshold","observe","resizeDetector","handleAnchorResize","addEventListener","handleScroll","positionerRect","getBoundingClientRect","viewportRect","anchorRect","updatePositionerOffset","requestFrame","detachListeners","viewportRef","viewPortElement","removeEventListener","disconnect","getHorizontalPositioningOptions","inset","insetLeft","insetRight","adjacent","getVerticalPositioningOptions","insetTop","insetBottom","getAvailableWidth","positionOption","spaceLeft","spaceRight","getAvailableHeight","spaceAbove","spaceBelow","entries","entry","contentRect","currentVerticalPosition","currentHorizontalPosition","observer","forEach","target","handlePositionerCollision","length","handleAnchorCollision","anchorEntry","rootBounds","boundingClientRect","positionerEntry","shouldDeriveAnchorPosition","uncontrolled","updateForScrolling","scrollingContainer","isNaN","verticalScrollDelta","horizontalScrollDelta","updateLayout","desiredVerticalPosition","desiredHorizontalPosition","horizontalOptions","verticalOptions","nextPositionerDimension","getNextPositionerDimension","getHorizontalTranslate","getVerticalTranslate","getHorizontalPositioningState","getVerticalPositioningState","newPositionerDimension","max","min","horizontalPosition","translate","verticalPosition","requestAnimationFrame","extractElementFromRef","context","document","scrollingElement","HTMLElement","sourceRef","foundNode","findDOMNode","getHorizontalPositionToLabel","positioningMode","getVerticalPositionToLabel","generateInitialState","prevProps","createElement","unhandledProps","ref","className","generateClassNames","style","children","viewportPositioner","viewportPositioner__left","viewportPositioner__right","viewportPositioner__top","viewportPositioner__bottom","viewportPositioner__horizontalInset","viewportPositioner__verticalInset","isVerticalInset","isHorizontalInset","displayName","contextType","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { get, isNil } from \"lodash-es\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DisplayNamePrefix, } from \"../utilities\";\nimport { AxisPositioningMode, ViewportPositionerHorizontalPosition, ViewportPositionerVerticalPosition, } from \"./viewport-positioner.props\";\nimport { ViewportContext } from \"./viewport-context\";\nexport var ViewportPositionerHorizontalPositionLabel;\n(function (ViewportPositionerHorizontalPositionLabel) {\n    ViewportPositionerHorizontalPositionLabel[\"left\"] = \"left\";\n    ViewportPositionerHorizontalPositionLabel[\"insetLeft\"] = \"insetLeft\";\n    ViewportPositionerHorizontalPositionLabel[\"insetRight\"] = \"insetRight\";\n    ViewportPositionerHorizontalPositionLabel[\"right\"] = \"right\";\n    ViewportPositionerHorizontalPositionLabel[\"undefined\"] = \"undefined\";\n})(ViewportPositionerHorizontalPositionLabel || (ViewportPositionerHorizontalPositionLabel = {}));\nexport var ViewportPositionerVerticalPositionLabel;\n(function (ViewportPositionerVerticalPositionLabel) {\n    ViewportPositionerVerticalPositionLabel[\"top\"] = \"top\";\n    ViewportPositionerVerticalPositionLabel[\"insetTop\"] = \"insetTop\";\n    ViewportPositionerVerticalPositionLabel[\"insetBottom\"] = \"insetBottom\";\n    ViewportPositionerVerticalPositionLabel[\"bottom\"] = \"bottom\";\n    ViewportPositionerVerticalPositionLabel[\"undefined\"] = \"undefined\";\n})(ViewportPositionerVerticalPositionLabel || (ViewportPositionerVerticalPositionLabel = {}));\nclass ViewportPositioner extends Foundation {\n    /**\n     * constructor\n     */\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            managedClasses: void 0,\n            anchor: void 0,\n            viewport: void 0,\n            horizontalPositioningMode: void 0,\n            defaultHorizontalPosition: void 0,\n            horizontalThreshold: void 0,\n            horizontalAlwaysInView: void 0,\n            horizontalLockToDefault: void 0,\n            verticalPositioningMode: void 0,\n            defaultVerticalPosition: void 0,\n            verticalThreshold: void 0,\n            verticalAlwaysInView: void 0,\n            verticalLockToDefault: void 0,\n            fixedAfterInitialPlacement: void 0,\n            scaleToFit: void 0,\n            disabled: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.openRequestAnimationFrame = null;\n        this.anchorTop = 0;\n        this.anchorRight = 0;\n        this.anchorBottom = 0;\n        this.anchorLeft = 0;\n        this.anchorHeight = 0;\n        this.anchorWidth = 0;\n        this.scrollTop = 0;\n        this.scrollLeft = 0;\n        /**\n         * base offsets between the positioner's base position and the anchor's\n         */\n        this.baseHorizontalOffset = 0;\n        this.baseVerticalOffset = 0;\n        /**\n         *  gets the CSS classes to be programmatically applied to the component\n         */\n        this.getPositioningStyles = () => {\n            // Check if there is already a style object being passed as props\n            const styleProps = get(this.props, \"style\");\n            return Object.assign({}, (this.props.scaleToFit\n                ? {\n                    height: `${this.state.verticalSelectedPositionHeight}px`,\n                    width: `${this.state.horizontalSelectedPositionWidth}px`,\n                }\n                : {}), { \n                // hide the component until afer initial layout attempst (to avoid a flicker)\n                opacity: !this.props.disabled && !this.state.initialLayoutComplete ? 0 : undefined, position: \"relative\", transformOrigin: `${this.state.xTransformOrigin} ${this.state.yTransformOrigin}`, transform: `translate(\n                ${Math.floor(this.state.xTranslate)}px, \n                ${Math.floor(this.state.yTranslate)}px\n            )`, top: this.state.top === null ? null : `${this.state.top}px`, right: this.state.right === null ? null : `${this.state.right}px`, bottom: this.state.bottom === null ? null : `${this.state.bottom}px`, left: this.state.left === null ? null : `${this.state.left}px` }, styleProps);\n        };\n        /**\n         *  Checks whether component should be disabled or not\n         */\n        this.updateDisabledState = () => {\n            if (!canUseDOM() || this.props.disabled === true) {\n                this.disable();\n                return;\n            }\n            if (this.getAnchorElement() === null ||\n                this.getViewportElement(this.props.viewport) === null) {\n                if (this.state.validRefChecksRemaining > 0) {\n                    this.setState({\n                        validRefChecksRemaining: this.state.validRefChecksRemaining - 1,\n                        initialLayoutComplete: this.state.validRefChecksRemaining <= 1,\n                    });\n                    return;\n                }\n            }\n            this.enableComponent();\n        };\n        /**\n         *  Enable the component\n         */\n        this.enableComponent = () => {\n            const viewportElement = this.getViewportElement(this.props.viewport);\n            const anchorElement = this.getAnchorElement();\n            if (!this.state.disabled ||\n                this.props.disabled ||\n                isNil(anchorElement) ||\n                isNil(viewportElement) ||\n                isNil(this.rootElement.current)) {\n                return;\n            }\n            if (!window.IntersectionObserver ||\n                !window.ResizeObserver) {\n                this.setNoObserverMode();\n                return;\n            }\n            this.setState({\n                disabled: false,\n                noObserverMode: false,\n                validRefChecksRemaining: 0,\n            });\n            this.collisionDetector = new window.IntersectionObserver(this.handleCollision, {\n                root: viewportElement,\n                rootMargin: \"0px\",\n                threshold: [0, 1],\n            });\n            this.collisionDetector.observe(this.rootElement.current);\n            this.collisionDetector.observe(anchorElement);\n            this.resizeDetector = new window.ResizeObserver(this.handleAnchorResize);\n            this.resizeDetector.observe(anchorElement);\n            viewportElement.addEventListener(\"scroll\", this.handleScroll);\n        };\n        /**\n         *  If observers are not supported we do expensive getBoundingClientRect calls\n         *  once to get correct initial placement\n         */\n        this.setNoObserverMode = () => {\n            const viewportElement = this.getViewportElement(this.props.viewport);\n            const anchorElement = this.getAnchorElement();\n            if (isNil(viewportElement) || isNil(anchorElement)) {\n                return;\n            }\n            this.positionerRect = this.rootElement.current.getBoundingClientRect();\n            this.viewportRect = viewportElement.getBoundingClientRect();\n            const anchorRect = anchorElement.getBoundingClientRect();\n            this.anchorTop = anchorRect.top;\n            this.anchorRight = anchorRect.right;\n            this.anchorBottom = anchorRect.bottom;\n            this.anchorLeft = anchorRect.left;\n            this.anchorWidth = anchorRect.width;\n            this.anchorHeight = anchorRect.height;\n            this.updatePositionerOffset();\n            this.setState({\n                validRefChecksRemaining: 0,\n                disabled: false,\n                noObserverMode: true,\n            });\n            this.requestFrame();\n        };\n        /**\n         *  Disable the component\n         */\n        this.disable = () => {\n            if (this.state.disabled) {\n                return;\n            }\n            this.detachListeners(this.props.viewport);\n            this.setState({\n                disabled: true,\n                validRefChecksRemaining: 0,\n            });\n        };\n        /**\n         *  removes event listeners and observers when component is being unmounted or reset\n         */\n        this.detachListeners = (viewportRef) => {\n            const viewPortElement = this.getViewportElement(viewportRef);\n            if (!isNil(viewPortElement)) {\n                viewPortElement.removeEventListener(\"scroll\", this.handleScroll);\n            }\n            if (this.collisionDetector &&\n                typeof this.collisionDetector.disconnect === \"function\") {\n                this.collisionDetector.disconnect();\n                this.collisionDetector = null;\n            }\n            // TODO #1142 https://github.com/Microsoft/fast-dna/issues/1142\n            // Full browser support imminent\n            // Revisit usage once Safari and Firefox adapt\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1272409\n            // https://bugs.webkit.org/show_bug.cgi?id=157743\n            if (this.resizeDetector && typeof this.resizeDetector.disconnect === \"function\") {\n                this.resizeDetector.disconnect();\n                this.resizeDetector = null;\n            }\n        };\n        /**\n         *  Get available Horizontal positions based on positioning mode\n         */\n        this.getHorizontalPositioningOptions = () => {\n            switch (this.props.horizontalPositioningMode) {\n                case AxisPositioningMode.inset:\n                    return [\n                        ViewportPositionerHorizontalPositionLabel.insetLeft,\n                        ViewportPositionerHorizontalPositionLabel.insetRight,\n                    ];\n                case AxisPositioningMode.adjacent:\n                    return [\n                        ViewportPositionerHorizontalPositionLabel.left,\n                        ViewportPositionerHorizontalPositionLabel.right,\n                    ];\n            }\n        };\n        /**\n         * Get available Vertical positions based on positioning mode\n         */\n        this.getVerticalPositioningOptions = () => {\n            switch (this.props.verticalPositioningMode) {\n                case AxisPositioningMode.inset:\n                    return [\n                        ViewportPositionerVerticalPositionLabel.insetTop,\n                        ViewportPositionerVerticalPositionLabel.insetBottom,\n                    ];\n                case AxisPositioningMode.adjacent:\n                    return [\n                        ViewportPositionerVerticalPositionLabel.top,\n                        ViewportPositionerVerticalPositionLabel.bottom,\n                    ];\n            }\n        };\n        /**\n         *  Get the width available for a particular horizontal position\n         */\n        this.getAvailableWidth = (positionOption) => {\n            const spaceLeft = this.anchorLeft - this.viewportRect.left;\n            const spaceRight = this.viewportRect.right - (this.anchorLeft + this.anchorWidth);\n            switch (positionOption) {\n                case ViewportPositionerHorizontalPositionLabel.left:\n                    return spaceLeft;\n                case ViewportPositionerHorizontalPositionLabel.insetLeft:\n                    return spaceLeft + this.anchorWidth;\n                case ViewportPositionerHorizontalPositionLabel.insetRight:\n                    return spaceRight + this.anchorWidth;\n                case ViewportPositionerHorizontalPositionLabel.right:\n                    return spaceRight;\n            }\n        };\n        /**\n         *  Get the height available for a particular vertical position\n         */\n        this.getAvailableHeight = (positionOption) => {\n            const spaceAbove = this.anchorTop - this.viewportRect.top;\n            const spaceBelow = this.viewportRect.bottom - (this.anchorTop + this.anchorHeight);\n            switch (positionOption) {\n                case ViewportPositionerVerticalPositionLabel.top:\n                    return spaceAbove;\n                case ViewportPositionerVerticalPositionLabel.insetTop:\n                    return spaceAbove + this.anchorHeight;\n                case ViewportPositionerVerticalPositionLabel.insetBottom:\n                    return spaceBelow + this.anchorHeight;\n                case ViewportPositionerVerticalPositionLabel.bottom:\n                    return spaceBelow;\n            }\n        };\n        /**\n         *  Handle scroll events\n         */\n        this.handleScroll = () => {\n            this.requestFrame();\n        };\n        /**\n         *  Handle anchor resize events\n         */\n        this.handleAnchorResize = (entries) => {\n            const entry = entries[0];\n            this.anchorHeight = entry.contentRect.height;\n            this.anchorWidth = entry.contentRect.width;\n            if (this.state.currentVerticalPosition ===\n                ViewportPositionerVerticalPositionLabel.top ||\n                this.state.currentVerticalPosition ===\n                    ViewportPositionerVerticalPositionLabel.insetTop) {\n                this.anchorBottom = this.anchorTop + this.anchorHeight;\n            }\n            else {\n                this.anchorTop = this.anchorBottom - this.anchorHeight;\n            }\n            if (this.state.currentHorizontalPosition ===\n                ViewportPositionerHorizontalPositionLabel.left ||\n                this.state.currentHorizontalPosition ===\n                    ViewportPositionerHorizontalPositionLabel.insetLeft) {\n                this.anchorRight = this.anchorLeft + this.anchorWidth;\n            }\n            else {\n                this.anchorLeft = this.anchorRight - this.anchorWidth;\n            }\n            this.requestFrame();\n        };\n        /**\n         *  Handle collisions\n         */\n        this.handleCollision = (entries, observer) => {\n            entries.forEach((entry) => {\n                if (entry.target === this.rootElement.current) {\n                    this.handlePositionerCollision(entry, entries.length === 1);\n                }\n                else {\n                    this.handleAnchorCollision(entry);\n                }\n            });\n            const viewPortElement = this.getViewportElement(this.props.viewport);\n            if (!isNil(viewPortElement)) {\n                this.scrollTop = viewPortElement.scrollTop;\n                this.scrollLeft = viewPortElement.scrollLeft;\n            }\n            if (entries.length === 2) {\n                this.updatePositionerOffset();\n            }\n            this.requestFrame();\n        };\n        /**\n         *  Update data based on anchor collisions\n         */\n        this.handleAnchorCollision = (anchorEntry) => {\n            this.viewportRect = anchorEntry.rootBounds;\n            this.anchorTop = anchorEntry.boundingClientRect.top;\n            this.anchorRight = anchorEntry.boundingClientRect.right;\n            this.anchorBottom = anchorEntry.boundingClientRect.bottom;\n            this.anchorLeft = anchorEntry.boundingClientRect.left;\n            this.anchorHeight = anchorEntry.boundingClientRect.height;\n            this.anchorWidth = anchorEntry.boundingClientRect.width;\n        };\n        /**\n         *  Update data based on positioner collisions\n         */\n        this.handlePositionerCollision = (positionerEntry, shouldDeriveAnchorPosition) => {\n            this.viewportRect = positionerEntry.rootBounds;\n            this.positionerRect = positionerEntry.boundingClientRect;\n            if (shouldDeriveAnchorPosition) {\n                switch (this.state.currentVerticalPosition) {\n                    case ViewportPositionerVerticalPositionLabel.top:\n                        this.anchorTop = this.positionerRect.bottom - this.state.yTranslate;\n                        this.anchorBottom = this.anchorTop + this.anchorHeight;\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.insetTop:\n                        this.anchorBottom =\n                            this.positionerRect.bottom - this.state.yTranslate;\n                        this.anchorTop = this.anchorBottom - this.anchorHeight;\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.insetBottom:\n                        this.anchorTop = this.positionerRect.top - this.state.yTranslate;\n                        this.anchorBottom = this.anchorTop + this.anchorHeight;\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.bottom:\n                        this.anchorBottom = this.positionerRect.top - this.state.yTranslate;\n                        this.anchorTop = this.anchorBottom - this.anchorHeight;\n                        break;\n                }\n                switch (this.state.currentHorizontalPosition) {\n                    case ViewportPositionerHorizontalPositionLabel.left:\n                        this.anchorLeft = this.positionerRect.right - this.state.xTranslate;\n                        this.anchorRight = this.anchorLeft + this.anchorWidth;\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.insetLeft:\n                        this.anchorRight = this.positionerRect.right - this.state.xTranslate;\n                        this.anchorLeft = this.anchorRight - this.anchorWidth;\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.insetRight:\n                        this.anchorLeft = this.positionerRect.left - this.state.xTranslate;\n                        this.anchorRight = this.anchorLeft + this.anchorWidth;\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.right:\n                        this.anchorRight = this.positionerRect.left - this.state.xTranslate;\n                        this.anchorLeft = this.anchorRight - this.anchorWidth;\n                        break;\n                }\n            }\n        };\n        /**\n         *  Update the offset values\n         */\n        this.updatePositionerOffset = () => {\n            if (this.props.horizontalPositioningMode === AxisPositioningMode.uncontrolled) {\n                this.baseHorizontalOffset = this.anchorLeft - this.positionerRect.left;\n            }\n            else {\n                switch (this.state.currentHorizontalPosition) {\n                    case ViewportPositionerHorizontalPositionLabel.undefined:\n                        this.baseHorizontalOffset =\n                            this.anchorLeft +\n                                this.state.xTranslate -\n                                this.positionerRect.left;\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.left:\n                        this.baseHorizontalOffset =\n                            this.baseHorizontalOffset +\n                                (this.anchorLeft +\n                                    this.state.xTranslate -\n                                    this.positionerRect.right);\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.insetLeft:\n                        this.baseHorizontalOffset =\n                            this.baseHorizontalOffset +\n                                (this.anchorRight +\n                                    this.state.xTranslate -\n                                    this.positionerRect.right);\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.insetRight:\n                        this.baseHorizontalOffset =\n                            this.baseHorizontalOffset +\n                                (this.anchorLeft +\n                                    this.state.xTranslate -\n                                    this.positionerRect.left);\n                        break;\n                    case ViewportPositionerHorizontalPositionLabel.right:\n                        this.baseHorizontalOffset =\n                            this.baseHorizontalOffset +\n                                (this.anchorRight +\n                                    this.state.xTranslate -\n                                    this.positionerRect.left);\n                        break;\n                }\n            }\n            if (this.props.verticalPositioningMode === AxisPositioningMode.uncontrolled) {\n                this.baseVerticalOffset = this.anchorBottom - this.positionerRect.top;\n            }\n            else {\n                switch (this.state.currentVerticalPosition) {\n                    case ViewportPositionerVerticalPositionLabel.undefined:\n                        this.baseVerticalOffset =\n                            this.anchorBottom +\n                                this.state.yTranslate -\n                                this.positionerRect.top;\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.top:\n                        this.baseVerticalOffset =\n                            this.baseVerticalOffset +\n                                (this.anchorTop +\n                                    this.state.yTranslate -\n                                    this.positionerRect.bottom);\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.insetTop:\n                        this.baseVerticalOffset =\n                            this.baseVerticalOffset +\n                                (this.anchorBottom +\n                                    this.state.yTranslate -\n                                    this.positionerRect.bottom);\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.insetBottom:\n                        this.baseVerticalOffset =\n                            this.baseVerticalOffset +\n                                (this.anchorTop +\n                                    this.state.yTranslate -\n                                    this.positionerRect.top);\n                        break;\n                    case ViewportPositionerVerticalPositionLabel.bottom:\n                        this.baseVerticalOffset =\n                            this.baseVerticalOffset +\n                                (this.anchorBottom +\n                                    this.state.yTranslate -\n                                    this.positionerRect.top);\n                        break;\n                }\n            }\n        };\n        /**\n         * Check for scroll changes in viewport and adjust position data\n         */\n        this.updateForScrolling = () => {\n            const scrollingContainer = this.getViewportElement(this.props.viewport);\n            if (isNil(scrollingContainer) || isNaN(scrollingContainer.scrollTop)) {\n                return;\n            }\n            const scrollTop = scrollingContainer.scrollTop;\n            const scrollLeft = scrollingContainer.scrollLeft;\n            if (this.scrollTop !== scrollTop) {\n                const verticalScrollDelta = this.scrollTop - scrollTop;\n                this.scrollTop = scrollTop;\n                this.anchorTop = this.anchorTop + verticalScrollDelta;\n                this.anchorBottom = this.anchorBottom + verticalScrollDelta;\n            }\n            if (this.scrollLeft !== scrollLeft) {\n                const horizontalScrollDelta = this.scrollLeft - scrollLeft;\n                this.scrollLeft = scrollLeft;\n                this.anchorLeft = this.anchorLeft + horizontalScrollDelta;\n                this.anchorRight = this.anchorRight + horizontalScrollDelta;\n            }\n        };\n        /**\n         *  Recalculate layout related state values\n         */\n        this.updateLayout = () => {\n            this.openRequestAnimationFrame = null;\n            if (this.state.disabled ||\n                isNil(this.viewportRect) ||\n                isNil(this.positionerRect) ||\n                (this.props.fixedAfterInitialPlacement && this.state.initialLayoutComplete) ||\n                (this.state.noObserverMode && this.state.initialLayoutComplete)) {\n                return;\n            }\n            this.updateForScrolling();\n            let desiredVerticalPosition = ViewportPositionerVerticalPositionLabel.undefined;\n            let desiredHorizontalPosition = ViewportPositionerHorizontalPositionLabel.undefined;\n            if (this.props.horizontalPositioningMode !== AxisPositioningMode.uncontrolled) {\n                const horizontalOptions = this.getHorizontalPositioningOptions();\n                desiredHorizontalPosition = this.state.defaultHorizontalPosition;\n                const horizontalThreshold = this.props.horizontalThreshold !== undefined\n                    ? this.props.horizontalThreshold\n                    : this.positionerRect.width;\n                if (desiredHorizontalPosition ===\n                    ViewportPositionerHorizontalPositionLabel.undefined ||\n                    (!this.props.horizontalLockToDefault &&\n                        this.getAvailableWidth(desiredHorizontalPosition) <\n                            horizontalThreshold)) {\n                    desiredHorizontalPosition =\n                        this.getAvailableWidth(horizontalOptions[0]) >\n                            this.getAvailableWidth(horizontalOptions[1])\n                            ? horizontalOptions[0]\n                            : horizontalOptions[1];\n                }\n            }\n            if (this.props.verticalPositioningMode !== AxisPositioningMode.uncontrolled) {\n                const verticalOptions = this.getVerticalPositioningOptions();\n                desiredVerticalPosition = this.state.defaultVerticalPosition;\n                const verticalThreshold = this.props.verticalThreshold !== undefined\n                    ? this.props.verticalThreshold\n                    : this.positionerRect.height;\n                if (desiredVerticalPosition ===\n                    ViewportPositionerVerticalPositionLabel.undefined ||\n                    (!this.props.verticalLockToDefault &&\n                        this.getAvailableHeight(desiredVerticalPosition) < verticalThreshold)) {\n                    desiredVerticalPosition =\n                        this.getAvailableHeight(verticalOptions[0]) >\n                            this.getAvailableHeight(verticalOptions[1])\n                            ? verticalOptions[0]\n                            : verticalOptions[1];\n                }\n            }\n            const nextPositionerDimension = this.getNextPositionerDimension(desiredHorizontalPosition, desiredVerticalPosition);\n            this.setState(Object.assign({\n                xTranslate: this.getHorizontalTranslate(desiredHorizontalPosition),\n                yTranslate: this.getVerticalTranslate(desiredVerticalPosition),\n                initialLayoutComplete: true,\n            }, this.getHorizontalPositioningState(desiredHorizontalPosition, nextPositionerDimension), this.getVerticalPositioningState(desiredVerticalPosition, nextPositionerDimension)));\n        };\n        /**\n         * Get positioner dimensions for next render\n         */\n        this.getNextPositionerDimension = (desiredHorizontalPosition, desiredVerticalPosition) => {\n            const newPositionerDimension = {\n                height: this.positionerRect.height,\n                width: this.positionerRect.width,\n            };\n            if (this.props.scaleToFit) {\n                newPositionerDimension.height = Math.max(Math.min(this.getAvailableHeight(desiredVerticalPosition), this.viewportRect.height), isNil(this.props.verticalThreshold) ? 0 : this.props.verticalThreshold);\n                newPositionerDimension.width = Math.max(Math.min(this.getAvailableWidth(desiredHorizontalPosition), this.viewportRect.width), isNil(this.props.horizontalThreshold) ? 0 : this.props.horizontalThreshold);\n            }\n            return newPositionerDimension;\n        };\n        /**\n         * Get horizontal positioning state based on desired position\n         */\n        this.getHorizontalPositioningState = (desiredHorizontalPosition, nextPositionerDimension) => {\n            let right = null;\n            let left = null;\n            let xTransformOrigin = \"left\" /* left */;\n            switch (desiredHorizontalPosition) {\n                case ViewportPositionerHorizontalPositionLabel.left:\n                    xTransformOrigin = \"right\" /* right */;\n                    right = nextPositionerDimension.width - this.baseHorizontalOffset;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.insetLeft:\n                    xTransformOrigin = \"right\" /* right */;\n                    right =\n                        nextPositionerDimension.width -\n                            this.anchorWidth -\n                            this.baseHorizontalOffset;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.insetRight:\n                    xTransformOrigin = \"left\" /* left */;\n                    left = this.baseHorizontalOffset;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.right:\n                    xTransformOrigin = \"left\" /* left */;\n                    left = this.anchorWidth + this.baseHorizontalOffset;\n                    break;\n            }\n            return {\n                xTransformOrigin,\n                right,\n                left,\n                currentHorizontalPosition: desiredHorizontalPosition,\n                horizontalSelectedPositionWidth: nextPositionerDimension.width,\n            };\n        };\n        /**\n         * Get vertical positioning state based on desired position\n         */\n        this.getVerticalPositioningState = (desiredVerticalPosition, nextPositionerDimension) => {\n            let top = null;\n            let bottom = null;\n            let yTransformOrigin = \"top\" /* top */;\n            switch (desiredVerticalPosition) {\n                case ViewportPositionerVerticalPositionLabel.top:\n                    yTransformOrigin = \"bottom\" /* bottom */;\n                    bottom =\n                        nextPositionerDimension.height +\n                            this.anchorHeight -\n                            this.baseVerticalOffset;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.insetTop:\n                    yTransformOrigin = \"bottom\" /* bottom */;\n                    bottom = nextPositionerDimension.height - this.baseVerticalOffset;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.insetBottom:\n                    yTransformOrigin = \"top\" /* top */;\n                    top = this.baseVerticalOffset - this.anchorHeight;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.bottom:\n                    yTransformOrigin = \"top\" /* top */;\n                    top = this.baseVerticalOffset;\n                    break;\n            }\n            return {\n                yTransformOrigin,\n                top,\n                bottom,\n                currentVerticalPosition: desiredVerticalPosition,\n                verticalSelectedPositionHeight: nextPositionerDimension.height,\n            };\n        };\n        /**\n         *  Calculate horizontal translation to keep positioner in view\n         */\n        this.getHorizontalTranslate = (horizontalPosition) => {\n            if (!this.props.horizontalAlwaysInView || this.state.disabled) {\n                return 0;\n            }\n            let translate = 0;\n            switch (horizontalPosition) {\n                case ViewportPositionerHorizontalPositionLabel.left:\n                    translate = this.viewportRect.right - this.anchorLeft;\n                    translate = translate < 0 ? translate - 1 : 0;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.insetLeft:\n                    translate = this.viewportRect.right - this.anchorRight;\n                    translate = translate < 0 ? translate - 1 : 0;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.insetRight:\n                    translate = this.viewportRect.left - this.anchorLeft;\n                    translate = translate > 0 ? translate + 1 : 0;\n                    break;\n                case ViewportPositionerHorizontalPositionLabel.right:\n                    translate = this.viewportRect.left - this.anchorRight;\n                    translate = translate > 0 ? translate + 1 : 0;\n                    break;\n            }\n            return translate;\n        };\n        /**\n         *  Calculate vertical translation to keep positioner in view\n         */\n        this.getVerticalTranslate = (verticalPosition) => {\n            if (!this.props.verticalAlwaysInView || this.state.disabled) {\n                return 0;\n            }\n            let translate = 0;\n            switch (verticalPosition) {\n                case ViewportPositionerVerticalPositionLabel.top:\n                    translate = this.viewportRect.bottom - this.anchorTop;\n                    translate = translate < 0 ? translate - 1 : 0;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.insetTop:\n                    translate = this.viewportRect.bottom - this.anchorBottom;\n                    translate = translate < 0 ? translate - 1 : 0;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.insetBottom:\n                    translate = this.viewportRect.top - this.anchorTop;\n                    translate = translate < 0 ? 0 : translate + 1;\n                    break;\n                case ViewportPositionerVerticalPositionLabel.bottom:\n                    translate = this.viewportRect.top - this.anchorBottom;\n                    translate = translate < 0 ? 0 : translate + 1;\n                    break;\n            }\n            return translate;\n        };\n        /**\n         * Request's an animation frame if there are currently no open animation frame requests\n         */\n        this.requestFrame = () => {\n            if (this.openRequestAnimationFrame === null) {\n                this.openRequestAnimationFrame = window.requestAnimationFrame(this.updateLayout);\n            }\n        };\n        /**\n         * get the anchor element\n         */\n        this.getAnchorElement = () => {\n            if (isNil(this.props.anchor)) {\n                return null;\n            }\n            return this.extractElementFromRef(this.props.anchor);\n        };\n        /**\n         * get the viewport element, prefer one provided in props, then context, then document root\n         */\n        this.getViewportElement = (viewportRef) => {\n            if (!isNil(viewportRef)) {\n                return this.extractElementFromRef(viewportRef);\n            }\n            if (!isNil(this.context.viewport)) {\n                return this.extractElementFromRef(this.context.viewport);\n            }\n            if (document.scrollingElement instanceof HTMLElement) {\n                return document.scrollingElement;\n            }\n            return null;\n        };\n        /**\n         * returns an html element from a ref\n         */\n        this.extractElementFromRef = (sourceRef) => {\n            if (sourceRef instanceof HTMLElement) {\n                return sourceRef;\n            }\n            if (!isNil(sourceRef.current)) {\n                if (sourceRef.current instanceof HTMLElement) {\n                    return sourceRef.current;\n                }\n                const foundNode = ReactDOM.findDOMNode(sourceRef.current);\n                if (foundNode instanceof HTMLElement) {\n                    return foundNode;\n                }\n            }\n            return null;\n        };\n        /**\n         * Converts simple horizontal position to a position label based on AxisPositioningMode\n         */\n        this.getHorizontalPositionToLabel = (positioningMode, position) => {\n            switch (positioningMode) {\n                case AxisPositioningMode.inset:\n                    if (position === ViewportPositionerHorizontalPosition.left) {\n                        return ViewportPositionerHorizontalPositionLabel.insetLeft;\n                    }\n                    else if (position === ViewportPositionerHorizontalPosition.right) {\n                        return ViewportPositionerHorizontalPositionLabel.insetRight;\n                    }\n                case AxisPositioningMode.adjacent:\n                    if (position === ViewportPositionerHorizontalPosition.left) {\n                        return ViewportPositionerHorizontalPositionLabel.left;\n                    }\n                    else if (position === ViewportPositionerHorizontalPosition.right) {\n                        return ViewportPositionerHorizontalPositionLabel.right;\n                    }\n                case AxisPositioningMode.uncontrolled:\n                    return ViewportPositionerHorizontalPositionLabel.undefined;\n            }\n        };\n        /**\n         * Converts simple vertical position to a position label based on AxisPositioningMode\n         */\n        this.getVerticalPositionToLabel = (positioningMode, position) => {\n            switch (positioningMode) {\n                case AxisPositioningMode.inset:\n                    if (position === ViewportPositionerVerticalPosition.top) {\n                        return ViewportPositionerVerticalPositionLabel.insetTop;\n                    }\n                    else if (position === ViewportPositionerVerticalPosition.bottom) {\n                        return ViewportPositionerVerticalPositionLabel.insetBottom;\n                    }\n                case AxisPositioningMode.adjacent:\n                    if (position === ViewportPositionerVerticalPosition.top) {\n                        return ViewportPositionerVerticalPositionLabel.top;\n                    }\n                    else if (position === ViewportPositionerVerticalPosition.bottom) {\n                        return ViewportPositionerVerticalPositionLabel.bottom;\n                    }\n                case AxisPositioningMode.uncontrolled:\n                    return ViewportPositionerVerticalPositionLabel.undefined;\n            }\n        };\n        /**\n         * Gets the uninitialized state\n         */\n        this.generateInitialState = () => {\n            return {\n                // Note: when the component is initialized or reset we start with a the disabled state set to true.\n                // This gets set to fals during component initialization assuming the disabled prop is not set to true and\n                // that required resources load correctly (ie an invalid anchor or viewport ref could prevent the component\n                // from ever becoming enabled regardless of the disable prop)\n                disabled: true,\n                noObserverMode: false,\n                xTransformOrigin: \"left\" /* left */,\n                yTransformOrigin: \"top\" /* top */,\n                xTranslate: 0,\n                yTranslate: 0,\n                top: null,\n                right: null,\n                bottom: null,\n                left: null,\n                currentHorizontalPosition: ViewportPositionerHorizontalPositionLabel.undefined,\n                currentVerticalPosition: ViewportPositionerVerticalPositionLabel.undefined,\n                defaultHorizontalPosition: this.getHorizontalPositionToLabel(this.props.horizontalPositioningMode, this.props.defaultHorizontalPosition),\n                defaultVerticalPosition: this.getVerticalPositionToLabel(this.props.verticalPositioningMode, this.props.defaultVerticalPosition),\n                horizontalSelectedPositionWidth: null,\n                verticalSelectedPositionHeight: null,\n                initialLayoutComplete: false,\n                validRefChecksRemaining: 2,\n            };\n        };\n        this.state = this.generateInitialState();\n    }\n    componentDidMount() {\n        this.updateDisabledState();\n        this.requestFrame();\n    }\n    componentWillUnmount() {\n        this.disable();\n    }\n    componentDidUpdate(prevProps) {\n        // if anchor or viewport changes the component needs to reset\n        if (prevProps.anchor !== this.props.anchor ||\n            prevProps.viewport !== this.props.viewport) {\n            this.detachListeners(prevProps.viewport);\n            this.setState(this.generateInitialState());\n            return;\n        }\n        if (prevProps.disabled !== this.props.disabled ||\n            this.state.validRefChecksRemaining > 0) {\n            this.updateDisabledState();\n            return;\n        }\n        this.requestFrame();\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, className: this.generateClassNames(), style: this.getPositioningStyles() }), this.props.children));\n    }\n    /**\n     * Create class-names\n     */\n    generateClassNames() {\n        const { viewportPositioner, viewportPositioner__left, viewportPositioner__right, viewportPositioner__top, viewportPositioner__bottom, viewportPositioner__horizontalInset, viewportPositioner__verticalInset, } = this.props.managedClasses;\n        const horizontalPosition = this.state\n            .currentHorizontalPosition;\n        const verticalPosition = this.state\n            .currentVerticalPosition;\n        const isVerticalInset = verticalPosition === ViewportPositionerVerticalPositionLabel.insetTop ||\n            verticalPosition === ViewportPositionerVerticalPositionLabel.insetBottom;\n        const isHorizontalInset = horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetLeft ||\n            horizontalPosition === ViewportPositionerHorizontalPositionLabel.insetRight;\n        return super.generateClassNames(classNames(viewportPositioner, [\n            viewportPositioner__left,\n            horizontalPosition ===\n                ViewportPositionerHorizontalPositionLabel.left ||\n                horizontalPosition ===\n                    ViewportPositionerHorizontalPositionLabel.insetLeft,\n        ], [\n            viewportPositioner__right,\n            horizontalPosition ===\n                ViewportPositionerHorizontalPositionLabel.right ||\n                horizontalPosition ===\n                    ViewportPositionerHorizontalPositionLabel.insetRight,\n        ], [viewportPositioner__horizontalInset, isHorizontalInset], [\n            viewportPositioner__top,\n            verticalPosition === ViewportPositionerVerticalPositionLabel.top ||\n                verticalPosition ===\n                    ViewportPositionerVerticalPositionLabel.insetTop,\n        ], [\n            viewportPositioner__bottom,\n            verticalPosition === ViewportPositionerVerticalPositionLabel.bottom ||\n                verticalPosition ===\n                    ViewportPositionerVerticalPositionLabel.insetBottom,\n        ], [viewportPositioner__verticalInset, isVerticalInset]));\n    }\n}\nViewportPositioner.displayName = `${DisplayNamePrefix}ViewportPositioner`;\nViewportPositioner.contextType = ViewportContext;\nViewportPositioner.defaultProps = {\n    horizontalPositioningMode: AxisPositioningMode.uncontrolled,\n    defaultHorizontalPosition: ViewportPositionerHorizontalPosition.uncontrolled,\n    verticalPositioningMode: AxisPositioningMode.adjacent,\n    defaultVerticalPosition: ViewportPositionerVerticalPosition.bottom,\n    horizontalAlwaysInView: false,\n    verticalAlwaysInView: false,\n    verticalLockToDefault: false,\n    horizontalLockToDefault: false,\n    fixedAfterInitialPlacement: false,\n    scaleToFit: false,\n    managedClasses: {},\n};\nViewportPositioner.contextType = ViewportContext;\nexport default ViewportPositioner;\nexport * from \"./viewport-positioner.props\";\nexport { ViewportContext };\n"]},"metadata":{},"sourceType":"module"}