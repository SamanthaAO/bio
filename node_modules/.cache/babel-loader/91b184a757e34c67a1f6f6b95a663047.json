{"ast":null,"code":"import _defineProperty from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { toPx } from \"@microsoft/fast-jss-utilities\";\nimport { densityCategorySwitch } from \"./density\";\nimport { clamp } from \"lodash-es\";\n/**\n * The type ramp configuration\n */\n\nexport var typeRamp = [[60, 72], [46, 56], [34, 44], [28, 36], [20, 28], [16, 24], [14, 20], [12, 16], [10, 16]].reduce(function (accum, val, index) {\n  return Object.assign(accum, _defineProperty({}, \"t\".concat(index + 1), {\n    fontSize: val[0],\n    lineHeight: val[1]\n  }));\n}, {});\n/**\n * Scales a typeramp ID by density\n */\n\nfunction scaleTypeRampId(key) {\n  return function (designSystem) {\n    var typeConfigNumber = parseInt(key.replace(\"t\", \"\"), 10);\n    var densityOffset = densityCategorySwitch(-1, 0, 1)(designSystem);\n    var size = clamp(typeConfigNumber - densityOffset, 1, 9);\n    return sanitizeTypeRampId(\"t\".concat(size.toString()));\n  };\n}\n/*\n * Ensures that a TypeRamp key is in the TypeRamp\n */\n\n\nfunction sanitizeTypeRampId(key) {\n  return typeRamp.hasOwnProperty(key) ? key : \"t7\";\n}\n/**\n * Retrieves the font-size from a TypeRamp ID\n */\n\n\nexport function getFontSize(key) {\n  return typeRamp[sanitizeTypeRampId(key)].fontSize;\n}\n/**\n * Retrieves the line-height from a TypeRamp ID\n */\n\nexport function getLineHeight(key) {\n  return typeRamp[sanitizeTypeRampId(key)].lineHeight;\n}\n/**\n * Retrieves the formatted font-size from a TypeRamp ID\n */\n\nexport function applyFontSize(key) {\n  return toPx(getFontSize(key));\n}\n/**\n * Retrieves the formatted line-height from a TypeRamp ID\n */\n\nexport function applyLineHeight(key) {\n  return toPx(getLineHeight(key));\n}\n/**\n * Retrieves the font-size from a TypeRamp ID, scaled with the design-system density\n */\n\nexport function getScaledFontSize(key) {\n  return function (designSystem) {\n    return getFontSize(scaleTypeRampId(key)(designSystem));\n  };\n}\n/**\n * Retrieves the line-height from a TypeRamp ID, scaled with the design-system density\n */\n\nexport function getScaledLineHeight(key) {\n  return function (designSystem) {\n    return getLineHeight(scaleTypeRampId(key)(designSystem));\n  };\n}\n/**\n * Retrieves the formatted font-size from a TypeRamp ID, scaled with the design-system density\n */\n\nexport function applyScaledFontSize(key) {\n  return function (designSystem) {\n    return applyFontSize(scaleTypeRampId(key)(designSystem));\n  };\n}\n/**\n * Retrieves the formatted line-height from a TypeRamp ID, scaled with the design-system density\n */\n\nexport function applyScaledLineHeight(key) {\n  return function (designSystem) {\n    return applyLineHeight(scaleTypeRampId(key)(designSystem));\n  };\n}\n\nfunction applyTypeRampFactory(fontSizeGetter, lineHeightGetter) {\n  return function (key) {\n    return {\n      \"font-size\": fontSizeGetter(key),\n      \"line-height\": lineHeightGetter(key)\n    };\n  };\n}\n/**\n * Applies font size and line-height properties from the typeramp\n */\n\n\nexport var applyTypeRamp = applyTypeRampFactory(applyFontSize, applyLineHeight);\n/**\n * Applies font size and line-height from the type ramp, scaled with design system density\n */\n\nexport var applyScaledTypeRamp = applyTypeRampFactory(applyScaledFontSize, applyScaledLineHeight);\n/**\n * Takes a param of type ramp key (string) and returns a type ramp configuration\n * @deprecated - please use applyTypeRamp\n */\n\nexport var applyTypeRampConfig = applyTypeRamp;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-styles-msft/dist/utilities/typography.js"],"names":["toPx","densityCategorySwitch","clamp","typeRamp","reduce","accum","val","index","Object","assign","fontSize","lineHeight","scaleTypeRampId","key","designSystem","typeConfigNumber","parseInt","replace","densityOffset","size","sanitizeTypeRampId","concat","toString","hasOwnProperty","getFontSize","getLineHeight","applyFontSize","applyLineHeight","getScaledFontSize","getScaledLineHeight","applyScaledFontSize","applyScaledLineHeight","applyTypeRampFactory","fontSizeGetter","lineHeightGetter","applyTypeRamp","applyScaledTypeRamp","applyTypeRampConfig"],"mappings":"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","sourcesContent":["import { toPx } from \"@microsoft/fast-jss-utilities\";\nimport { densityCategorySwitch } from \"./density\";\nimport { clamp } from \"lodash-es\";\n/**\n * The type ramp configuration\n */\nexport const typeRamp = [\n    [60, 72],\n    [46, 56],\n    [34, 44],\n    [28, 36],\n    [20, 28],\n    [16, 24],\n    [14, 20],\n    [12, 16],\n    [10, 16],\n].reduce((accum, val, index) => Object.assign(accum, {\n    [`t${index + 1}`]: { fontSize: val[0], lineHeight: val[1] },\n}), {});\n/**\n * Scales a typeramp ID by density\n */\nfunction scaleTypeRampId(key) {\n    return (designSystem) => {\n        const typeConfigNumber = parseInt(key.replace(\"t\", \"\"), 10);\n        const densityOffset = densityCategorySwitch(-1, 0, 1)(designSystem);\n        const size = clamp(typeConfigNumber - densityOffset, 1, 9);\n        return sanitizeTypeRampId(\"t\".concat(size.toString()));\n    };\n}\n/*\n * Ensures that a TypeRamp key is in the TypeRamp\n */\nfunction sanitizeTypeRampId(key) {\n    return typeRamp.hasOwnProperty(key) ? key : \"t7\";\n}\n/**\n * Retrieves the font-size from a TypeRamp ID\n */\nexport function getFontSize(key) {\n    return typeRamp[sanitizeTypeRampId(key)].fontSize;\n}\n/**\n * Retrieves the line-height from a TypeRamp ID\n */\nexport function getLineHeight(key) {\n    return typeRamp[sanitizeTypeRampId(key)].lineHeight;\n}\n/**\n * Retrieves the formatted font-size from a TypeRamp ID\n */\nexport function applyFontSize(key) {\n    return toPx(getFontSize(key));\n}\n/**\n * Retrieves the formatted line-height from a TypeRamp ID\n */\nexport function applyLineHeight(key) {\n    return toPx(getLineHeight(key));\n}\n/**\n * Retrieves the font-size from a TypeRamp ID, scaled with the design-system density\n */\nexport function getScaledFontSize(key) {\n    return (designSystem) => {\n        return getFontSize(scaleTypeRampId(key)(designSystem));\n    };\n}\n/**\n * Retrieves the line-height from a TypeRamp ID, scaled with the design-system density\n */\nexport function getScaledLineHeight(key) {\n    return (designSystem) => {\n        return getLineHeight(scaleTypeRampId(key)(designSystem));\n    };\n}\n/**\n * Retrieves the formatted font-size from a TypeRamp ID, scaled with the design-system density\n */\nexport function applyScaledFontSize(key) {\n    return (designSystem) => {\n        return applyFontSize(scaleTypeRampId(key)(designSystem));\n    };\n}\n/**\n * Retrieves the formatted line-height from a TypeRamp ID, scaled with the design-system density\n */\nexport function applyScaledLineHeight(key) {\n    return (designSystem) => applyLineHeight(scaleTypeRampId(key)(designSystem));\n}\nfunction applyTypeRampFactory(fontSizeGetter, lineHeightGetter) {\n    return (key) => ({\n        \"font-size\": fontSizeGetter(key),\n        \"line-height\": lineHeightGetter(key),\n    });\n}\n/**\n * Applies font size and line-height properties from the typeramp\n */\nexport const applyTypeRamp = applyTypeRampFactory(applyFontSize, applyLineHeight);\n/**\n * Applies font size and line-height from the type ramp, scaled with design system density\n */\nexport const applyScaledTypeRamp = applyTypeRampFactory(applyScaledFontSize, applyScaledLineHeight);\n/**\n * Takes a param of type ramp key (string) and returns a type ramp configuration\n * @deprecated - please use applyTypeRamp\n */\nexport const applyTypeRampConfig = applyTypeRamp;\n"]},"metadata":{},"sourceType":"module"}