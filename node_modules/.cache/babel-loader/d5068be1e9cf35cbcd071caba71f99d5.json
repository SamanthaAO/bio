{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { Direction } from \"./localization\";\n/**\n * Standardize left scroll conversion when direction is rtl\n * inspired by\n * https://github.com/alitaheri/normalize-scroll-left\n */\n\nexport var RtlScrollConverter =\n/*#__PURE__*/\nfunction () {\n  function RtlScrollConverter() {\n    _classCallCheck(this, RtlScrollConverter);\n  }\n\n  _createClass(RtlScrollConverter, null, [{\n    key: \"getScrollLeft\",\n\n    /**\n     *  Gets the scrollLeft value of the provided element\n     */\n    value: function getScrollLeft(scrolledElement, direction) {\n      if (direction === Direction.rtl) {\n        return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n      }\n\n      return scrolledElement.scrollLeft;\n    }\n    /**\n     * Sets the scrollLeft value of the provided element\n     */\n\n  }, {\n    key: \"setScrollLeft\",\n    value: function setScrollLeft(scrolledElement, scrollValue, direction) {\n      if (direction === Direction.rtl) {\n        RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, scrollValue);\n        return;\n      }\n\n      scrolledElement.scrollLeft = scrollValue;\n    }\n    /**\n     * The initial rtl scroll converter getter function, it calls the browser test to set the correct converter\n     * functions and then invokes the getter\n     */\n\n  }, {\n    key: \"initialGetRtlScrollConverter\",\n    value: function initialGetRtlScrollConverter(scrolledElement) {\n      RtlScrollConverter.initializeRtlScrollConverters();\n      return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n    }\n    /**\n     * The \"direct\" rtl get scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n\n  }, {\n    key: \"directGetRtlScrollConverter\",\n    value: function directGetRtlScrollConverter(scrolledElement) {\n      return scrolledElement.scrollLeft;\n    }\n    /**\n     * The \"inverted\" get scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n\n  }, {\n    key: \"invertedGetRtlScrollConverter\",\n    value: function invertedGetRtlScrollConverter(scrolledElement) {\n      return -Math.abs(scrolledElement.scrollLeft);\n    }\n    /**\n     * The \"reverse\" get scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n\n  }, {\n    key: \"reverseGetRtlScrollConverter\",\n    value: function reverseGetRtlScrollConverter(scrolledElement) {\n      return scrolledElement.scrollLeft - (scrolledElement.scrollWidth - scrolledElement.clientWidth);\n    }\n    /**\n     * The initial rtl scroll converter setter function, it calls the browser test to set the correct converter\n     * functions and then invokes the setter\n     */\n\n  }, {\n    key: \"initialSetRtlScrollConverter\",\n    value: function initialSetRtlScrollConverter(scrolledElement, newScrollValue) {\n      RtlScrollConverter.initializeRtlScrollConverters();\n      RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, newScrollValue);\n    }\n    /**\n     * The \"direct\" rtl set scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n\n  }, {\n    key: \"directSetRtlScrollConverter\",\n    value: function directSetRtlScrollConverter(scrolledElement, newScrollValue) {\n      scrolledElement.scrollLeft = newScrollValue;\n    }\n    /**\n     * The \"inverted\" set scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n\n  }, {\n    key: \"invertedSetRtlScrollConverter\",\n    value: function invertedSetRtlScrollConverter(scrolledElement, newScrollValue) {\n      scrolledElement.scrollLeft = Math.abs(newScrollValue);\n    }\n    /**\n     * The \"reverse\" set scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n\n  }, {\n    key: \"reverseSetRtlScrollConverter\",\n    value: function reverseSetRtlScrollConverter(scrolledElement, newScrollValue) {\n      var maxScroll = scrolledElement.scrollWidth - scrolledElement.clientWidth;\n      scrolledElement.scrollLeft = maxScroll + newScrollValue;\n    }\n    /**\n     * detects the appropriate rtl scroll converter functions and assigns them\n     * should only run once\n     */\n\n  }, {\n    key: \"initializeRtlScrollConverters\",\n    value: function initializeRtlScrollConverters() {\n      if (!canUseDOM()) {\n        RtlScrollConverter.applyDirectScrollConverters();\n        return;\n      }\n\n      var testElement = RtlScrollConverter.getTestElement();\n      document.body.appendChild(testElement);\n      RtlScrollConverter.checkForScrollType(testElement);\n      document.body.removeChild(testElement);\n    }\n    /**\n     * checks the provided test element to determine scroll type\n     * and apply appropriate converters\n     */\n\n  }, {\n    key: \"checkForScrollType\",\n    value: function checkForScrollType(testElement) {\n      if (RtlScrollConverter.isReverse(testElement)) {\n        RtlScrollConverter.applyReverseScrollConverters();\n      } else {\n        if (RtlScrollConverter.isDirect(testElement)) {\n          RtlScrollConverter.applyDirectScrollConverters();\n        } else {\n          RtlScrollConverter.applyInvertedScrollConverters();\n        }\n      }\n    }\n    /**\n     * checks test element initial state for rtl \"reverse\" mode\n     */\n\n  }, {\n    key: \"isReverse\",\n    value: function isReverse(testElement) {\n      return testElement.scrollLeft > 0;\n    }\n    /**\n     * checks test element for rtl \"direct\" mode\n     */\n\n  }, {\n    key: \"isDirect\",\n    value: function isDirect(testElement) {\n      testElement.scrollLeft = -1;\n      return testElement.scrollLeft === -1;\n    }\n    /**\n     * apply direct scroll conververters\n     */\n\n  }, {\n    key: \"applyDirectScrollConverters\",\n    value: function applyDirectScrollConverters() {\n      RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.directSetRtlScrollConverter;\n      RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.directGetRtlScrollConverter;\n    }\n    /**\n     * apply inverted scroll conververters\n     */\n\n  }, {\n    key: \"applyInvertedScrollConverters\",\n    value: function applyInvertedScrollConverters() {\n      RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.invertedSetRtlScrollConverter;\n      RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.invertedGetRtlScrollConverter;\n    }\n    /**\n     * apply reverse scroll conververters\n     */\n\n  }, {\n    key: \"applyReverseScrollConverters\",\n    value: function applyReverseScrollConverters() {\n      RtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.reverseSetRtlScrollConverter;\n      RtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.reverseGetRtlScrollConverter;\n    }\n    /**\n     * generate a test element for rtl testing\n     */\n\n  }, {\n    key: \"getTestElement\",\n    value: function getTestElement() {\n      var testElement = document.createElement(\"div\");\n      testElement.appendChild(document.createTextNode(\"ABCD\"));\n      testElement.dir = \"rtl\";\n      testElement.style.fontSize = \"14px\";\n      testElement.style.width = \"4px\";\n      testElement.style.height = \"1px\";\n      testElement.style.position = \"absolute\";\n      testElement.style.top = \"-1000px\";\n      testElement.style.overflow = \"scroll\";\n      return testElement;\n    }\n  }]);\n\n  return RtlScrollConverter;\n}();\n/**\n * This variable holds the appropriate converter function to get the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct converter based on browser and then invokes it\n */\n\nRtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.initialGetRtlScrollConverter;\n/**\n * This variable holds the appropriate converter function to set the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct function based on browser and then invokes it\n */\n\nRtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.initialSetRtlScrollConverter;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-web-utilities/dist/rtl-scroll-converter.js"],"names":["canUseDOM","Direction","RtlScrollConverter","scrolledElement","direction","rtl","getRtlScrollLeftConverter","scrollLeft","scrollValue","setRtlScrollLeftConverter","initializeRtlScrollConverters","Math","abs","scrollWidth","clientWidth","newScrollValue","maxScroll","applyDirectScrollConverters","testElement","getTestElement","document","body","appendChild","checkForScrollType","removeChild","isReverse","applyReverseScrollConverters","isDirect","applyInvertedScrollConverters","directSetRtlScrollConverter","directGetRtlScrollConverter","invertedSetRtlScrollConverter","invertedGetRtlScrollConverter","reverseSetRtlScrollConverter","reverseGetRtlScrollConverter","createElement","createTextNode","dir","style","fontSize","width","height","position","top","overflow","initialGetRtlScrollConverter","initialSetRtlScrollConverter"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA;;;;;;AAKA,WAAaC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACI;;;AADJ,kCAIyBC,eAJzB,EAI0CC,SAJ1C,EAIqD;AAC7C,UAAIA,SAAS,KAAKH,SAAS,CAACI,GAA5B,EAAiC;AAC7B,eAAOH,kBAAkB,CAACI,yBAAnB,CAA6CH,eAA7C,CAAP;AACH;;AACD,aAAOA,eAAe,CAACI,UAAvB;AACH;AACD;;;;AAVJ;AAAA;AAAA,kCAayBJ,eAbzB,EAa0CK,WAb1C,EAauDJ,SAbvD,EAakE;AAC1D,UAAIA,SAAS,KAAKH,SAAS,CAACI,GAA5B,EAAiC;AAC7BH,QAAAA,kBAAkB,CAACO,yBAAnB,CAA6CN,eAA7C,EAA8DK,WAA9D;AACA;AACH;;AACDL,MAAAA,eAAe,CAACI,UAAhB,GAA6BC,WAA7B;AACH;AACD;;;;;AApBJ;AAAA;AAAA,iDAwBwCL,eAxBxC,EAwByD;AACjDD,MAAAA,kBAAkB,CAACQ,6BAAnB;AACA,aAAOR,kBAAkB,CAACI,yBAAnB,CAA6CH,eAA7C,CAAP;AACH;AACD;;;;;;AA5BJ;AAAA;AAAA,gDAiCuCA,eAjCvC,EAiCwD;AAChD,aAAOA,eAAe,CAACI,UAAvB;AACH;AACD;;;;;;AApCJ;AAAA;AAAA,kDAyCyCJ,eAzCzC,EAyC0D;AAClD,aAAO,CAACQ,IAAI,CAACC,GAAL,CAAST,eAAe,CAACI,UAAzB,CAAR;AACH;AACD;;;;;AA5CJ;AAAA;AAAA,iDAgDwCJ,eAhDxC,EAgDyD;AACjD,aAAQA,eAAe,CAACI,UAAhB,IACHJ,eAAe,CAACU,WAAhB,GAA8BV,eAAe,CAACW,WAD3C,CAAR;AAEH;AACD;;;;;AApDJ;AAAA;AAAA,iDAwDwCX,eAxDxC,EAwDyDY,cAxDzD,EAwDyE;AACjEb,MAAAA,kBAAkB,CAACQ,6BAAnB;AACAR,MAAAA,kBAAkB,CAACO,yBAAnB,CAA6CN,eAA7C,EAA8DY,cAA9D;AACH;AACD;;;;;;AA5DJ;AAAA;AAAA,gDAiEuCZ,eAjEvC,EAiEwDY,cAjExD,EAiEwE;AAChEZ,MAAAA,eAAe,CAACI,UAAhB,GAA6BQ,cAA7B;AACH;AACD;;;;;;AApEJ;AAAA;AAAA,kDAyEyCZ,eAzEzC,EAyE0DY,cAzE1D,EAyE0E;AAClEZ,MAAAA,eAAe,CAACI,UAAhB,GAA6BI,IAAI,CAACC,GAAL,CAASG,cAAT,CAA7B;AACH;AACD;;;;;AA5EJ;AAAA;AAAA,iDAgFwCZ,eAhFxC,EAgFyDY,cAhFzD,EAgFyE;AACjE,UAAMC,SAAS,GAAGb,eAAe,CAACU,WAAhB,GAA8BV,eAAe,CAACW,WAAhE;AACAX,MAAAA,eAAe,CAACI,UAAhB,GAA6BS,SAAS,GAAGD,cAAzC;AACH;AACD;;;;;AApFJ;AAAA;AAAA,oDAwF2C;AACnC,UAAI,CAACf,SAAS,EAAd,EAAkB;AACdE,QAAAA,kBAAkB,CAACe,2BAAnB;AACA;AACH;;AACD,UAAMC,WAAW,GAAGhB,kBAAkB,CAACiB,cAAnB,EAApB;AACAC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BJ,WAA1B;AACAhB,MAAAA,kBAAkB,CAACqB,kBAAnB,CAAsCL,WAAtC;AACAE,MAAAA,QAAQ,CAACC,IAAT,CAAcG,WAAd,CAA0BN,WAA1B;AACH;AACD;;;;;AAlGJ;AAAA;AAAA,uCAsG8BA,WAtG9B,EAsG2C;AACnC,UAAIhB,kBAAkB,CAACuB,SAAnB,CAA6BP,WAA7B,CAAJ,EAA+C;AAC3ChB,QAAAA,kBAAkB,CAACwB,4BAAnB;AACH,OAFD,MAGK;AACD,YAAIxB,kBAAkB,CAACyB,QAAnB,CAA4BT,WAA5B,CAAJ,EAA8C;AAC1ChB,UAAAA,kBAAkB,CAACe,2BAAnB;AACH,SAFD,MAGK;AACDf,UAAAA,kBAAkB,CAAC0B,6BAAnB;AACH;AACJ;AACJ;AACD;;;;AAnHJ;AAAA;AAAA,8BAsHqBV,WAtHrB,EAsHkC;AAC1B,aAAOA,WAAW,CAACX,UAAZ,GAAyB,CAAhC;AACH;AACD;;;;AAzHJ;AAAA;AAAA,6BA4HoBW,WA5HpB,EA4HiC;AACzBA,MAAAA,WAAW,CAACX,UAAZ,GAAyB,CAAC,CAA1B;AACA,aAAOW,WAAW,CAACX,UAAZ,KAA2B,CAAC,CAAnC;AACH;AACD;;;;AAhIJ;AAAA;AAAA,kDAmIyC;AACjCL,MAAAA,kBAAkB,CAACO,yBAAnB,GACIP,kBAAkB,CAAC2B,2BADvB;AAEA3B,MAAAA,kBAAkB,CAACI,yBAAnB,GACIJ,kBAAkB,CAAC4B,2BADvB;AAEH;AACD;;;;AAzIJ;AAAA;AAAA,oDA4I2C;AACnC5B,MAAAA,kBAAkB,CAACO,yBAAnB,GACIP,kBAAkB,CAAC6B,6BADvB;AAEA7B,MAAAA,kBAAkB,CAACI,yBAAnB,GACIJ,kBAAkB,CAAC8B,6BADvB;AAEH;AACD;;;;AAlJJ;AAAA;AAAA,mDAqJ0C;AAClC9B,MAAAA,kBAAkB,CAACO,yBAAnB,GACIP,kBAAkB,CAAC+B,4BADvB;AAEA/B,MAAAA,kBAAkB,CAACI,yBAAnB,GACIJ,kBAAkB,CAACgC,4BADvB;AAEH;AACD;;;;AA3JJ;AAAA;AAAA,qCA8J4B;AACpB,UAAMhB,WAAW,GAAGE,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAApB;AACAjB,MAAAA,WAAW,CAACI,WAAZ,CAAwBF,QAAQ,CAACgB,cAAT,CAAwB,MAAxB,CAAxB;AACAlB,MAAAA,WAAW,CAACmB,GAAZ,GAAkB,KAAlB;AACAnB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBC,QAAlB,GAA6B,MAA7B;AACArB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBE,KAAlB,GAA0B,KAA1B;AACAtB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBG,MAAlB,GAA2B,KAA3B;AACAvB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBI,QAAlB,GAA6B,UAA7B;AACAxB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBK,GAAlB,GAAwB,SAAxB;AACAzB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBM,QAAlB,GAA6B,QAA7B;AACA,aAAO1B,WAAP;AACH;AAzKL;;AAAA;AAAA;AA2KA;;;;;;AAKAhB,kBAAkB,CAACI,yBAAnB,GAA+CJ,kBAAkB,CAAC2C,4BAAlE;AACA;;;;;;AAKA3C,kBAAkB,CAACO,yBAAnB,GAA+CP,kBAAkB,CAAC4C,4BAAlE","sourcesContent":["import { canUseDOM } from \"exenv-es6\";\nimport { Direction } from \"./localization\";\n/**\n * Standardize left scroll conversion when direction is rtl\n * inspired by\n * https://github.com/alitaheri/normalize-scroll-left\n */\nexport class RtlScrollConverter {\n    /**\n     *  Gets the scrollLeft value of the provided element\n     */\n    static getScrollLeft(scrolledElement, direction) {\n        if (direction === Direction.rtl) {\n            return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n        }\n        return scrolledElement.scrollLeft;\n    }\n    /**\n     * Sets the scrollLeft value of the provided element\n     */\n    static setScrollLeft(scrolledElement, scrollValue, direction) {\n        if (direction === Direction.rtl) {\n            RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, scrollValue);\n            return;\n        }\n        scrolledElement.scrollLeft = scrollValue;\n    }\n    /**\n     * The initial rtl scroll converter getter function, it calls the browser test to set the correct converter\n     * functions and then invokes the getter\n     */\n    static initialGetRtlScrollConverter(scrolledElement) {\n        RtlScrollConverter.initializeRtlScrollConverters();\n        return RtlScrollConverter.getRtlScrollLeftConverter(scrolledElement);\n    }\n    /**\n     * The \"direct\" rtl get scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n    static directGetRtlScrollConverter(scrolledElement) {\n        return scrolledElement.scrollLeft;\n    }\n    /**\n     * The \"inverted\" get scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n    static invertedGetRtlScrollConverter(scrolledElement) {\n        return -Math.abs(scrolledElement.scrollLeft);\n    }\n    /**\n     * The \"reverse\" get scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n    static reverseGetRtlScrollConverter(scrolledElement) {\n        return (scrolledElement.scrollLeft -\n            (scrolledElement.scrollWidth - scrolledElement.clientWidth));\n    }\n    /**\n     * The initial rtl scroll converter setter function, it calls the browser test to set the correct converter\n     * functions and then invokes the setter\n     */\n    static initialSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        RtlScrollConverter.initializeRtlScrollConverters();\n        RtlScrollConverter.setRtlScrollLeftConverter(scrolledElement, newScrollValue);\n    }\n    /**\n     * The \"direct\" rtl set scroll converter does not need to tamper with the scrollLeft\n     * values as the browser is already doing the right thing.  Content start = 0 and\n     * scrolling left goes negative.\n     */\n    static directSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        scrolledElement.scrollLeft = newScrollValue;\n    }\n    /**\n     * The \"inverted\" set scroll converter is used when the browser reports scroll left\n     * as a positive maximum scroll value at content start and then goes to zero as content\n     * is scrolled left\n     */\n    static invertedSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        scrolledElement.scrollLeft = Math.abs(newScrollValue);\n    }\n    /**\n     * The \"reverse\" set scroll converter is used when the browser reports scroll left\n     * as 0 at content start and then goes positive as content is scrolled left\n     */\n    static reverseSetRtlScrollConverter(scrolledElement, newScrollValue) {\n        const maxScroll = scrolledElement.scrollWidth - scrolledElement.clientWidth;\n        scrolledElement.scrollLeft = maxScroll + newScrollValue;\n    }\n    /**\n     * detects the appropriate rtl scroll converter functions and assigns them\n     * should only run once\n     */\n    static initializeRtlScrollConverters() {\n        if (!canUseDOM()) {\n            RtlScrollConverter.applyDirectScrollConverters();\n            return;\n        }\n        const testElement = RtlScrollConverter.getTestElement();\n        document.body.appendChild(testElement);\n        RtlScrollConverter.checkForScrollType(testElement);\n        document.body.removeChild(testElement);\n    }\n    /**\n     * checks the provided test element to determine scroll type\n     * and apply appropriate converters\n     */\n    static checkForScrollType(testElement) {\n        if (RtlScrollConverter.isReverse(testElement)) {\n            RtlScrollConverter.applyReverseScrollConverters();\n        }\n        else {\n            if (RtlScrollConverter.isDirect(testElement)) {\n                RtlScrollConverter.applyDirectScrollConverters();\n            }\n            else {\n                RtlScrollConverter.applyInvertedScrollConverters();\n            }\n        }\n    }\n    /**\n     * checks test element initial state for rtl \"reverse\" mode\n     */\n    static isReverse(testElement) {\n        return testElement.scrollLeft > 0;\n    }\n    /**\n     * checks test element for rtl \"direct\" mode\n     */\n    static isDirect(testElement) {\n        testElement.scrollLeft = -1;\n        return testElement.scrollLeft === -1;\n    }\n    /**\n     * apply direct scroll conververters\n     */\n    static applyDirectScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.directSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.directGetRtlScrollConverter;\n    }\n    /**\n     * apply inverted scroll conververters\n     */\n    static applyInvertedScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.invertedSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.invertedGetRtlScrollConverter;\n    }\n    /**\n     * apply reverse scroll conververters\n     */\n    static applyReverseScrollConverters() {\n        RtlScrollConverter.setRtlScrollLeftConverter =\n            RtlScrollConverter.reverseSetRtlScrollConverter;\n        RtlScrollConverter.getRtlScrollLeftConverter =\n            RtlScrollConverter.reverseGetRtlScrollConverter;\n    }\n    /**\n     * generate a test element for rtl testing\n     */\n    static getTestElement() {\n        const testElement = document.createElement(\"div\");\n        testElement.appendChild(document.createTextNode(\"ABCD\"));\n        testElement.dir = \"rtl\";\n        testElement.style.fontSize = \"14px\";\n        testElement.style.width = \"4px\";\n        testElement.style.height = \"1px\";\n        testElement.style.position = \"absolute\";\n        testElement.style.top = \"-1000px\";\n        testElement.style.overflow = \"scroll\";\n        return testElement;\n    }\n}\n/**\n * This variable holds the appropriate converter function to get the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct converter based on browser and then invokes it\n */\nRtlScrollConverter.getRtlScrollLeftConverter = RtlScrollConverter.initialGetRtlScrollConverter;\n/**\n * This variable holds the appropriate converter function to set the scrollLeft value\n * The functions initially assigned triggers a browser check when called which sets\n * the correct function based on browser and then invokes it\n */\nRtlScrollConverter.setRtlScrollLeftConverter = RtlScrollConverter.initialSetRtlScrollConverter;\n"]},"metadata":{},"sourceType":"module"}