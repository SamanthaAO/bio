{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowUp, keyCodeEnter, keyCodeEscape, keyCodeTab } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { Listbox, TextField, TextFieldType } from \"../index\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { AutoSuggestContext } from \"./auto-suggest-context\";\nimport { isNil } from \"lodash-es\";\n\nvar AutoSuggest =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(AutoSuggest, _Foundation);\n\n  /**\n   * constructor\n   */\n  function AutoSuggest(props) {\n    var _this;\n\n    _classCallCheck(this, AutoSuggest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoSuggest).call(this, props));\n    /**\n     * Handled props instantiation\n     */\n\n    _this.handledProps = {\n      isMenuOpen: void 0,\n      disabled: void 0,\n      label: void 0,\n      inputRegion: void 0,\n      managedClasses: void 0,\n      initialValue: void 0,\n      value: void 0,\n      onValueChange: void 0,\n      onInvoked: void 0,\n      placeholder: void 0,\n      listboxId: void 0,\n      filterSuggestions: void 0\n    };\n    _this.rootElement = React.createRef();\n    _this.shouldFocusMenuOnNextRender = false;\n    /**\n     * The default function that renders an unstyled content display\n     */\n\n    _this.defaultInputRegionRenderFunction = function (props, state, onChange, onClick, onKeyDown) {\n      var listboxId = state.isMenuOpen ? props.listboxId : null;\n      var activedescendantId = state.focusedItem !== null ? state.focusedItem.id : null;\n      return React.createElement(TextField, {\n        disabled: props.disabled,\n        onChange: onChange,\n        onClick: onClick,\n        onKeyDown: onKeyDown,\n        value: state.value,\n        type: TextFieldType.text,\n        role: \"combobox\",\n        \"aria-label\": props.label || null,\n        \"aria-autocomplete\": \"both\",\n        \"aria-activedescendant\": activedescendantId || null,\n        \"aria-owns\": listboxId || null,\n        \"aria-controls\": listboxId || null\n      });\n    };\n    /**\n     * Updates selection state and associated values\n     */\n\n\n    _this.updateFocusedItem = function (newSelection) {\n      if (newSelection.length === 0) {\n        _this.setState({\n          focusedItem: null\n        });\n      } else {\n        _this.setState({\n          focusedItem: newSelection[0]\n        });\n\n        _this.updateValue(newSelection[0].value, true);\n      }\n    };\n    /**\n     * Handles clicks\n     */\n\n\n    _this.handleInputRegionClick = function (e) {\n      if (_this.props.disabled || e.defaultPrevented) {\n        return;\n      }\n\n      _this.toggleMenu(true);\n    };\n    /**\n     * Handles item invoked\n     */\n\n\n    _this.handleItemInvoked = function (item) {\n      _this.invoke(item.value, item);\n\n      _this.storedValueString = _this.state.value;\n\n      _this.toggleMenu(false);\n    };\n    /**\n     * Invokes the auto-select component\n     */\n\n\n    _this.invoke = function (value, item) {\n      if (typeof _this.props.onInvoked === \"function\") {\n        _this.props.onInvoked(value, item);\n      }\n    };\n    /**\n     * Handles value changes from input element\n     */\n\n\n    _this.handleChange = function (e) {\n      var newValue = e.target.value;\n      _this.storedValueString = newValue;\n\n      _this.updateValue(newValue, false);\n    };\n    /**\n     * Update the currentValue of the component\n     */\n\n\n    _this.updateValue = function (newValue, isFromSuggestedOption) {\n      if (typeof _this.props.onValueChange === \"function\") {\n        _this.props.onValueChange(newValue, isFromSuggestedOption);\n      }\n\n      if (isNil(_this.props.value) && newValue !== _this.state.value) {\n        _this.toggleMenu(true);\n\n        _this.setState({\n          value: newValue\n        });\n      }\n    };\n    /**\n     * Handles input region key events\n     */\n\n\n    _this.handleInputRegionKeydown = function (e) {\n      if (_this.props.disabled || e.defaultPrevented) {\n        return;\n      }\n\n      switch (e.keyCode) {\n        case keyCodeEnter:\n          _this.invoke(_this.state.value, null);\n\n          break;\n\n        case keyCodeEscape:\n          _this.toggleMenu(false);\n\n          break;\n\n        case keyCodeArrowDown:\n          _this.focusOnMenu(1);\n\n          e.preventDefault();\n          break;\n\n        case keyCodeArrowUp:\n          _this.focusOnMenu(-1);\n\n          e.preventDefault();\n          break;\n\n        case keyCodeTab:\n          // Prevent default case handling for tab\n          break;\n\n        default:\n          if (e.target instanceof HTMLInputElement) {\n            var newValue = e.target.value;\n\n            _this.updateValue(newValue, false);\n\n            _this.focusOnInput();\n\n            break;\n          }\n\n      }\n    };\n    /**\n     * Handles menu key events\n     */\n\n\n    _this.handleMenuKeydown = function (e) {\n      if (_this.props.disabled || e.defaultPrevented) {\n        return;\n      }\n\n      switch (e.keyCode) {\n        case keyCodeEscape:\n          _this.toggleMenu(false);\n\n          break;\n\n        case keyCodeArrowDown:\n          if (_this.checkForMenuEnd(1) === true) {\n            e.preventDefault();\n          }\n\n          break;\n\n        case keyCodeArrowUp:\n          if (_this.checkForMenuEnd(-1) === true) {\n            e.preventDefault();\n          }\n\n          break;\n\n        default:\n          if (_this.isValidInput(e)) {\n            _this.focusOnInput();\n          }\n\n          break;\n      }\n    };\n    /**\n     * test if a key press is a valid input\n     */\n\n\n    _this.isValidInput = function (e) {\n      if (e.keyCode < 8 || e.keyCode > 8 && e.keyCode < 48 || e.keyCode > 90 && e.keyCode < 96 || e.keyCode > 111 && e.keyCode < 186 || e.keyCode > 222) {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * Passes focus to the input element if focus would bump up against the ends of the menu,\n     * return true if result was focusing on input region\n     */\n\n\n    _this.checkForMenuEnd = function (increment) {\n      if (_this.state.focusedItem === null) {\n        return false;\n      }\n\n      var childrenAsArray = React.Children.toArray(_this.renderChildren());\n      var currentItemIndex = Listbox.getItemIndexById(_this.state.focusedItem.id, _this.renderChildren());\n      var startIndex = currentItemIndex + increment;\n\n      if (startIndex > childrenAsArray.length - 1 || startIndex < 0) {\n        _this.setState({\n          value: _this.storedValueString\n        }); // at the end of the list, focus on input\n\n\n        _this.focusOnInput();\n\n        return true;\n      }\n\n      var endIndex = increment > -1 ? childrenAsArray.length - 1 : 0;\n      var nextFocusableItem = Listbox.getFirstValidOptionInRange(startIndex, endIndex, childrenAsArray, increment).props;\n\n      if (nextFocusableItem === null || nextFocusableItem.id === _this.state.focusedItem.id) {\n        _this.setState({\n          value: _this.storedValueString\n        }); // at the end of the list, focus on input\n\n\n        _this.focusOnInput();\n\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * Opens menu and focuses on first or last valid item\n     */\n\n\n    _this.focusOnMenu = function (increment) {\n      _this.storedValueString = _this.state.value;\n      var childrenAsArray = React.Children.toArray(_this.renderChildren());\n\n      if (childrenAsArray.length === 0) {\n        return;\n      }\n\n      var startIndex = increment > -1 ? 0 : childrenAsArray.length - 1;\n      var endIndex = increment > -1 ? childrenAsArray.length - 1 : 0;\n\n      _this.focusFirstItemInRange(startIndex, endIndex, childrenAsArray, increment);\n\n      _this.toggleMenu(true);\n\n      _this.shouldFocusMenuOnNextRender = true;\n    };\n    /**\n     * Gets first child in a range\n     */\n\n\n    _this.focusFirstItemInRange = function (startIndex, endIndex, childrenAsArray, increment) {\n      var validOption = Listbox.getFirstValidOptionInRange(startIndex, endIndex, childrenAsArray, increment);\n\n      if (validOption !== null) {\n        _this.updateFocusedItem([validOption.props]);\n      }\n    };\n    /**\n     * Toggles the menu\n     */\n\n\n    _this.toggleMenu = function (desiredMenuState) {\n      var updatedIsMenuOpen = _this.validateMenuState(desiredMenuState);\n\n      if (updatedIsMenuOpen !== _this.state.isMenuOpen) {\n        _this.setState({\n          isMenuOpen: updatedIsMenuOpen\n        });\n\n        if (_this.state.isMenuOpen && !updatedIsMenuOpen) {\n          _this.setState({\n            value: _this.storedValueString\n          });\n\n          _this.focusOnInput();\n        }\n      }\n    };\n    /**\n     * Focus on the input element\n     */\n\n\n    _this.focusOnInput = function () {\n      if (_this.rootElement.current === null) {\n        return;\n      }\n\n      var inputElements = _this.rootElement.current.getElementsByTagName(\"input\");\n\n      if (inputElements.length > 0) {\n        inputElements[0].focus();\n      }\n\n      _this.updateFocusedItem([]);\n    };\n    /**\n     * Determine menu state by comparing desired state to props\n     */\n\n\n    _this.validateMenuState = function (desiredMenuState) {\n      return typeof _this.props.isMenuOpen === \"boolean\" ? _this.props.isMenuOpen : React.Children.count(_this.renderChildren()) === 0 ? false : desiredMenuState;\n    };\n    /**\n     * Close the menu when when there are clicks outside\n     */\n\n\n    _this.handleWindowClick = function (event) {\n      if (_this.state.isMenuOpen && _this.rootElement.current !== null && !_this.rootElement.current.contains(event.target)) {\n        _this.toggleMenu(false);\n      }\n    };\n\n    var value = _this.props.value === undefined ? _this.props.initialValue : _this.props.value;\n    _this.state = {\n      value: value,\n      focusedItem: null,\n      isMenuOpen: _this.validateMenuState(false)\n    };\n    _this.storedValueString = value;\n    return _this;\n  }\n\n  _createClass(AutoSuggest, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var updatedMenuVisibility = this.validateMenuState(this.state.isMenuOpen);\n\n      if (updatedMenuVisibility !== this.state.isMenuOpen) {\n        this.toggleMenu(updatedMenuVisibility);\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.setState({\n          value: this.props.value\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"click\", this.handleWindowClick);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"click\", this.handleWindowClick);\n    }\n    /**\n     * Renders the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        ref: this.rootElement,\n        className: this.generateClassNames()\n      }), React.createElement(AutoSuggestContext.Provider, {\n        value: {\n          currentValue: this.storedValueString\n        }\n      }, this.renderInputRegion(), this.renderMenu()));\n    }\n    /**\n     * Create class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      var _this$props$managedCl = this.props.managedClasses,\n          autoSuggest = _this$props$managedCl.autoSuggest,\n          autoSuggest__disabled = _this$props$managedCl.autoSuggest__disabled,\n          autoSuggest__menuOpen = _this$props$managedCl.autoSuggest__menuOpen;\n      return _get(_getPrototypeOf(AutoSuggest.prototype), \"generateClassNames\", this).call(this, classNames(autoSuggest, [autoSuggest__disabled, this.props.disabled], [autoSuggest__menuOpen, this.state.isMenuOpen]));\n    }\n    /**\n     * Determine which function to use to render content display (ie. the part of the control that shows when the menu isn't open)\n     * and invokes it\n     */\n\n  }, {\n    key: \"renderInputRegion\",\n    value: function renderInputRegion() {\n      if (typeof this.props.inputRegion === \"function\") {\n        return this.props.inputRegion(this.props, this.state, this.handleChange, this.handleInputRegionClick, this.handleInputRegionKeydown);\n      } else {\n        return this.defaultInputRegionRenderFunction(this.props, this.state, this.handleChange, this.handleInputRegionClick, this.handleInputRegionKeydown);\n      }\n    }\n    /**\n     * Determine which function to use to render the menu and invokes it\n     */\n\n  }, {\n    key: \"renderMenu\",\n    value: function renderMenu() {\n      var shouldFocusOnMenu = this.shouldFocusMenuOnNextRender;\n      var _this$props$managedCl2 = this.props.managedClasses,\n          autoSuggest_menu = _this$props$managedCl2.autoSuggest_menu,\n          autoSuggest__disabled = _this$props$managedCl2.autoSuggest__disabled;\n      this.shouldFocusMenuOnNextRender = false;\n\n      if (!this.state.isMenuOpen) {\n        return;\n      }\n\n      var focusedItem = this.state.focusedItem !== null ? [this.state.focusedItem] : [];\n      return React.createElement(Listbox, {\n        id: this.props.listboxId,\n        typeAheadEnabled: false,\n        disabled: this.props.disabled,\n        focusItemOnMount: shouldFocusOnMenu,\n        defaultSelection: focusedItem,\n        onSelectedItemsChanged: this.updateFocusedItem,\n        onItemInvoked: this.handleItemInvoked,\n        onKeyDown: this.handleMenuKeydown,\n        managedClasses: {\n          listbox: autoSuggest_menu,\n          listbox__disabled: autoSuggest__disabled\n        }\n      }, this.renderChildren());\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var _this2 = this;\n\n      if (this.props.filterSuggestions) {\n        var children = this.props.children;\n        return React.Children.map(children, function (node) {\n          if (!isNil(node.props)) {\n            if (node.props[AutoSuggest.valuePropertyKey] === undefined) {\n              return node;\n            }\n\n            return _this2.isMatch(node.props) ? node : null;\n          }\n        });\n      } else {\n        return this.props.children;\n      }\n    }\n    /**\n     * Determine if a single node is a match\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(node) {\n      if (!isNil(this.storedValueString)) {\n        return node.value.toLowerCase().includes(this.storedValueString.toLowerCase());\n      }\n    }\n  }]);\n\n  return AutoSuggest;\n}(Foundation);\n\nAutoSuggest.displayName = \"\".concat(DisplayNamePrefix, \"AutoSuggest\");\nAutoSuggest.defaultProps = {\n  initialValue: \"\",\n  disabled: false,\n  placeholder: \"\",\n  managedClasses: {},\n  filterSuggestions: false\n};\nAutoSuggest.valuePropertyKey = \"value\";\nexport default AutoSuggest;\nexport { AutoSuggestContext };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/auto-suggest/auto-suggest.js"],"names":["Foundation","classNames","keyCodeArrowDown","keyCodeArrowUp","keyCodeEnter","keyCodeEscape","keyCodeTab","React","Listbox","TextField","TextFieldType","DisplayNamePrefix","AutoSuggestContext","isNil","AutoSuggest","props","handledProps","isMenuOpen","disabled","label","inputRegion","managedClasses","initialValue","value","onValueChange","onInvoked","placeholder","listboxId","filterSuggestions","rootElement","createRef","shouldFocusMenuOnNextRender","defaultInputRegionRenderFunction","state","onChange","onClick","onKeyDown","activedescendantId","focusedItem","id","createElement","type","text","role","updateFocusedItem","newSelection","length","setState","updateValue","handleInputRegionClick","e","defaultPrevented","toggleMenu","handleItemInvoked","item","invoke","storedValueString","handleChange","newValue","target","isFromSuggestedOption","handleInputRegionKeydown","keyCode","focusOnMenu","preventDefault","HTMLInputElement","focusOnInput","handleMenuKeydown","checkForMenuEnd","isValidInput","increment","childrenAsArray","Children","toArray","renderChildren","currentItemIndex","getItemIndexById","startIndex","endIndex","nextFocusableItem","getFirstValidOptionInRange","focusFirstItemInRange","validOption","desiredMenuState","updatedIsMenuOpen","validateMenuState","current","inputElements","getElementsByTagName","focus","count","handleWindowClick","event","contains","undefined","prevProps","updatedMenuVisibility","window","addEventListener","removeEventListener","Object","assign","unhandledProps","ref","className","generateClassNames","Provider","currentValue","renderInputRegion","renderMenu","autoSuggest","autoSuggest__disabled","autoSuggest__menuOpen","shouldFocusOnMenu","autoSuggest_menu","typeAheadEnabled","focusItemOnMount","defaultSelection","onSelectedItemsChanged","onItemInvoked","listbox","listbox__disabled","children","map","node","valuePropertyKey","isMatch","toLowerCase","includes","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowUp, keyCodeEnter, keyCodeEscape, keyCodeTab, } from \"@microsoft/fast-web-utilities\";\nimport React from \"react\";\nimport { Listbox, TextField, TextFieldType } from \"../index\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport { AutoSuggestContext } from \"./auto-suggest-context\";\nimport { isNil } from \"lodash-es\";\nclass AutoSuggest extends Foundation {\n    /**\n     * constructor\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Handled props instantiation\n         */\n        this.handledProps = {\n            isMenuOpen: void 0,\n            disabled: void 0,\n            label: void 0,\n            inputRegion: void 0,\n            managedClasses: void 0,\n            initialValue: void 0,\n            value: void 0,\n            onValueChange: void 0,\n            onInvoked: void 0,\n            placeholder: void 0,\n            listboxId: void 0,\n            filterSuggestions: void 0,\n        };\n        this.rootElement = React.createRef();\n        this.shouldFocusMenuOnNextRender = false;\n        /**\n         * The default function that renders an unstyled content display\n         */\n        this.defaultInputRegionRenderFunction = (props, state, onChange, onClick, onKeyDown) => {\n            const listboxId = state.isMenuOpen ? props.listboxId : null;\n            const activedescendantId = state.focusedItem !== null ? state.focusedItem.id : null;\n            return (React.createElement(TextField, { disabled: props.disabled, onChange: onChange, onClick: onClick, onKeyDown: onKeyDown, value: state.value, type: TextFieldType.text, role: \"combobox\", \"aria-label\": props.label || null, \"aria-autocomplete\": \"both\", \"aria-activedescendant\": activedescendantId || null, \"aria-owns\": listboxId || null, \"aria-controls\": listboxId || null }));\n        };\n        /**\n         * Updates selection state and associated values\n         */\n        this.updateFocusedItem = (newSelection) => {\n            if (newSelection.length === 0) {\n                this.setState({\n                    focusedItem: null,\n                });\n            }\n            else {\n                this.setState({\n                    focusedItem: newSelection[0],\n                });\n                this.updateValue(newSelection[0].value, true);\n            }\n        };\n        /**\n         * Handles clicks\n         */\n        this.handleInputRegionClick = (e) => {\n            if (this.props.disabled || e.defaultPrevented) {\n                return;\n            }\n            this.toggleMenu(true);\n        };\n        /**\n         * Handles item invoked\n         */\n        this.handleItemInvoked = (item) => {\n            this.invoke(item.value, item);\n            this.storedValueString = this.state.value;\n            this.toggleMenu(false);\n        };\n        /**\n         * Invokes the auto-select component\n         */\n        this.invoke = (value, item) => {\n            if (typeof this.props.onInvoked === \"function\") {\n                this.props.onInvoked(value, item);\n            }\n        };\n        /**\n         * Handles value changes from input element\n         */\n        this.handleChange = (e) => {\n            const newValue = e.target.value;\n            this.storedValueString = newValue;\n            this.updateValue(newValue, false);\n        };\n        /**\n         * Update the currentValue of the component\n         */\n        this.updateValue = (newValue, isFromSuggestedOption) => {\n            if (typeof this.props.onValueChange === \"function\") {\n                this.props.onValueChange(newValue, isFromSuggestedOption);\n            }\n            if (isNil(this.props.value) && newValue !== this.state.value) {\n                this.toggleMenu(true);\n                this.setState({\n                    value: newValue,\n                });\n            }\n        };\n        /**\n         * Handles input region key events\n         */\n        this.handleInputRegionKeydown = (e) => {\n            if (this.props.disabled || e.defaultPrevented) {\n                return;\n            }\n            switch (e.keyCode) {\n                case keyCodeEnter:\n                    this.invoke(this.state.value, null);\n                    break;\n                case keyCodeEscape:\n                    this.toggleMenu(false);\n                    break;\n                case keyCodeArrowDown:\n                    this.focusOnMenu(1);\n                    e.preventDefault();\n                    break;\n                case keyCodeArrowUp:\n                    this.focusOnMenu(-1);\n                    e.preventDefault();\n                    break;\n                case keyCodeTab:\n                    // Prevent default case handling for tab\n                    break;\n                default:\n                    if (e.target instanceof HTMLInputElement) {\n                        const newValue = e.target.value;\n                        this.updateValue(newValue, false);\n                        this.focusOnInput();\n                        break;\n                    }\n            }\n        };\n        /**\n         * Handles menu key events\n         */\n        this.handleMenuKeydown = (e) => {\n            if (this.props.disabled || e.defaultPrevented) {\n                return;\n            }\n            switch (e.keyCode) {\n                case keyCodeEscape:\n                    this.toggleMenu(false);\n                    break;\n                case keyCodeArrowDown:\n                    if (this.checkForMenuEnd(1) === true) {\n                        e.preventDefault();\n                    }\n                    break;\n                case keyCodeArrowUp:\n                    if (this.checkForMenuEnd(-1) === true) {\n                        e.preventDefault();\n                    }\n                    break;\n                default:\n                    if (this.isValidInput(e)) {\n                        this.focusOnInput();\n                    }\n                    break;\n            }\n        };\n        /**\n         * test if a key press is a valid input\n         */\n        this.isValidInput = (e) => {\n            if (e.keyCode < 8 ||\n                (e.keyCode > 8 && e.keyCode < 48) ||\n                (e.keyCode > 90 && e.keyCode < 96) ||\n                (e.keyCode > 111 && e.keyCode < 186) ||\n                e.keyCode > 222) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Passes focus to the input element if focus would bump up against the ends of the menu,\n         * return true if result was focusing on input region\n         */\n        this.checkForMenuEnd = (increment) => {\n            if (this.state.focusedItem === null) {\n                return false;\n            }\n            const childrenAsArray = React.Children.toArray(this.renderChildren());\n            const currentItemIndex = Listbox.getItemIndexById(this.state.focusedItem.id, this.renderChildren());\n            const startIndex = currentItemIndex + increment;\n            if (startIndex > childrenAsArray.length - 1 || startIndex < 0) {\n                this.setState({\n                    value: this.storedValueString,\n                });\n                // at the end of the list, focus on input\n                this.focusOnInput();\n                return true;\n            }\n            const endIndex = increment > -1 ? childrenAsArray.length - 1 : 0;\n            const nextFocusableItem = Listbox.getFirstValidOptionInRange(startIndex, endIndex, childrenAsArray, increment).props;\n            if (nextFocusableItem === null ||\n                nextFocusableItem.id === this.state.focusedItem.id) {\n                this.setState({\n                    value: this.storedValueString,\n                });\n                // at the end of the list, focus on input\n                this.focusOnInput();\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Opens menu and focuses on first or last valid item\n         */\n        this.focusOnMenu = (increment) => {\n            this.storedValueString = this.state.value;\n            const childrenAsArray = React.Children.toArray(this.renderChildren());\n            if (childrenAsArray.length === 0) {\n                return;\n            }\n            const startIndex = increment > -1 ? 0 : childrenAsArray.length - 1;\n            const endIndex = increment > -1 ? childrenAsArray.length - 1 : 0;\n            this.focusFirstItemInRange(startIndex, endIndex, childrenAsArray, increment);\n            this.toggleMenu(true);\n            this.shouldFocusMenuOnNextRender = true;\n        };\n        /**\n         * Gets first child in a range\n         */\n        this.focusFirstItemInRange = (startIndex, endIndex, childrenAsArray, increment) => {\n            const validOption = Listbox.getFirstValidOptionInRange(startIndex, endIndex, childrenAsArray, increment);\n            if (validOption !== null) {\n                this.updateFocusedItem([validOption.props]);\n            }\n        };\n        /**\n         * Toggles the menu\n         */\n        this.toggleMenu = (desiredMenuState) => {\n            const updatedIsMenuOpen = this.validateMenuState(desiredMenuState);\n            if (updatedIsMenuOpen !== this.state.isMenuOpen) {\n                this.setState({\n                    isMenuOpen: updatedIsMenuOpen,\n                });\n                if (this.state.isMenuOpen && !updatedIsMenuOpen) {\n                    this.setState({\n                        value: this.storedValueString,\n                    });\n                    this.focusOnInput();\n                }\n            }\n        };\n        /**\n         * Focus on the input element\n         */\n        this.focusOnInput = () => {\n            if (this.rootElement.current === null) {\n                return;\n            }\n            const inputElements = this.rootElement.current.getElementsByTagName(\"input\");\n            if (inputElements.length > 0) {\n                inputElements[0].focus();\n            }\n            this.updateFocusedItem([]);\n        };\n        /**\n         * Determine menu state by comparing desired state to props\n         */\n        this.validateMenuState = (desiredMenuState) => {\n            return typeof this.props.isMenuOpen === \"boolean\"\n                ? this.props.isMenuOpen\n                : React.Children.count(this.renderChildren()) === 0\n                    ? false\n                    : desiredMenuState;\n        };\n        /**\n         * Close the menu when when there are clicks outside\n         */\n        this.handleWindowClick = (event) => {\n            if (this.state.isMenuOpen &&\n                this.rootElement.current !== null &&\n                !this.rootElement.current.contains(event.target)) {\n                this.toggleMenu(false);\n            }\n        };\n        const value = this.props.value === undefined ? this.props.initialValue : this.props.value;\n        this.state = {\n            value,\n            focusedItem: null,\n            isMenuOpen: this.validateMenuState(false),\n        };\n        this.storedValueString = value;\n    }\n    componentDidUpdate(prevProps) {\n        const updatedMenuVisibility = this.validateMenuState(this.state.isMenuOpen);\n        if (updatedMenuVisibility !== this.state.isMenuOpen) {\n            this.toggleMenu(updatedMenuVisibility);\n        }\n        if (this.props.value !== prevProps.value) {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n    }\n    componentDidMount() {\n        window.addEventListener(\"click\", this.handleWindowClick);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"click\", this.handleWindowClick);\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, className: this.generateClassNames() }),\n            React.createElement(AutoSuggestContext.Provider, { value: {\n                    currentValue: this.storedValueString,\n                } },\n                this.renderInputRegion(),\n                this.renderMenu())));\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        const { autoSuggest, autoSuggest__disabled, autoSuggest__menuOpen, } = this.props.managedClasses;\n        return super.generateClassNames(classNames(autoSuggest, [autoSuggest__disabled, this.props.disabled], [autoSuggest__menuOpen, this.state.isMenuOpen]));\n    }\n    /**\n     * Determine which function to use to render content display (ie. the part of the control that shows when the menu isn't open)\n     * and invokes it\n     */\n    renderInputRegion() {\n        if (typeof this.props.inputRegion === \"function\") {\n            return this.props.inputRegion(this.props, this.state, this.handleChange, this.handleInputRegionClick, this.handleInputRegionKeydown);\n        }\n        else {\n            return this.defaultInputRegionRenderFunction(this.props, this.state, this.handleChange, this.handleInputRegionClick, this.handleInputRegionKeydown);\n        }\n    }\n    /**\n     * Determine which function to use to render the menu and invokes it\n     */\n    renderMenu() {\n        const shouldFocusOnMenu = this.shouldFocusMenuOnNextRender;\n        const { autoSuggest_menu, autoSuggest__disabled, } = this.props.managedClasses;\n        this.shouldFocusMenuOnNextRender = false;\n        if (!this.state.isMenuOpen) {\n            return;\n        }\n        const focusedItem = this.state.focusedItem !== null ? [this.state.focusedItem] : [];\n        return (React.createElement(Listbox, { id: this.props.listboxId, typeAheadEnabled: false, disabled: this.props.disabled, focusItemOnMount: shouldFocusOnMenu, defaultSelection: focusedItem, onSelectedItemsChanged: this.updateFocusedItem, onItemInvoked: this.handleItemInvoked, onKeyDown: this.handleMenuKeydown, managedClasses: {\n                listbox: autoSuggest_menu,\n                listbox__disabled: autoSuggest__disabled,\n            } }, this.renderChildren()));\n    }\n    renderChildren() {\n        if (this.props.filterSuggestions) {\n            const children = this.props.children;\n            return React.Children.map(children, (node) => {\n                if (!isNil(node.props)) {\n                    if (node.props[AutoSuggest.valuePropertyKey] === undefined) {\n                        return node;\n                    }\n                    return this.isMatch(node.props) ? node : null;\n                }\n            });\n        }\n        else {\n            return this.props.children;\n        }\n    }\n    /**\n     * Determine if a single node is a match\n     */\n    isMatch(node) {\n        if (!isNil(this.storedValueString)) {\n            return node.value\n                .toLowerCase()\n                .includes(this.storedValueString.toLowerCase());\n        }\n    }\n}\nAutoSuggest.displayName = `${DisplayNamePrefix}AutoSuggest`;\nAutoSuggest.defaultProps = {\n    initialValue: \"\",\n    disabled: false,\n    placeholder: \"\",\n    managedClasses: {},\n    filterSuggestions: false,\n};\nAutoSuggest.valuePropertyKey = \"value\";\nexport default AutoSuggest;\nexport { AutoSuggestContext };\n"]},"metadata":{},"sourceType":"module"}