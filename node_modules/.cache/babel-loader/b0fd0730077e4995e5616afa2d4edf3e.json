{"ast":null,"code":"import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeEscape, keyCodeTab } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport Tabbable from \"tabbable\";\n\nclass Dialog extends Foundation {\n  constructor() {\n    super(...arguments);\n    this.handledProps = {\n      describedBy: void 0,\n      label: void 0,\n      labelledBy: void 0,\n      contentWidth: void 0,\n      contentHeight: void 0,\n      modal: void 0,\n      managedClasses: void 0,\n      onDismiss: void 0,\n      visible: void 0\n    };\n    this.rootElement = React.createRef();\n    /**\n     * Check if props demand a key listener\n     */\n\n    this.shouldAddKeyListener = props => {\n      if (props.modal || props.onDismiss) {\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * handles document key down events\n     */\n\n\n    this.handleDocumentKeyDown = event => {\n      if (!event.defaultPrevented && this.props.visible) {\n        switch (event.keyCode) {\n          case keyCodeEscape:\n            this.checkForSoftDismiss(event);\n            break;\n\n          case keyCodeTab:\n            this.handleTabKeyDown(event);\n            break;\n        }\n      }\n    };\n    /**\n     * Invokes dialog soft dismiss if appropriate\n     */\n\n\n    this.checkForSoftDismiss = event => {\n      if (this.props.onDismiss && typeof this.props.onDismiss === \"function\" && this.props.visible) {\n        this.props.onDismiss(event);\n      }\n    };\n    /**\n     * process tab key down events\n     */\n\n\n    this.handleTabKeyDown = event => {\n      if (!this.props.modal) {\n        // only handle tab keystrokes when modal\n        return;\n      }\n\n      const tabbableElements = Tabbable(this.rootElement.current);\n      const tabbableElementCount = tabbableElements.length;\n\n      if (tabbableElementCount === 0) {\n        this.tryFocusOnRootElement();\n        event.preventDefault();\n        return;\n      } // intervene in normal tab order for first and last items in list\n\n\n      if (event.shiftKey && event.target === tabbableElements[0]) {\n        tabbableElements[tabbableElementCount - 1].focus();\n        event.preventDefault();\n      } else if (!event.shiftKey && event.target === tabbableElements[tabbableElementCount - 1]) {\n        tabbableElements[0].focus();\n        event.preventDefault();\n      }\n    };\n    /**\n     * forces focus to first tabbable element of modal dialog if document gains focus while dialog is open\n     */\n\n\n    this.handleDocumentFocus = event => {\n      if (!event.defaultPrevented && this.shouldForceFocus(event.target)) {\n        this.focusOnFirstElement();\n        event.preventDefault();\n      }\n    };\n    /**\n     * test to avoid forcing focus when focus is already within\n     */\n\n\n    this.shouldForceFocus = currentFocusElement => {\n      return this.props.visible && this.rootElement.current instanceof HTMLElement && !this.rootElement.current.contains(currentFocusElement);\n    };\n    /**\n     * focus on first element of tab queue\n     */\n\n\n    this.focusOnFirstElement = () => {\n      if (canUseDOM() && this.rootElement.current instanceof HTMLElement) {\n        const tabbableElements = Tabbable(this.rootElement.current);\n\n        if (tabbableElements.length === 0) {\n          this.tryFocusOnRootElement();\n        } else {\n          tabbableElements[0].focus();\n        }\n      }\n    };\n    /**\n     * if no tabbable elements try to focus root element\n     * generally a modal dialog should be expected to have a focusable element\n     */\n\n\n    this.tryFocusOnRootElement = () => {\n      if (this.rootElement.current instanceof HTMLElement) {\n        this.rootElement.current.focus();\n      }\n    };\n  }\n  /**\n   * Renders the component\n   */\n\n\n  render() {\n    const _this$props$managedCl = this.props.managedClasses,\n          dialog_positioningRegion = _this$props$managedCl.dialog_positioningRegion,\n          dialog_contentRegion = _this$props$managedCl.dialog_contentRegion;\n    return React.createElement(\"div\", Object.assign({\n      ref: this.rootElement\n    }, this.unhandledProps(), {\n      className: this.generateClassNames(),\n      \"aria-hidden\": !this.props.visible\n    }), React.createElement(\"div\", {\n      className: classNames(dialog_positioningRegion)\n    }, this.renderModalOverlay(), React.createElement(\"div\", {\n      role: \"dialog\",\n      tabIndex: -1,\n      className: classNames(dialog_contentRegion),\n      style: {\n        height: this.props.contentHeight,\n        width: this.props.contentWidth\n      },\n      \"aria-describedby\": this.props.describedBy,\n      \"aria-labelledby\": this.props.labelledBy,\n      \"aria-label\": this.props.label\n    }, this.props.children)));\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  componentDidMount() {\n    if (canUseDOM()) {\n      if (this.shouldAddKeyListener(this.props)) {\n        document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n      }\n\n      if (this.props.modal) {\n        document.addEventListener(\"focusin\", this.handleDocumentFocus);\n\n        if (this.shouldForceFocus(document.activeElement)) {\n          this.focusOnFirstElement();\n        }\n      }\n    }\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  componentDidUpdate(prevProps) {\n    if (canUseDOM()) {\n      if (!prevProps.modal && this.props.modal) {\n        document.addEventListener(\"focusin\", this.handleDocumentFocus);\n        this.focusOnFirstElement();\n      } else if (prevProps.modal && !this.props.modal) {\n        document.removeEventListener(\"focusin\", this.handleDocumentFocus);\n      }\n\n      if (!this.shouldAddKeyListener(prevProps) && this.shouldAddKeyListener(this.props)) {\n        document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n      } else if (this.shouldAddKeyListener(prevProps) && !this.shouldAddKeyListener(this.props)) {\n        document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n      }\n    }\n  }\n  /**\n   * React life-cycle method\n   */\n\n\n  componentWillUnmount() {\n    if (canUseDOM()) {\n      if (this.shouldAddKeyListener(this.props)) {\n        document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n      }\n\n      if (this.props.modal) {\n        document.removeEventListener(\"focusin\", this.handleDocumentFocus);\n      }\n    }\n  }\n  /**\n   * Generates class names\n   */\n\n\n  generateClassNames() {\n    return super.generateClassNames(classNames(this.props.managedClasses.dialog));\n  }\n  /**\n   * Renders the modal overlay\n   */\n\n\n  renderModalOverlay() {\n    if (!this.props.modal) {\n      return;\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames(this.props.managedClasses.dialog_modalOverlay),\n      onClick: this.checkForSoftDismiss,\n      onTouchStart: this.checkForSoftDismiss,\n      role: \"presentation\",\n      tabIndex: -1,\n      style: {\n        touchAction: \"none\"\n      }\n    });\n  }\n\n}\n\nDialog.defaultProps = {\n  contentHeight: \"480px\",\n  contentWidth: \"640px\",\n  visible: false,\n  managedClasses: {}\n};\nDialog.displayName = `${DisplayNamePrefix}Dialog`;\nexport default Dialog;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/dialog/dialog.js"],"names":["Foundation","classNames","keyCodeEscape","keyCodeTab","canUseDOM","React","DisplayNamePrefix","Tabbable","Dialog","constructor","arguments","handledProps","describedBy","label","labelledBy","contentWidth","contentHeight","modal","managedClasses","onDismiss","visible","rootElement","createRef","shouldAddKeyListener","props","handleDocumentKeyDown","event","defaultPrevented","keyCode","checkForSoftDismiss","handleTabKeyDown","tabbableElements","current","tabbableElementCount","length","tryFocusOnRootElement","preventDefault","shiftKey","target","focus","handleDocumentFocus","shouldForceFocus","focusOnFirstElement","currentFocusElement","HTMLElement","contains","render","dialog_positioningRegion","dialog_contentRegion","createElement","Object","assign","ref","unhandledProps","className","generateClassNames","renderModalOverlay","role","tabIndex","style","height","width","children","componentDidMount","document","addEventListener","activeElement","componentDidUpdate","prevProps","removeEventListener","componentWillUnmount","dialog","dialog_modalOverlay","onClick","onTouchStart","touchAction","defaultProps","displayName"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeEscape, keyCodeTab } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport React from \"react\";\nimport { DisplayNamePrefix } from \"../utilities\";\nimport Tabbable from \"tabbable\";\nclass Dialog extends Foundation {\n    constructor() {\n        super(...arguments);\n        this.handledProps = {\n            describedBy: void 0,\n            label: void 0,\n            labelledBy: void 0,\n            contentWidth: void 0,\n            contentHeight: void 0,\n            modal: void 0,\n            managedClasses: void 0,\n            onDismiss: void 0,\n            visible: void 0,\n        };\n        this.rootElement = React.createRef();\n        /**\n         * Check if props demand a key listener\n         */\n        this.shouldAddKeyListener = (props) => {\n            if (props.modal || props.onDismiss) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         * handles document key down events\n         */\n        this.handleDocumentKeyDown = (event) => {\n            if (!event.defaultPrevented && this.props.visible) {\n                switch (event.keyCode) {\n                    case keyCodeEscape:\n                        this.checkForSoftDismiss(event);\n                        break;\n                    case keyCodeTab:\n                        this.handleTabKeyDown(event);\n                        break;\n                }\n            }\n        };\n        /**\n         * Invokes dialog soft dismiss if appropriate\n         */\n        this.checkForSoftDismiss = (event) => {\n            if (this.props.onDismiss &&\n                typeof this.props.onDismiss === \"function\" &&\n                this.props.visible) {\n                this.props.onDismiss(event);\n            }\n        };\n        /**\n         * process tab key down events\n         */\n        this.handleTabKeyDown = (event) => {\n            if (!this.props.modal) {\n                // only handle tab keystrokes when modal\n                return;\n            }\n            const tabbableElements = Tabbable(this.rootElement.current);\n            const tabbableElementCount = tabbableElements.length;\n            if (tabbableElementCount === 0) {\n                this.tryFocusOnRootElement();\n                event.preventDefault();\n                return;\n            }\n            // intervene in normal tab order for first and last items in list\n            if (event.shiftKey && event.target === tabbableElements[0]) {\n                tabbableElements[tabbableElementCount - 1].focus();\n                event.preventDefault();\n            }\n            else if (!event.shiftKey &&\n                event.target === tabbableElements[tabbableElementCount - 1]) {\n                tabbableElements[0].focus();\n                event.preventDefault();\n            }\n        };\n        /**\n         * forces focus to first tabbable element of modal dialog if document gains focus while dialog is open\n         */\n        this.handleDocumentFocus = (event) => {\n            if (!event.defaultPrevented &&\n                this.shouldForceFocus(event.target)) {\n                this.focusOnFirstElement();\n                event.preventDefault();\n            }\n        };\n        /**\n         * test to avoid forcing focus when focus is already within\n         */\n        this.shouldForceFocus = (currentFocusElement) => {\n            return (this.props.visible &&\n                this.rootElement.current instanceof HTMLElement &&\n                !this.rootElement.current.contains(currentFocusElement));\n        };\n        /**\n         * focus on first element of tab queue\n         */\n        this.focusOnFirstElement = () => {\n            if (canUseDOM() && this.rootElement.current instanceof HTMLElement) {\n                const tabbableElements = Tabbable(this.rootElement.current);\n                if (tabbableElements.length === 0) {\n                    this.tryFocusOnRootElement();\n                }\n                else {\n                    tabbableElements[0].focus();\n                }\n            }\n        };\n        /**\n         * if no tabbable elements try to focus root element\n         * generally a modal dialog should be expected to have a focusable element\n         */\n        this.tryFocusOnRootElement = () => {\n            if (this.rootElement.current instanceof HTMLElement) {\n                this.rootElement.current.focus();\n            }\n        };\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        const { dialog_positioningRegion, dialog_contentRegion, } = this.props.managedClasses;\n        return (React.createElement(\"div\", Object.assign({ ref: this.rootElement }, this.unhandledProps(), { className: this.generateClassNames(), \"aria-hidden\": !this.props.visible }),\n            React.createElement(\"div\", { className: classNames(dialog_positioningRegion) },\n                this.renderModalOverlay(),\n                React.createElement(\"div\", { role: \"dialog\", tabIndex: -1, className: classNames(dialog_contentRegion), style: {\n                        height: this.props.contentHeight,\n                        width: this.props.contentWidth,\n                    }, \"aria-describedby\": this.props.describedBy, \"aria-labelledby\": this.props.labelledBy, \"aria-label\": this.props.label }, this.props.children))));\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidMount() {\n        if (canUseDOM()) {\n            if (this.shouldAddKeyListener(this.props)) {\n                document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n            }\n            if (this.props.modal) {\n                document.addEventListener(\"focusin\", this.handleDocumentFocus);\n                if (this.shouldForceFocus(document.activeElement)) {\n                    this.focusOnFirstElement();\n                }\n            }\n        }\n    }\n    /**\n     * React life-cycle method\n     */\n    componentDidUpdate(prevProps) {\n        if (canUseDOM()) {\n            if (!prevProps.modal && this.props.modal) {\n                document.addEventListener(\"focusin\", this.handleDocumentFocus);\n                this.focusOnFirstElement();\n            }\n            else if (prevProps.modal && !this.props.modal) {\n                document.removeEventListener(\"focusin\", this.handleDocumentFocus);\n            }\n            if (!this.shouldAddKeyListener(prevProps) &&\n                this.shouldAddKeyListener(this.props)) {\n                document.addEventListener(\"keydown\", this.handleDocumentKeyDown);\n            }\n            else if (this.shouldAddKeyListener(prevProps) &&\n                !this.shouldAddKeyListener(this.props)) {\n                document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n            }\n        }\n    }\n    /**\n     * React life-cycle method\n     */\n    componentWillUnmount() {\n        if (canUseDOM()) {\n            if (this.shouldAddKeyListener(this.props)) {\n                document.removeEventListener(\"keydown\", this.handleDocumentKeyDown);\n            }\n            if (this.props.modal) {\n                document.removeEventListener(\"focusin\", this.handleDocumentFocus);\n            }\n        }\n    }\n    /**\n     * Generates class names\n     */\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.dialog));\n    }\n    /**\n     * Renders the modal overlay\n     */\n    renderModalOverlay() {\n        if (!this.props.modal) {\n            return;\n        }\n        return (React.createElement(\"div\", { className: classNames(this.props.managedClasses.dialog_modalOverlay), onClick: this.checkForSoftDismiss, onTouchStart: this.checkForSoftDismiss, role: \"presentation\", tabIndex: -1, style: {\n                touchAction: \"none\",\n            } }));\n    }\n}\nDialog.defaultProps = {\n    contentHeight: \"480px\",\n    contentWidth: \"640px\",\n    visible: false,\n    managedClasses: {},\n};\nDialog.displayName = `${DisplayNamePrefix}Dialog`;\nexport default Dialog;\n"]},"metadata":{},"sourceType":"module"}