{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, invert } from \"lodash-es\";\nimport React from \"react\";\nimport { ContextMenuItemRole } from \"../context-menu-item\";\nimport { DisplayNamePrefix } from \"../utilities\";\n\nvar ContextMenu =\n/*#__PURE__*/\nfunction (_Foundation) {\n  _inherits(ContextMenu, _Foundation);\n\n  function ContextMenu(props) {\n    var _this;\n\n    _classCallCheck(this, ContextMenu);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextMenu).call(this, props));\n    _this.handledProps = {\n      children: void 0,\n      managedClasses: void 0,\n      enableAutoFocus: void 0\n    };\n    _this.rootElement = React.createRef();\n    /**\n     * Render a single child\n     */\n\n    _this.renderChild = function (child, index) {\n      return React.cloneElement(child, {\n        tabIndex: index === _this.state.focusIndex ? 0 : -1,\n        onFocus: _this.handleMenuItemFocus\n      });\n    };\n    /**\n     * Determines if a given element should be focusable by the menu\n     */\n\n\n    _this.isFocusableElement = function (element) {\n      return _this.isMenuItemElement(element) && !_this.isDisabledElement(element);\n    };\n\n    _this.isDisabledElement = function (element) {\n      return _this.isMenuItemElement(element) && element.getAttribute(\"aria-disabled\") === \"true\";\n    };\n    /**\n     * Ensure we always validate our internal state on item focus events, otherwise\n     * the component can get out of sync from click events\n     */\n\n\n    _this.handleMenuItemFocus = function (e) {\n      var target = e.currentTarget;\n\n      var focusIndex = _this.domChildren().indexOf(target);\n\n      if (_this.isDisabledElement(target)) {\n        target.blur();\n        return;\n      }\n\n      if (focusIndex !== _this.state.focusIndex && focusIndex !== -1) {\n        _this.setFocus(focusIndex, focusIndex > _this.state.focusIndex ? 1 : -1);\n      }\n    };\n    /**\n     * Handle the keydown event of the root menu\n     */\n\n\n    _this.handleMenuKeyDown = function (e) {\n      switch (e.keyCode) {\n        case keyCodeArrowDown:\n        case keyCodeArrowRight:\n          e.preventDefault();\n\n          _this.setFocus(_this.state.focusIndex + 1, 1);\n\n          break;\n\n        case keyCodeArrowUp:\n        case keyCodeArrowLeft:\n          e.preventDefault();\n\n          _this.setFocus(_this.state.focusIndex - 1, -1);\n\n          break;\n\n        case keyCodeEnd:\n          e.preventDefault();\n\n          _this.setFocus(_this.domChildren().length - 1, -1);\n\n          break;\n\n        case keyCodeHome:\n          e.preventDefault();\n\n          _this.setFocus(0, 1);\n\n          break;\n      }\n\n      if (typeof _this.props.onKeyDown === \"function\") {\n        _this.props.onKeyDown(e);\n      }\n    };\n\n    _this.handleContextMenu = function (e) {\n      e.preventDefault(); // prevent browser context-menu becuase this *is* a context menu\n\n      if (typeof _this.props.onContextMenu === \"function\") {\n        _this.props.onContextMenu(e);\n      }\n    };\n\n    _this.state = {\n      focusIndex: -1\n    };\n    return _this;\n  }\n  /**\n   * Renders the component\n   */\n\n\n  _createClass(ContextMenu, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", Object.assign({}, this.unhandledProps(), {\n        ref: this.rootElement,\n        role: \"menu\",\n        className: this.generateClassNames(),\n        onKeyDown: this.handleMenuKeyDown,\n        onContextMenu: this.handleContextMenu\n      }), this.renderChildren());\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var children = this.domChildren();\n      var focusIndex = children.findIndex(this.isFocusableElement);\n\n      if (focusIndex !== -1) {\n        this.setState({\n          focusIndex: focusIndex\n        });\n      }\n\n      if (this.props.enableAutoFocus) {\n        this.focus();\n      }\n    }\n    /**\n     * Brings focus to the appropriate menu-item\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.setFocus(this.state.focusIndex === -1 ? 0 : this.state.focusIndex, 1);\n    }\n    /**\n     * Create class names\n     */\n\n  }, {\n    key: \"generateClassNames\",\n    value: function generateClassNames() {\n      return _get(_getPrototypeOf(ContextMenu.prototype), \"generateClassNames\", this).call(this, classNames(this.props.managedClasses.contextMenu));\n    }\n    /**\n     * Render all child elements\n     */\n\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      return React.Children.map(this.props.children, this.renderChild);\n    }\n  }, {\n    key: \"isMenuItemElement\",\n    value: function isMenuItemElement(element) {\n      return element instanceof HTMLElement && ContextMenu.focusableElementRoles.hasOwnProperty(element.getAttribute(\"role\"));\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n\n  }, {\n    key: \"domChildren\",\n    value: function domChildren() {\n      return canUseDOM() && this.rootElement.current instanceof HTMLElement ? Array.from(this.rootElement.current.children) : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.\n     */\n\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(focusIndex, adjustment) {\n      var children = this.domChildren();\n\n      while (inRange(focusIndex, children.length)) {\n        var child = children[focusIndex];\n\n        if (this.isFocusableElement(child)) {\n          child.focus();\n          this.setState({\n            focusIndex: focusIndex\n          });\n          break;\n        }\n\n        focusIndex += adjustment;\n      }\n    }\n  }]);\n\n  return ContextMenu;\n}(Foundation);\n\nContextMenu.displayName = \"\".concat(DisplayNamePrefix, \"ContextMenu\");\nContextMenu.defaultProps = {\n  managedClasses: {}\n};\nContextMenu.focusableElementRoles = invert(ContextMenuItemRole);\nexport default ContextMenu;","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-components-react-base/dist/context-menu/context-menu.js"],"names":["Foundation","classNames","keyCodeArrowDown","keyCodeArrowLeft","keyCodeArrowRight","keyCodeArrowUp","keyCodeEnd","keyCodeHome","canUseDOM","inRange","invert","React","ContextMenuItemRole","DisplayNamePrefix","ContextMenu","props","handledProps","children","managedClasses","enableAutoFocus","rootElement","createRef","renderChild","child","index","cloneElement","tabIndex","state","focusIndex","onFocus","handleMenuItemFocus","isFocusableElement","element","isMenuItemElement","isDisabledElement","getAttribute","e","target","currentTarget","domChildren","indexOf","blur","setFocus","handleMenuKeyDown","keyCode","preventDefault","length","onKeyDown","handleContextMenu","onContextMenu","createElement","Object","assign","unhandledProps","ref","role","className","generateClassNames","renderChildren","findIndex","setState","focus","contextMenu","Children","map","HTMLElement","focusableElementRoles","hasOwnProperty","current","Array","from","adjustment","displayName","defaultProps"],"mappings":"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","sourcesContent":["import Foundation from \"@microsoft/fast-components-foundation-react\";\nimport { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome, } from \"@microsoft/fast-web-utilities\";\nimport { canUseDOM } from \"exenv-es6\";\nimport { inRange, invert } from \"lodash-es\";\nimport React from \"react\";\nimport { ContextMenuItemRole } from \"../context-menu-item\";\nimport { DisplayNamePrefix } from \"../utilities\";\nclass ContextMenu extends Foundation {\n    constructor(props) {\n        super(props);\n        this.handledProps = {\n            children: void 0,\n            managedClasses: void 0,\n            enableAutoFocus: void 0,\n        };\n        this.rootElement = React.createRef();\n        /**\n         * Render a single child\n         */\n        this.renderChild = (child, index) => {\n            return React.cloneElement(child, {\n                tabIndex: index === this.state.focusIndex ? 0 : -1,\n                onFocus: this.handleMenuItemFocus,\n            });\n        };\n        /**\n         * Determines if a given element should be focusable by the menu\n         */\n        this.isFocusableElement = (element) => {\n            return this.isMenuItemElement(element) && !this.isDisabledElement(element);\n        };\n        this.isDisabledElement = (element) => {\n            return (this.isMenuItemElement(element) &&\n                element.getAttribute(\"aria-disabled\") === \"true\");\n        };\n        /**\n         * Ensure we always validate our internal state on item focus events, otherwise\n         * the component can get out of sync from click events\n         */\n        this.handleMenuItemFocus = (e) => {\n            const target = e.currentTarget;\n            const focusIndex = this.domChildren().indexOf(target);\n            if (this.isDisabledElement(target)) {\n                target.blur();\n                return;\n            }\n            if (focusIndex !== this.state.focusIndex && focusIndex !== -1) {\n                this.setFocus(focusIndex, focusIndex > this.state.focusIndex ? 1 : -1);\n            }\n        };\n        /**\n         * Handle the keydown event of the root menu\n         */\n        this.handleMenuKeyDown = (e) => {\n            switch (e.keyCode) {\n                case keyCodeArrowDown:\n                case keyCodeArrowRight:\n                    e.preventDefault();\n                    this.setFocus(this.state.focusIndex + 1, 1);\n                    break;\n                case keyCodeArrowUp:\n                case keyCodeArrowLeft:\n                    e.preventDefault();\n                    this.setFocus(this.state.focusIndex - 1, -1);\n                    break;\n                case keyCodeEnd:\n                    e.preventDefault();\n                    this.setFocus(this.domChildren().length - 1, -1);\n                    break;\n                case keyCodeHome:\n                    e.preventDefault();\n                    this.setFocus(0, 1);\n                    break;\n            }\n            if (typeof this.props.onKeyDown === \"function\") {\n                this.props.onKeyDown(e);\n            }\n        };\n        this.handleContextMenu = (e) => {\n            e.preventDefault(); // prevent browser context-menu becuase this *is* a context menu\n            if (typeof this.props.onContextMenu === \"function\") {\n                this.props.onContextMenu(e);\n            }\n        };\n        this.state = {\n            focusIndex: -1,\n        };\n    }\n    /**\n     * Renders the component\n     */\n    render() {\n        return (React.createElement(\"div\", Object.assign({}, this.unhandledProps(), { ref: this.rootElement, role: \"menu\", className: this.generateClassNames(), onKeyDown: this.handleMenuKeyDown, onContextMenu: this.handleContextMenu }), this.renderChildren()));\n    }\n    componentDidMount() {\n        const children = this.domChildren();\n        const focusIndex = children.findIndex(this.isFocusableElement);\n        if (focusIndex !== -1) {\n            this.setState({\n                focusIndex,\n            });\n        }\n        if (this.props.enableAutoFocus) {\n            this.focus();\n        }\n    }\n    /**\n     * Brings focus to the appropriate menu-item\n     */\n    focus() {\n        this.setFocus(this.state.focusIndex === -1 ? 0 : this.state.focusIndex, 1);\n    }\n    /**\n     * Create class names\n     */\n    generateClassNames() {\n        return super.generateClassNames(classNames(this.props.managedClasses.contextMenu));\n    }\n    /**\n     * Render all child elements\n     */\n    renderChildren() {\n        return React.Children.map(this.props.children, this.renderChild);\n    }\n    isMenuItemElement(element) {\n        return (element instanceof HTMLElement &&\n            ContextMenu.focusableElementRoles.hasOwnProperty(element.getAttribute(\"role\")));\n    }\n    /**\n     * Return an array of all focusabled elements that are children\n     * of the context menu\n     */\n    domChildren() {\n        return canUseDOM() && this.rootElement.current instanceof HTMLElement\n            ? Array.from(this.rootElement.current.children)\n            : [];\n    }\n    /**\n     * Sets focus to the nearest focusable element to the supplied focusIndex.\n     * The adjustment controls how the function searches for other focusable elements\n     * if the element at the focusIndex is not focusable. A positive number will search\n     * towards the end of the children array, whereas a negative number will search towards\n     * the beginning of the children array.\n     */\n    setFocus(focusIndex, adjustment) {\n        const children = this.domChildren();\n        while (inRange(focusIndex, children.length)) {\n            const child = children[focusIndex];\n            if (this.isFocusableElement(child)) {\n                child.focus();\n                this.setState({\n                    focusIndex,\n                });\n                break;\n            }\n            focusIndex += adjustment;\n        }\n    }\n}\nContextMenu.displayName = `${DisplayNamePrefix}ContextMenu`;\nContextMenu.defaultProps = {\n    managedClasses: {},\n};\nContextMenu.focusableElementRoles = invert(ContextMenuItemRole);\nexport default ContextMenu;\n"]},"metadata":{},"sourceType":"module"}