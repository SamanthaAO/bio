{"ast":null,"code":"import _classCallCheck from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samorcutt/Desktop/bio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { jss, stylesheetRegistry } from \"./jss\";\n/**\n * A class for managing instance of stylesheets. The SheetManager\n * tracks and associates compiled stylesheets with their style/design-system inputs,\n * as well as tracking number of times a style/design-system combination has been used.\n * Tracking this allows us to memoize compiled stylesheets and only compile a new sheet\n * when one does not already exist.\n */\n\nvar SheetManager =\n/*#__PURE__*/\nfunction () {\n  function SheetManager() {\n    _classCallCheck(this, SheetManager);\n\n    this.jss = jss;\n    this.registry = new WeakMap();\n  }\n  /**\n   * Creates a new JSS stylesheet from a stylesheet and design-system.\n   * If a JSS style sheet has been created with this stylesheet and design system already,\n   * then simply track that another instance has been added\n   */\n\n\n  _createClass(SheetManager, [{\n    key: \"add\",\n    value: function add(styles, designSystem, options) {\n      var tracker = this.getTracker(styles, designSystem);\n\n      if (Array.isArray(tracker)) {\n        tracker[1]++;\n        return;\n      }\n\n      var designSystemRegistry = this.registry.get(styles);\n\n      if (designSystemRegistry === undefined) {\n        // If we don't have any design system instances for the current stylesheet,\n        // we need to create a new map to store them\n        designSystemRegistry = new WeakMap();\n        this.registry.set(styles, designSystemRegistry);\n      }\n\n      this.registry.get(styles).set(designSystem, [this.createStyleSheet(styles, designSystem, options), 1]);\n    }\n    /**\n     * Return the compiled jss stylesheet associated with a given style object and design system\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(styles, designSystem) {\n      var tracker = this.getTracker(styles, designSystem);\n\n      if (Array.isArray(tracker) && !!tracker[0]) {\n        return tracker[0];\n      }\n\n      return;\n    }\n    /**\n     * Removes a reference for a stylesheet and designSystem and adds a new reference. Useful\n     * when the design system changes and the stylesheet should be associated with a new\n     * design system\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(styles, previousDesignSystem, nextDesignSystem) {\n      var tracker = this.getTracker(styles, previousDesignSystem);\n\n      if (!tracker) {\n        return;\n      }\n      /**\n       * If we only have one sheet and this sheet isn't associated with the next design system, *and* it's an object,\n       * we can simply update the sheet and move it's reference instead of completely tearing down the sheet and\n       * re-creating a style element\n       */\n\n\n      if (tracker[1] === 1 && !this.get(styles, nextDesignSystem) && !!styles && typeof styles === \"object\") {\n        tracker[0].update(nextDesignSystem);\n        this.registry.get(styles).delete(previousDesignSystem);\n        this.registry.get(styles).set(nextDesignSystem, tracker);\n      } else {\n        this.remove(styles, previousDesignSystem);\n        this.add(styles, nextDesignSystem, tracker[0].options);\n      }\n    }\n    /**\n     * Reduces the internal count for a stylesheet and designsystem. If the count becomes zero,\n     * the sheet will be detached\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(styles, designSystem) {\n      var tracker = this.getTracker(styles, designSystem);\n\n      if (Array.isArray(tracker)) {\n        tracker[1]--;\n\n        if (tracker[1] === 0) {\n          var sheet = tracker[0];\n          this.jss.removeStyleSheet(sheet);\n          stylesheetRegistry.remove(sheet);\n          this.registry.get(styles).delete(designSystem);\n        }\n      }\n    }\n    /**\n     * Returns the number of components using a stylesheet with a designSystem\n     */\n\n  }, {\n    key: \"count\",\n    value: function count(styles, designSystem) {\n      var tracker = this.getTracker(styles, designSystem);\n\n      if (Array.isArray(tracker)) {\n        return tracker[1];\n      }\n\n      return -1;\n    }\n    /**\n     * Removes all entries\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.registry = new WeakMap();\n    }\n    /**\n     * Retrieve the sheet tracker tracking the styles and design system\n     */\n\n  }, {\n    key: \"getTracker\",\n    value: function getTracker(styles, designSystem) {\n      var designSystemRegistry = this.registry.get(styles);\n\n      if (designSystemRegistry instanceof WeakMap) {\n        var tracker = designSystemRegistry.get(designSystem);\n\n        if (Array.isArray(tracker)) {\n          return tracker;\n        }\n      }\n    }\n    /**\n     * Creates a JSS StyleSheet and attaches it to the DOM\n     */\n\n  }, {\n    key: \"createStyleSheet\",\n    value: function createStyleSheet(styles, designSystem) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var stylesheet = typeof styles === \"function\" ? styles(designSystem) : styles;\n      var sheet = this.jss.createStyleSheet(stylesheet, Object.assign({\n        link: true\n      }, options));\n      sheet.update(designSystem).attach();\n      stylesheetRegistry.add(sheet);\n      return sheet;\n    }\n  }]);\n\n  return SheetManager;\n}();\n\nexport { SheetManager as default };","map":{"version":3,"sources":["/Users/samorcutt/Desktop/bio/node_modules/@microsoft/fast-jss-manager-react/dist/sheet-manager.js"],"names":["jss","stylesheetRegistry","SheetManager","registry","WeakMap","styles","designSystem","options","tracker","getTracker","Array","isArray","designSystemRegistry","get","undefined","set","createStyleSheet","previousDesignSystem","nextDesignSystem","update","delete","remove","add","sheet","removeStyleSheet","stylesheet","Object","assign","link","attach"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,kBAAd,QAAwC,OAAxC;AACA;;;;;;;;IAOqBC,Y;;;AACjB,0BAAc;AAAA;;AACV,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKG,QAAL,GAAgB,IAAIC,OAAJ,EAAhB;AACH;AACD;;;;;;;;;wBAKIC,M,EAAQC,Y,EAAcC,O,EAAS;AAC/B,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,EAAwBC,YAAxB,CAAhB;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AACxBA,QAAAA,OAAO,CAAC,CAAD,CAAP;AACA;AACH;;AACD,UAAII,oBAAoB,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBR,MAAlB,CAA3B;;AACA,UAAIO,oBAAoB,KAAKE,SAA7B,EAAwC;AACpC;AACA;AACAF,QAAAA,oBAAoB,GAAG,IAAIR,OAAJ,EAAvB;AACA,aAAKD,QAAL,CAAcY,GAAd,CAAkBV,MAAlB,EAA0BO,oBAA1B;AACH;;AACD,WAAKT,QAAL,CACKU,GADL,CACSR,MADT,EAEKU,GAFL,CAEST,YAFT,EAEuB,CAAC,KAAKU,gBAAL,CAAsBX,MAAtB,EAA8BC,YAA9B,EAA4CC,OAA5C,CAAD,EAAuD,CAAvD,CAFvB;AAGH;AACD;;;;;;wBAGIF,M,EAAQC,Y,EAAc;AACtB,UAAME,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,EAAwBC,YAAxB,CAAhB;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcH,OAAd,KAA0B,CAAC,CAACA,OAAO,CAAC,CAAD,CAAvC,EAA4C;AACxC,eAAOA,OAAO,CAAC,CAAD,CAAd;AACH;;AACD;AACH;AACD;;;;;;;;2BAKOH,M,EAAQY,oB,EAAsBC,gB,EAAkB;AACnD,UAAMV,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,EAAwBY,oBAAxB,CAAhB;;AACA,UAAI,CAACT,OAAL,EAAc;AACV;AACH;AACD;;;;;;;AAKA,UAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,CAAf,IACA,CAAC,KAAKK,GAAL,CAASR,MAAT,EAAiBa,gBAAjB,CADD,IAEA,CAAC,CAACb,MAFF,IAGA,OAAOA,MAAP,KAAkB,QAHtB,EAGgC;AAC5BG,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAX,CAAkBD,gBAAlB;AACA,aAAKf,QAAL,CAAcU,GAAd,CAAkBR,MAAlB,EAA0Be,MAA1B,CAAiCH,oBAAjC;AACA,aAAKd,QAAL,CAAcU,GAAd,CAAkBR,MAAlB,EAA0BU,GAA1B,CAA8BG,gBAA9B,EAAgDV,OAAhD;AACH,OAPD,MAQK;AACD,aAAKa,MAAL,CAAYhB,MAAZ,EAAoBY,oBAApB;AACA,aAAKK,GAAL,CAASjB,MAAT,EAAiBa,gBAAjB,EAAmCV,OAAO,CAAC,CAAD,CAAP,CAAWD,OAA9C;AACH;AACJ;AACD;;;;;;;2BAIOF,M,EAAQC,Y,EAAc;AACzB,UAAME,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,EAAwBC,YAAxB,CAAhB;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AACxBA,QAAAA,OAAO,CAAC,CAAD,CAAP;;AACA,YAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,CAAnB,EAAsB;AAClB,cAAMe,KAAK,GAAGf,OAAO,CAAC,CAAD,CAArB;AACA,eAAKR,GAAL,CAASwB,gBAAT,CAA0BD,KAA1B;AACAtB,UAAAA,kBAAkB,CAACoB,MAAnB,CAA0BE,KAA1B;AACA,eAAKpB,QAAL,CAAcU,GAAd,CAAkBR,MAAlB,EAA0Be,MAA1B,CAAiCd,YAAjC;AACH;AACJ;AACJ;AACD;;;;;;0BAGMD,M,EAAQC,Y,EAAc;AACxB,UAAME,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,MAAhB,EAAwBC,YAAxB,CAAhB;;AACA,UAAII,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AACxB,eAAOA,OAAO,CAAC,CAAD,CAAd;AACH;;AACD,aAAO,CAAC,CAAR;AACH;AACD;;;;;;4BAGQ;AACJ,WAAKL,QAAL,GAAgB,IAAIC,OAAJ,EAAhB;AACH;AACD;;;;;;+BAGWC,M,EAAQC,Y,EAAc;AAC7B,UAAMM,oBAAoB,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBR,MAAlB,CAA7B;;AACA,UAAIO,oBAAoB,YAAYR,OAApC,EAA6C;AACzC,YAAMI,OAAO,GAAGI,oBAAoB,CAACC,GAArB,CAAyBP,YAAzB,CAAhB;;AACA,YAAII,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AACxB,iBAAOA,OAAP;AACH;AACJ;AACJ;AACD;;;;;;qCAGiBH,M,EAAQC,Y,EAA4B;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AACjD,UAAMkB,UAAU,GAAG,OAAOpB,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACC,YAAD,CAArC,GAAsDD,MAAzE;AACA,UAAMkB,KAAK,GAAG,KAAKvB,GAAL,CAASgB,gBAAT,CAA0BS,UAA1B,EAAsCC,MAAM,CAACC,MAAP,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd,EAA8BrB,OAA9B,CAAtC,CAAd;AACAgB,MAAAA,KAAK,CAACJ,MAAN,CAAab,YAAb,EAA2BuB,MAA3B;AACA5B,MAAAA,kBAAkB,CAACqB,GAAnB,CAAuBC,KAAvB;AACA,aAAOA,KAAP;AACH;;;;;;SAtHgBrB,Y","sourcesContent":["import { jss, stylesheetRegistry } from \"./jss\";\n/**\n * A class for managing instance of stylesheets. The SheetManager\n * tracks and associates compiled stylesheets with their style/design-system inputs,\n * as well as tracking number of times a style/design-system combination has been used.\n * Tracking this allows us to memoize compiled stylesheets and only compile a new sheet\n * when one does not already exist.\n */\nexport default class SheetManager {\n    constructor() {\n        this.jss = jss;\n        this.registry = new WeakMap();\n    }\n    /**\n     * Creates a new JSS stylesheet from a stylesheet and design-system.\n     * If a JSS style sheet has been created with this stylesheet and design system already,\n     * then simply track that another instance has been added\n     */\n    add(styles, designSystem, options) {\n        const tracker = this.getTracker(styles, designSystem);\n        if (Array.isArray(tracker)) {\n            tracker[1]++;\n            return;\n        }\n        let designSystemRegistry = this.registry.get(styles);\n        if (designSystemRegistry === undefined) {\n            // If we don't have any design system instances for the current stylesheet,\n            // we need to create a new map to store them\n            designSystemRegistry = new WeakMap();\n            this.registry.set(styles, designSystemRegistry);\n        }\n        this.registry\n            .get(styles)\n            .set(designSystem, [this.createStyleSheet(styles, designSystem, options), 1]);\n    }\n    /**\n     * Return the compiled jss stylesheet associated with a given style object and design system\n     */\n    get(styles, designSystem) {\n        const tracker = this.getTracker(styles, designSystem);\n        if (Array.isArray(tracker) && !!tracker[0]) {\n            return tracker[0];\n        }\n        return;\n    }\n    /**\n     * Removes a reference for a stylesheet and designSystem and adds a new reference. Useful\n     * when the design system changes and the stylesheet should be associated with a new\n     * design system\n     */\n    update(styles, previousDesignSystem, nextDesignSystem) {\n        const tracker = this.getTracker(styles, previousDesignSystem);\n        if (!tracker) {\n            return;\n        }\n        /**\n         * If we only have one sheet and this sheet isn't associated with the next design system, *and* it's an object,\n         * we can simply update the sheet and move it's reference instead of completely tearing down the sheet and\n         * re-creating a style element\n         */\n        if (tracker[1] === 1 &&\n            !this.get(styles, nextDesignSystem) &&\n            !!styles &&\n            typeof styles === \"object\") {\n            tracker[0].update(nextDesignSystem);\n            this.registry.get(styles).delete(previousDesignSystem);\n            this.registry.get(styles).set(nextDesignSystem, tracker);\n        }\n        else {\n            this.remove(styles, previousDesignSystem);\n            this.add(styles, nextDesignSystem, tracker[0].options);\n        }\n    }\n    /**\n     * Reduces the internal count for a stylesheet and designsystem. If the count becomes zero,\n     * the sheet will be detached\n     */\n    remove(styles, designSystem) {\n        const tracker = this.getTracker(styles, designSystem);\n        if (Array.isArray(tracker)) {\n            tracker[1]--;\n            if (tracker[1] === 0) {\n                const sheet = tracker[0];\n                this.jss.removeStyleSheet(sheet);\n                stylesheetRegistry.remove(sheet);\n                this.registry.get(styles).delete(designSystem);\n            }\n        }\n    }\n    /**\n     * Returns the number of components using a stylesheet with a designSystem\n     */\n    count(styles, designSystem) {\n        const tracker = this.getTracker(styles, designSystem);\n        if (Array.isArray(tracker)) {\n            return tracker[1];\n        }\n        return -1;\n    }\n    /**\n     * Removes all entries\n     */\n    clean() {\n        this.registry = new WeakMap();\n    }\n    /**\n     * Retrieve the sheet tracker tracking the styles and design system\n     */\n    getTracker(styles, designSystem) {\n        const designSystemRegistry = this.registry.get(styles);\n        if (designSystemRegistry instanceof WeakMap) {\n            const tracker = designSystemRegistry.get(designSystem);\n            if (Array.isArray(tracker)) {\n                return tracker;\n            }\n        }\n    }\n    /**\n     * Creates a JSS StyleSheet and attaches it to the DOM\n     */\n    createStyleSheet(styles, designSystem, options = {}) {\n        const stylesheet = typeof styles === \"function\" ? styles(designSystem) : styles;\n        const sheet = this.jss.createStyleSheet(stylesheet, Object.assign({ link: true }, options));\n        sheet.update(designSystem).attach();\n        stylesheetRegistry.add(sheet);\n        return sheet;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}