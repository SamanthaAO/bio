import React from "react";
import Foundation from "@microsoft/fast-components-foundation-react";
import { DisplayNamePrefix } from "../utilities";
import { TreeViewItem as BaseTreeViewItem } from "@microsoft/fast-components-react-base";
class TreeViewItem extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            dragConnect: void 0,
            expandCollapseGlyph: void 0,
            titleContent: void 0,
            children: void 0,
            managedClasses: void 0,
            selected: void 0,
            defaultExpanded: void 0,
            onExpandedChange: void 0,
            onSelected: void 0,
            beforeContent: void 0,
            afterContent: void 0,
        };
        this.generateDefaultExpandCollapseGlyph = (className) => {
            return (React.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", className: className },
                React.createElement("path", { d: "M4.29 12L12 4.29V12H4.29z" })));
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(BaseTreeViewItem, Object.assign({}, this.unhandledProps(), { titleContent: this.generateTitleContent(), dragConnect: this.props.dragConnect, expandCollapseGlyph: this.generateExpandCollapseGlyph(), managedClasses: this.props.managedClasses, selected: this.props.selected, defaultExpanded: this.props.defaultExpanded, onSelected: this.props.onSelected }), this.props.children));
    }
    generateTitleContent() {
        return (React.createElement(React.Fragment, null,
            this.generateBeforeContent(),
            this.props.titleContent,
            this.generateAfterContent()));
    }
    generateAfterContent() {
        if (typeof this.props.afterContent === "function") {
            return this.props.afterContent(this.props.managedClasses.treeViewItem_afterContent);
        }
    }
    generateBeforeContent() {
        if (typeof this.props.beforeContent === "function") {
            return this.props.beforeContent(this.props.managedClasses.treeViewItem_beforeContent);
        }
    }
    generateExpandCollapseGlyph() {
        const { treeViewItem_expandCollapseGlyph, } = this.props.managedClasses;
        return () => {
            if (typeof this.props.expandCollapseGlyph === "function") {
                return this.props.expandCollapseGlyph(treeViewItem_expandCollapseGlyph);
            }
            else {
                return this.generateDefaultExpandCollapseGlyph(treeViewItem_expandCollapseGlyph);
            }
        };
    }
}
TreeViewItem.displayName = `${DisplayNamePrefix}TreeViewItem`;
TreeViewItem.defaultProps = {
    managedClasses: {},
};
export default TreeViewItem;
