import Foundation from "@microsoft/fast-components-foundation-react";
import { Button } from "@microsoft/fast-components-react-base";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
import { FlipperDirection, } from "./flipper.props";
class Flipper extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            label: void 0,
            visibleToAssistiveTechnologies: void 0,
            managedClasses: void 0,
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(Button, Object.assign({}, this.unhandledProps(), this.coerceButtonProps(), { className: this.generateClassNames() }),
            this.renderGlyph(),
            this.props.children));
    }
    /**
     * Generates class names based on props
     */
    generateClassNames() {
        const { flipper, flipper__next, flipper__previous, } = this.props.managedClasses;
        const isNext = this.props.direction !== FlipperDirection.previous;
        return super.generateClassNames(classNames(flipper, [flipper__previous, !isNext], [flipper__next, isNext]));
    }
    /**
     * Generates class names based on props
     */
    coerceButtonProps() {
        const coercedProps = {
            href: void 0,
        };
        if (!this.props.visibleToAssistiveTechnologies) {
            coercedProps["aria-hidden"] = true;
            coercedProps.tabIndex = -1;
        }
        if (this.props.label) {
            coercedProps["aria-label"] = this.props.label;
        }
        return coercedProps;
    }
    renderGlyph() {
        let path;
        if (this.props.direction === FlipperDirection.previous) {
            path = (React.createElement("path", { d: "M11.273 15.977L3.29 8 11.273.023l.704.704L4.71 8l7.266 7.273-.704.704z" }));
        }
        else {
            path = (React.createElement("path", { d: "M4.023 15.273L11.29 8 4.023.727l.704-.704L12.71 8l-7.984 7.977-.704-.704z" }));
        }
        if (path) {
            return (React.createElement("svg", { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", className: classNames(this.props.managedClasses.flipper_glyph) }, path));
        }
    }
}
Flipper.displayName = `${DisplayNamePrefix}Flipper`;
Flipper.defaultProps = {
    direction: FlipperDirection.next,
    managedClasses: {},
};
export default Flipper;
export * from "./flipper.props";
