import Foundation from "@microsoft/fast-components-foundation-react";
import { Button as BaseButton } from "@microsoft/fast-components-react-base";
import { classNames } from "@microsoft/fast-web-utilities";
import { get } from "lodash-es";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
import { ButtonAppearance, } from "./button.props";
/**
 * Button slot options
 */
export var ButtonSlot;
(function (ButtonSlot) {
    ButtonSlot["before"] = "before";
    ButtonSlot["after"] = "after";
})(ButtonSlot || (ButtonSlot = {}));
class Button extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            appearance: void 0,
            beforeContent: void 0,
            afterContent: void 0,
            disabled: void 0,
            href: void 0,
            managedClasses: void 0,
        };
    }
    /**
     * Renders the component
     */
    render() {
        const managedClasses = this.props.managedClasses;
        return (React.createElement(BaseButton, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), managedClasses: managedClasses, href: this.props.href, disabled: this.props.disabled }),
            this.withSlot(ButtonSlot.before),
            this.generateBeforeContent(),
            React.createElement("span", { className: classNames(managedClasses.button_contentRegion) }, this.withoutSlot([ButtonSlot.before, ButtonSlot.after])),
            this.withSlot(ButtonSlot.after),
            this.generateAfterContent()));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const className = this.props.appearance
            ? get(this.props, `managedClasses.button__${ButtonAppearance[this.props.appearance]}`)
            : "";
        return super.generateClassNames(classNames([
            this.props.managedClasses[`button__${ButtonAppearance[this.props.appearance]}`],
            typeof this.props.appearance === "string",
        ]));
    }
    generateBeforeContent() {
        if (typeof this.props.beforeContent === "function") {
            return this.props.beforeContent(classNames(this.props.managedClasses.button_beforeContent));
        }
    }
    generateAfterContent() {
        if (typeof this.props.afterContent === "function") {
            return this.props.afterContent(classNames(this.props.managedClasses.button_afterContent));
        }
    }
}
Button.displayName = `${DisplayNamePrefix}Button`;
Button.defaultProps = {
    managedClasses: {},
};
export default Button;
export * from "./button.props";
