import Foundation from "@microsoft/fast-components-foundation-react";
import { AxisPositioningMode, ViewportPositioner, ViewportPositionerHorizontalPosition, ViewportPositionerVerticalPosition, } from "@microsoft/fast-components-react-base";
import { keyCodeEscape } from "@microsoft/fast-web-utilities";
import { canUseDOM } from "exenv-es6";
import React from "react";
import ReactDOM from "react-dom";
import { DisplayNamePrefix } from "../utilities";
import { FlyoutAxisPositioningMode, FlyoutHorizontalPosition, FlyoutVerticalPosition, } from "./flyout.props";
class Flyout extends Foundation {
    constructor(props) {
        super(props);
        this.handledProps = {
            anchor: void 0,
            children: void 0,
            defaultHorizontalPosition: void 0,
            defaultVerticalPosition: void 0,
            describedBy: void 0,
            visible: void 0,
            fixedAfterInitialPlacement: void 0,
            height: void 0,
            horizontalAlwaysInView: void 0,
            horizontalLockToDefault: void 0,
            horizontalPositioningMode: void 0,
            horizontalThreshold: void 0,
            label: void 0,
            labelledBy: void 0,
            managedClasses: void 0,
            onDismiss: void 0,
            verticalAlwaysInView: void 0,
            verticalLockToDefault: void 0,
            verticalPositioningMode: void 0,
            verticalThreshold: void 0,
            viewport: void 0,
            width: void 0,
            scaleToFit: void 0,
        };
        this.handleWindowClick = (event) => {
            const anchor = this.props.anchor instanceof HTMLElement
                ? this.props.anchor
                : this.props.anchor.current;
            if (typeof this.props.onDismiss === "function" &&
                this.props.visible && // this fires when the prop changes to visible
                !ReactDOM.findDOMNode(this.rootEl.current).contains(event.target) &&
                !ReactDOM.findDOMNode(anchor).contains(event.target)) {
                this.props.onDismiss(event);
            }
        };
        this.handleWindowKeyDown = (event) => {
            if (typeof this.props.onDismiss === "function" &&
                this.props.visible &&
                event.keyCode === keyCodeEscape) {
                this.props.onDismiss(event);
            }
        };
        this.rootEl = React.createRef();
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(ViewportPositioner, Object.assign({}, this.unhandledProps(), { ref: this.rootEl, role: "dialog", "aria-label": this.props.label, "aria-labelledby": this.props.labelledBy, "aria-describedby": this.props.describedBy, "aria-hidden": !this.props.visible, anchor: this.props.anchor, defaultHorizontalPosition: ViewportPositionerHorizontalPosition[FlyoutHorizontalPosition[this.props.defaultHorizontalPosition]], defaultVerticalPosition: ViewportPositionerVerticalPosition[FlyoutVerticalPosition[this.props.defaultVerticalPosition]], disabled: false, fixedAfterInitialPlacement: this.props.fixedAfterInitialPlacement, horizontalAlwaysInView: this.props.horizontalAlwaysInView, horizontalPositioningMode: AxisPositioningMode[FlyoutAxisPositioningMode[this.props.horizontalPositioningMode]], horizontalThreshold: this.props.horizontalThreshold, managedClasses: this.generateManagedClassNames(), verticalAlwaysInView: this.props.verticalAlwaysInView, verticalPositioningMode: AxisPositioningMode[FlyoutAxisPositioningMode[this.props.verticalPositioningMode]], verticalThreshold: this.props.verticalThreshold, viewport: this.props.viewport, style: {
                height: this.props.height,
                width: this.props.width,
            } }), this.props.children));
    }
    /**
     * React life-cycle method
     */
    componentDidMount() {
        if (canUseDOM() && this.props.onDismiss) {
            window.addEventListener("keydown", this.handleWindowKeyDown);
            window.addEventListener("click", this.handleWindowClick);
        }
    }
    /**
     * React life-cycle method
     */
    componentDidUpdate(prevProps) {
        if (canUseDOM()) {
            if (!prevProps.onDismiss && this.props.onDismiss) {
                window.addEventListener("keydown", this.handleWindowKeyDown);
                window.addEventListener("click", this.handleWindowClick);
            }
            else if (prevProps.onDismiss && !this.props.onDismiss) {
                window.removeEventListener("keydown", this.handleWindowKeyDown);
                window.removeEventListener("click", this.handleWindowClick);
            }
        }
    }
    /**
     * React life-cycle method
     */
    componentWillUnmount() {
        if (canUseDOM() && this.props.onDismiss) {
            window.removeEventListener("keydown", this.handleWindowKeyDown);
            window.removeEventListener("click", this.handleWindowClick);
        }
    }
    generateManagedClassNames() {
        const { flyout, flyout__left, flyout__right, flyout__top, flyout__bottom, flyout__horizontalInset, flyout__verticalInset, } = this.props.managedClasses;
        return {
            viewportPositioner: flyout,
            viewportPositioner__left: flyout__left,
            viewportPositioner__right: flyout__right,
            viewportPositioner__top: flyout__top,
            viewportPositioner__bottom: flyout__bottom,
            viewportPositioner__horizontalInset: flyout__horizontalInset,
            viewportPositioner__verticalInset: flyout__verticalInset,
        };
    }
}
Flyout.displayName = `${DisplayNamePrefix}Flyout`;
Flyout.defaultProps = {
    visible: false,
    horizontalPositioningMode: FlyoutAxisPositioningMode.uncontrolled,
    defaultHorizontalPosition: FlyoutHorizontalPosition.uncontrolled,
    verticalPositioningMode: FlyoutAxisPositioningMode.adjacent,
    defaultVerticalPosition: FlyoutVerticalPosition.bottom,
    horizontalAlwaysInView: false,
    verticalAlwaysInView: false,
    fixedAfterInitialPlacement: false,
    height: "128px",
    width: "280px",
    managedClasses: {},
};
export default Flyout;
export * from "./flyout.props";
