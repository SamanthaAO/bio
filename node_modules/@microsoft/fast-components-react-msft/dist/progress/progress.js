import Foundation from "@microsoft/fast-components-foundation-react";
import { Progress as BaseProgress, ProgressType, } from "@microsoft/fast-components-react-base";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
import { ProgressSize, } from "./progress.props";
class Progress extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            children: void 0,
            value: void 0,
            minValue: void 0,
            maxValue: void 0,
            managedClasses: void 0,
            circular: void 0,
            paused: void 0,
            size: void 0,
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(BaseProgress, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), managedClasses: this.props.managedClasses, value: this.props.value, minValue: this.props.minValue, maxValue: this.props.maxValue }), this.renderProgress()));
    }
    /**
     * Create class names
     */
    generateClassNames() {
        const { progress, progress__circular, progress__paused, } = this.props.managedClasses;
        return super.generateClassNames(classNames(progress, [progress__circular, this.props.circular], [progress__paused, this.props.paused]));
    }
    generateCircularValueIndicatorClassNames() {
        const { progress_valueIndicator, progress_valueIndicator__indeterminate, } = this.props.managedClasses;
        return classNames(progress_valueIndicator, [
            progress_valueIndicator__indeterminate,
            !this.props.value,
        ]);
    }
    generateSVGClassNames() {
        return classNames(this.props.managedClasses[`progress_circularSVG__${this.props.size}`]);
    }
    progressIndicatorClasses() {
        const { progress_indicator, progress_indicator__determinate, } = this.props.managedClasses;
        return classNames(progress_indicator, progress_indicator__determinate);
    }
    renderIndeterminateItems() {
        const managedClasses = this.props
            .managedClasses;
        const dotClass = managedClasses.progress_dot;
        return new Array(Progress.indicatorCount)
            .fill(undefined)
            .map((item, index) => {
            return (React.createElement("span", { className: classNames(dotClass, managedClasses[`progress_dot__${index + 1}`]), key: index }));
        });
    }
    renderCircle(className, style) {
        return React.createElement("circle", { className: className, style: style, cx: "8px", cy: "8px", r: "7px" });
    }
    renderCircularBackground() {
        return this.renderCircle(classNames(this.props.managedClasses.progress_indicator));
    }
    renderProgress() {
        const { progress_valueIndicator, progress_indicator, } = this.props.managedClasses;
        if (this.props.circular) {
            const strokeValue = (44 * this.props.value) / 100;
            return [
                React.createElement("div", { slot: ProgressType.determinate, key: "0" },
                    React.createElement("svg", { className: this.generateSVGClassNames(), viewBox: "0 0 16 16" },
                        this.renderCircularBackground(),
                        this.renderCircle(this.generateCircularValueIndicatorClassNames(), { strokeDasharray: `${strokeValue}px 44px` }))),
                React.createElement("div", { slot: ProgressType.indeterminate, key: "1" },
                    React.createElement("svg", { className: this.generateSVGClassNames(), viewBox: "0 0 16 16" },
                        this.renderCircularBackground(),
                        this.renderCircle(this.generateCircularValueIndicatorClassNames()))),
            ];
        }
        return [
            React.createElement("div", { className: this.progressIndicatorClasses(), slot: ProgressType.determinate, key: "0" },
                React.createElement("div", { className: classNames(progress_valueIndicator), style: { width: `${this.props.value}%` } })),
            React.createElement("div", { slot: ProgressType.indeterminate, className: classNames(progress_indicator), key: "1" }, this.renderIndeterminateItems()),
        ];
    }
}
Progress.defaultProps = {
    minValue: 0,
    maxValue: 100,
    circular: false,
    paused: false,
    size: ProgressSize.container,
    managedClasses: {},
};
Progress.displayName = `${DisplayNamePrefix}Progress`;
Progress.indicatorCount = 2;
export default Progress;
export * from "./progress.props";
