import { TabsClassNameContract } from "@microsoft/fast-components-class-name-contracts-base";
import Foundation, { HandledProps } from "@microsoft/fast-components-foundation-react";
import React from "react";
import { CarouselHandledProps, CarouselProps, CarouselState, CarouselUnhandledProps } from "./carousel.props";
declare class Carousel extends Foundation<CarouselHandledProps, CarouselUnhandledProps, CarouselState> {
    static displayName: string;
    static defaultProps: Partial<CarouselProps>;
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps: CarouselProps, prevState: CarouselState): null | Partial<CarouselState>;
    /**
     * Handled props
     */
    protected handledProps: HandledProps<CarouselHandledProps>;
    /**
     * Store a reference to the autoplay timer
     */
    private autoplayTimer;
    /**
     * Store a reference to the root element
     */
    private rootEl;
    /**
     * Initial slide transition direction is none (on carousel load)
     */
    private slideTransitionDirection;
    /**
     * Define constructor
     */
    constructor(props: CarouselProps);
    /**
     * Renders the component
     */
    render(): React.ReactElement<HTMLDivElement>;
    /**
     * React lifecycle hook
     */
    componentDidMount(): void;
    /**
     * React lifecycle hook
     */
    componentDidUpdate(prevProps: CarouselProps, prevState: CarouselState): void;
    /**
     * React lifecycle hook
     */
    componentWillUnmount(): void;
    /**
     * Generate class names
     */
    protected generateClassNames(): string;
    /**
     * Returns tabs managedclasses with new carousel-specific JSS
     */
    protected generateTabsClassNames(): TabsClassNameContract;
    /**
     * Get an array of slides
     * Coerce tab shape
     */
    private readonly slides;
    /**
     * Single slide carousels do not require certain interface elements
     */
    private readonly isMultipleSlides;
    /**
     * Check if it is the FIRST slide for looping
     */
    private readonly isFirstSlide;
    /**
     * Check if it is the LAST slide for looping
     */
    private readonly isLastSlide;
    /**
     * Get the active slide index
     */
    private getActiveIndex;
    /**
     * Get the current slide theme (needed for UI overlay contrast)
     */
    private getSlideTheme;
    /**
     * Set the transition direction based on incoming index
     */
    private setTransitionDirection;
    /**
     * Return transition direction class name
     */
    private assignTransitionDirectionClassName;
    /**
     * Return slide theme class name
     */
    private assignSlideThemeClassName;
    /**
     * Generates previous flipper if more than one slide
     */
    private generatePreviousFlipper;
    /**
     * Generates next flipper if more than one slide
     */
    private generateNextFlipper;
    /**
     * Change active tab
     */
    private handleUpdate;
    /**
     * Handles automation of slide movement
     */
    private autoplayNextSlide;
    /**
     * Move to next slide if applicable
     */
    private nextSlide;
    /**
     * Move to previous slide if applicable
     */
    private previousSlide;
    /**
     * Sets new slide based on position
     */
    private setNewSlidePosition;
}
export default Carousel;
export * from "./carousel.props";
