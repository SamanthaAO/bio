import Foundation from "@microsoft/fast-components-foundation-react";
import { actionTriggerButtonOverrides } from "@microsoft/fast-components-styles-msft";
import { classNames } from "@microsoft/fast-web-utilities";
import { isNil } from "lodash-es";
import React from "react";
import { Button, ButtonAppearance } from "../button";
import { DisplayNamePrefix } from "../utilities";
import { ActionTriggerAppearance, } from "./action-trigger.props";
class ActionTrigger extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            appearance: void 0,
            href: void 0,
            managedClasses: void 0,
            disabled: void 0,
            glyph: void 0,
        };
        this.generateGlyph = () => {
            return this.props.glyph(classNames(this.props.managedClasses.actionTrigger_glyph));
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(Button, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), disabled: this.props.disabled, href: this.props.href, appearance: ButtonAppearance[ActionTriggerAppearance[this.props.appearance]], jssStyleSheet: actionTriggerButtonOverrides, beforeContent: this.generateGlyph }), this.props.children));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { actionTrigger, actionTrigger__disabled, actionTrigger__hasGlyphAndContent, } = this.props.managedClasses;
        return super.generateClassNames(classNames(actionTrigger, [actionTrigger__disabled, this.props.disabled], [
            this.props.managedClasses[`actionTrigger__${this.props.appearance}`],
            typeof this.props.appearance === "string",
        ], [actionTrigger__hasGlyphAndContent, this.hasGlyphAndContent()]));
    }
    /**
     * Checks to see if action trigger is displaying both glyph and content or not
     */
    hasGlyphAndContent() {
        return !isNil(this.props.glyph) && !isNil(this.props.children);
    }
}
ActionTrigger.displayName = `${DisplayNamePrefix}ActionTrigger`;
ActionTrigger.defaultProps = {
    managedClasses: {},
};
export default ActionTrigger;
export * from "./action-trigger.props";
