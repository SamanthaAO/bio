import Foundation from "@microsoft/fast-components-foundation-react";
import { SliderContext, SliderTrackItem as BaseSliderTrackItem, SliderTrackItemAnchor, } from "@microsoft/fast-components-react-base";
import { classNames, Direction } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
class SliderLabel extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            showTickmark: void 0,
            label: void 0,
            valuePositionBinding: void 0,
            managedClasses: void 0,
        };
        this.renderLabel = () => {
            if (this.props.label === undefined) {
                return null;
            }
            return (React.createElement("span", { className: classNames(this.props.managedClasses.sliderLabel_label) }, this.props.label));
        };
        this.renderTickmark = () => {
            if (!this.props.showTickmark) {
                return;
            }
            return (React.createElement("div", { className: classNames(this.props.managedClasses.sliderLabel_tickMark) }));
        };
    }
    render() {
        const { sliderLabel, sliderLabel__horizontal, sliderLabel__vertical, } = this.props.managedClasses;
        return (React.createElement(BaseSliderTrackItem, Object.assign({}, this.unhandledProps(), { minValuePositionBinding: this.props.valuePositionBinding, maxValuePositionBinding: this.props.valuePositionBinding, managedClasses: {
                sliderTrackItem: sliderLabel,
                sliderTrackItem_horizontal: sliderLabel__horizontal,
                sliderTrackItem_vertical: sliderLabel__vertical,
            } }),
            React.createElement("div", { className: this.generatePositioningPanelClassNames() },
                this.renderLabel(),
                this.renderTickmark(),
                this.props.children)));
    }
    /**
     * Create class-names
     */
    generatePositioningPanelClassNames() {
        const { sliderLabel_positioningRegion, sliderLabel__positionMax, sliderLabel__positionMin, sliderLabel__rtl, } = this.props.managedClasses;
        const binding = this.props
            .valuePositionBinding;
        return classNames(sliderLabel_positioningRegion, [sliderLabel__positionMax, binding === SliderTrackItemAnchor.totalRangeMax], [sliderLabel__positionMin, binding === SliderTrackItemAnchor.totalRangeMin], [sliderLabel__rtl, this.context.sliderDirection === Direction.rtl]);
    }
}
SliderLabel.displayName = `${DisplayNamePrefix}SliderLabel`;
SliderLabel.contextType = SliderContext;
SliderLabel.defaultProps = {
    showTickmark: true,
    managedClasses: {},
};
SliderLabel.contextType = SliderContext;
export default SliderLabel;
