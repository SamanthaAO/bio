import React from "react";
import { Omit } from "utility-types";
import { ActionToggleClassNameContract, ManagedClasses } from "@microsoft/fast-components-class-name-contracts-msft";
import { ButtonHandledProps, ButtonManagedClasses, ButtonUnhandledProps } from "../button/button.props";
export declare enum ActionToggleAppearance {
    justified = "justified",
    lightweight = "lightweight",
    outline = "outline",
    primary = "primary",
    stealth = "stealth"
}
export interface ActionToggleManagedClasses extends ManagedClasses<ActionToggleClassNameContract> {
}
export interface ActionToggleHandledProps extends Omit<ButtonHandledProps, "appearance" | keyof ButtonManagedClasses>, ActionToggleManagedClasses {
    /**
     * The action toggle appearance
     */
    appearance?: ActionToggleAppearance;
    /**
     * The action toggle selected state glyph
     */
    selectedGlyph?: (className: string) => React.ReactNode;
    /**
     * The action toggle unselected state glyph
     */
    unselectedGlyph?: (className: string) => React.ReactNode;
    /**
     * The action toggle selected content
     */
    selectedContent?: React.ReactNode;
    /**
     * The action toggle unselected content
     */
    unselectedContent?: React.ReactNode;
    /**
     * The action toggle unselected ARIA text
     */
    unselectedLabel: string;
    /**
     * The action toggle selected ARIA text
     */
    selectedLabel: string;
    /**
     * The onToggle event handler
     */
    onToggle?: (event: React.MouseEvent<HTMLElement>, props: ActionToggleProps) => void;
    /**
     * The action toggle disabled property
     */
    disabled?: boolean;
    /**
     * The action toggle selected state
     */
    selected?: boolean;
}
export interface ActionToggleUnhandledProps extends ButtonUnhandledProps {
}
export declare type ActionToggleProps = ActionToggleHandledProps & ActionToggleUnhandledProps;
