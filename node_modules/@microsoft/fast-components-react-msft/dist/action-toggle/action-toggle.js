import Foundation from "@microsoft/fast-components-foundation-react";
import { actionToggleButtonOverrides } from "@microsoft/fast-components-styles-msft";
import { classNames } from "@microsoft/fast-web-utilities";
import { isBoolean, isFunction, isNil } from "lodash-es";
import React from "react";
import { Button, ButtonAppearance } from "../button";
import { DisplayNamePrefix } from "../utilities";
import { ActionToggleAppearance, } from "./action-toggle.props";
class ActionToggle extends Foundation {
    /**
     * Define constructor
     */
    constructor(props) {
        super(props);
        this.handledProps = {
            managedClasses: void 0,
            appearance: void 0,
            disabled: void 0,
            selected: void 0,
            selectedGlyph: void 0,
            unselectedGlyph: void 0,
            selectedContent: void 0,
            unselectedContent: void 0,
            selectedLabel: void 0,
            unselectedLabel: void 0,
        };
        /**
         * Render Glyphs
         */
        this.renderGlyph = () => {
            let glyph;
            let className;
            if (this.state.selected) {
                glyph = this.props.selectedGlyph;
                className = this.props.managedClasses.actionToggle_selectedGlyph;
            }
            else {
                glyph = this.props.unselectedGlyph;
                className = this.props.managedClasses.actionToggle_unselectedGlyph;
            }
            return isFunction(this.props.selectedGlyph)
                ? glyph(classNames(this.props.managedClasses.actionToggle_glyph, className))
                : null;
        };
        /**
         * Handles onClick
         */
        this.handleToggleChange = (e) => {
            if (!isBoolean(this.props.selected)) {
                this.setState({
                    selected: !this.state.selected,
                });
            }
            if (this.props.onToggle) {
                this.props.onToggle(e, this.props);
            }
        };
        this.state = {
            selected: !!this.props.selected,
        };
    }
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps, prevState) {
        const selected = nextProps.selected;
        return isBoolean(selected) && selected !== prevState.selected
            ? { selected }
            : null;
    }
    /**
     * Renders the component
     */
    render() {
        const selected = this.state.selected;
        return (React.createElement(Button, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), disabled: this.props.disabled, onClick: this.handleToggleChange, "aria-label": selected ? this.props.selectedLabel : this.props.unselectedLabel, appearance: ButtonAppearance[ActionToggleAppearance[this.props.appearance]], jssStyleSheet: actionToggleButtonOverrides, beforeContent: this.renderGlyph }), selected ? this.props.selectedContent : this.props.unselectedContent));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { actionToggle, actionToggle__disabled, actionToggle__selected, actionToggle__hasGlyphAndContent, } = this.props.managedClasses;
        return super.generateClassNames(classNames(actionToggle, this.props.managedClasses[`actionToggle__${this.props.appearance}`], [actionToggle__disabled, this.props.disabled], [actionToggle__selected, this.state.selected], [actionToggle__hasGlyphAndContent, this.hasGlyphAndContent()]));
    }
    /**
     * Checks to see if the toggle is displaying both glyph and content or not
     */
    hasGlyphAndContent() {
        return this.state.selected
            ? !isNil(this.props.selectedGlyph) && !isNil(this.props.selectedContent)
            : !isNil(this.props.unselectedGlyph) && !isNil(this.props.unselectedContent);
    }
}
ActionToggle.displayName = `${DisplayNamePrefix}ActionToggle`;
ActionToggle.defaultProps = {
    managedClasses: {},
};
export default ActionToggle;
export * from "./action-toggle.props";
