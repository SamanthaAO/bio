import Foundation from "@microsoft/fast-components-foundation-react";
import { Tabs as BaseTabs } from "@microsoft/fast-components-react-base";
import { toPx } from "@microsoft/fast-jss-utilities";
import { classNames, Direction } from "@microsoft/fast-web-utilities";
import { canUseDOM } from "exenv-es6";
import { get } from "lodash-es";
import React from "react";
import ReactDOM from "react-dom";
import { DisplayNamePrefix } from "../utilities";
class Pivot extends Foundation {
    /**
     * The constructor
     */
    constructor(props) {
        super(props);
        this.handledProps = {
            label: void 0,
            items: void 0,
            managedClasses: void 0,
        };
        this.handleTabsUpdate = (activeTabId) => {
            this.setState({
                activeId: activeTabId,
            });
            if (typeof this.props.onUpdate === "function") {
                this.props.onUpdate(activeTabId);
            }
        };
        if (Array.isArray(this.props.items)) {
            this.state = {
                offsetX: 0,
                tabPanelIndex: 0,
                activeId: typeof this.props.activeId === "string"
                    ? this.props.activeId
                    : get(this.props.items[0], "id", ""),
            };
        }
        this.tabsRef = React.createRef();
    }
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.activeId && nextProps.activeId !== prevState.activeId) {
            return {
                activeId: nextProps.activeId,
            };
        }
        return null;
    }
    componentDidMount() {
        this.ltr = this.getLTR();
        this.setActiveIndicatorOffset();
        this.prevTabPanelIndex = this.state.tabPanelIndex;
    }
    componentDidUpdate(prevProps, prevState) {
        if (this.ltr !== this.getLTR()) {
            this.setActiveIndicatorOffset();
            this.ltr = this.getLTR();
        }
        if (this.state.activeId !== prevState.activeId) {
            this.setActiveIndicatorOffset();
            this.updateTabPanelIndex();
        }
        if (this.state.tabPanelIndex !== prevState.tabPanelIndex) {
            this.prevTabPanelIndex = this.state.tabPanelIndex;
        }
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(BaseTabs, Object.assign({}, this.unhandledProps(), { ref: this.tabsRef, managedClasses: this.generatePivotClassNames(), activeId: this.state.activeId, onUpdate: this.handleTabsUpdate, items: this.props.items, label: this.props.label }),
            React.createElement("span", { style: { transform: `translateX(${toPx(this.state.offsetX)})` }, className: classNames(this.props.managedClasses.pivot_activeIndicator) })));
    }
    /**
     * Returns tabs managedclasses with new carousel-specific JSS
     */
    generatePivotClassNames() {
        const { pivot, pivot_tabList, pivot_tabContent, pivot_tabPanelContent, pivot_tab, pivot_tab__active, pivot_tabPanel, pivot_tabPanel__hidden, } = this.props.managedClasses;
        return {
            tabs: pivot,
            tabs_tabPanels: this.generateTabPanelsClassNames(),
            tabs_tabList: pivot_tabList,
            tabs_tabContent: pivot_tabContent,
            tabs_tabPanelContent: pivot_tabPanelContent,
            tab: pivot_tab,
            tab__active: pivot_tab__active,
            tabPanel: pivot_tabPanel,
            tabPanel__hidden: pivot_tabPanel__hidden,
        };
    }
    isSelected(element) {
        return element.attributes["aria-selected"].value === "true";
    }
    updateTabPanelIndex() {
        if (canUseDOM() && this.tabsRef.current && Array.isArray(this.props.items)) {
            const tabElement = ReactDOM.findDOMNode(this.tabsRef.current);
            const mytabsArray = Array.prototype.slice.call(tabElement.querySelectorAll("[role='tab']"));
            this.setState({
                tabPanelIndex: mytabsArray.findIndex(this.isSelected),
            });
        }
    }
    generateTabPanelsClassNames() {
        const { pivot_tabPanels, pivot_tabPanels__animatePrevious, pivot_tabPanels__animateNext, } = this.props.managedClasses;
        const indexNotChanged = this.state.tabPanelIndex === this.prevTabPanelIndex;
        const shouldReverse = this.state.tabPanelIndex < this.prevTabPanelIndex;
        return classNames(pivot_tabPanels, [pivot_tabPanels__animatePrevious, shouldReverse], [pivot_tabPanels__animateNext, !shouldReverse && !indexNotChanged]);
    }
    setActiveIndicatorOffset() {
        if (canUseDOM() && this.tabsRef.current && Array.isArray(this.props.items)) {
            const tabElement = ReactDOM.findDOMNode(this.tabsRef.current);
            const mytab = tabElement.querySelector("[aria-selected='true']");
            if (mytab !== null && tabElement !== null) {
                const width = mytab.getBoundingClientRect().width;
                const center = width / 2;
                const offsetX = mytab.getBoundingClientRect().left -
                    tabElement.getBoundingClientRect().left +
                    center;
                if (offsetX !== this.state.offsetX) {
                    this.setState({
                        offsetX,
                    });
                }
            }
        }
    }
    // TODO #1438: Add optional direction prop to Pivot and Horizontal overflow
    /**
     * Gets the direction of the element
     */
    getLTR() {
        if (canUseDOM()) {
            const tabElement = ReactDOM.findDOMNode(this.tabsRef.current);
            return !tabElement
                ? Direction.ltr
                : getComputedStyle(tabElement).direction === Direction.rtl
                    ? Direction.rtl
                    : Direction.ltr;
        }
    }
}
Pivot.displayName = `${DisplayNamePrefix}Pivot`;
Pivot.defaultProps = {
    managedClasses: {},
};
export default Pivot;
