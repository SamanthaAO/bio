import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { SliderContext } from "../slider/slider-context";
import { SliderThumb } from "../slider/slider";
import { SliderOrientation } from "../slider/slider.props";
import { DisplayNamePrefix } from "../utilities";
import { SliderTrackItemAnchor, } from "./slider-track-item.props";
class SliderTrackItem extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            maxValuePositionBinding: void 0,
            minValuePositionBinding: void 0,
            managedClasses: void 0,
        };
        /**
         * Gets the appropriate absolute positioning
         */
        this.applyPositioningValues = () => {
            const minValue = this.getPositionAsPercent(this.props.minValuePositionBinding);
            const maxValue = this.getPositionAsPercent(this.props.maxValuePositionBinding);
            if (this.context.sliderOrientation === SliderOrientation.vertical) {
                return {
                    top: `${100 - maxValue}%`,
                    bottom: `${minValue}%`,
                };
            }
            else if (this.context.sliderDirection === "rtl") {
                return {
                    left: maxValue !== undefined ? `${100 - maxValue}%` : undefined,
                    right: minValue !== undefined ? `${minValue}%` : undefined,
                };
            }
            else {
                return {
                    left: minValue !== undefined ? `${minValue}%` : undefined,
                    right: maxValue !== undefined ? `${100 - maxValue}%` : undefined,
                };
            }
        };
        /**
         *  Returns a percent value to use for positioning based on the selected anchor type
         */
        this.getPositionAsPercent = (anchor) => {
            if (anchor === undefined ||
                typeof this.context.sliderValueAsPercent !== "function" ||
                this.context.sliderState === null) {
                return undefined;
            }
            if (typeof anchor === "number") {
                return this.context.sliderValueAsPercent(anchor);
            }
            switch (anchor) {
                case SliderTrackItemAnchor.selectedRangeMax:
                    return this.context.sliderValueAsPercent((this.context.sliderState.isDragging ||
                        this.context.sliderState.isTouchDragging) &&
                        this.context.sliderState.activeThumb === SliderThumb.upperThumb
                        ? this.context.sliderState.dragValue
                        : this.context.sliderState.upperValue);
                case SliderTrackItemAnchor.selectedRangeMin:
                    return this.context.sliderValueAsPercent((this.context.sliderState.isDragging ||
                        this.context.sliderState.isTouchDragging) &&
                        this.context.sliderState.activeThumb === SliderThumb.lowerThumb
                        ? this.context.sliderState.dragValue
                        : this.context.sliderState.lowerValue);
                case SliderTrackItemAnchor.totalRangeMax:
                    return 100;
                case SliderTrackItemAnchor.totalRangeMin:
                    return 0;
                case SliderTrackItemAnchor.constrainedRangeMax:
                    return this.context.sliderConstrainedRange !== null
                        ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.maxValue)
                        : 100;
                case SliderTrackItemAnchor.constrainedRangeMin:
                    return this.context.sliderConstrainedRange !== null
                        ? this.context.sliderValueAsPercent(this.context.sliderConstrainedRange.minValue)
                        : 0;
            }
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: Object.assign({ position: "absolute" }, this.applyPositioningValues()) }), this.props.children));
    }
    /**
     * Create class-names
     */
    generateClassNames() {
        const { sliderTrackItem, sliderTrackItem_vertical, sliderTrackItem_horizontal, } = this.props.managedClasses;
        const orientation = this.context.sliderOrientation || SliderOrientation.horizontal;
        return super.generateClassNames(classNames(sliderTrackItem, [sliderTrackItem_vertical, orientation === SliderOrientation.vertical], [sliderTrackItem_horizontal, orientation === SliderOrientation.horizontal]));
    }
}
SliderTrackItem.displayName = `${DisplayNamePrefix}SliderTrackItem`;
SliderTrackItem.defaultProps = {
    managedClasses: {},
};
SliderTrackItem.contextType = SliderContext;
SliderTrackItem.contextType = SliderContext;
export default SliderTrackItem;
export * from "./slider-track-item.props";
