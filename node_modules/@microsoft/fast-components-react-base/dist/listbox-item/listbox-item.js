import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames, keyCodeEnter, keyCodeSpace } from "@microsoft/fast-web-utilities";
import React from "react";
import { ListboxContext } from "../listbox/listbox-context";
import { DisplayNamePrefix } from "../utilities";
class ListboxItem extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            disabled: void 0,
            displayString: void 0,
            managedClasses: void 0,
            id: void 0,
            onInvoke: void 0,
            value: void 0,
        };
        /**
         * Check context to determine if this item is selected
         */
        this.isItemSelected = () => {
            let isSelected = false;
            if (this.context.listboxSelectedItems !== undefined) {
                isSelected =
                    this.context.listboxSelectedItems.filter((item) => {
                        return item.id === this.props.id;
                    }).length === 1;
            }
            return isSelected;
        };
        /**
         * Handle the keydown event of the item
         */
        this.handleKeyDown = (e) => {
            if (this.props.disabled) {
                return;
            }
            if (typeof this.props.onKeyDown === "function") {
                this.props.onKeyDown(e);
            }
            if (e.defaultPrevented) {
                return;
            }
            switch (e.keyCode) {
                case keyCodeEnter:
                case keyCodeSpace:
                    this.invokeOption(e);
                    break;
            }
        };
        /**
         * Handle the keydown event of the item
         */
        this.handleClick = (e) => {
            if (this.props.disabled) {
                return;
            }
            if (typeof this.props.onClick === "function") {
                this.props.onClick(e);
            }
            if (e.defaultPrevented) {
                return;
            }
            this.invokeOption(e);
        };
        /**
         * Handle focus event
         */
        this.handleFocus = (e) => {
            if (this.props.disabled) {
                return;
            }
            if (typeof this.context.listboxItemFocused === "function") {
                this.context.listboxItemFocused(this.props, e);
            }
            if (typeof this.props.onFocus === "function") {
                this.props.onFocus(e);
            }
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), role: "option", id: this.props.id, "aria-selected": this.isItemSelected(), "aria-disabled": this.props.disabled, onClick: this.handleClick, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown }), this.props.children));
    }
    /**
     * Create class-names
     */
    generateClassNames() {
        const { listboxItem, listboxItem__disabled, listboxItem__selected, } = this.props.managedClasses;
        return super.generateClassNames(classNames(listboxItem, [listboxItem__disabled, this.props.disabled], [listboxItem__selected, this.isItemSelected()]));
    }
    /**
     * Invoke this option
     */
    invokeOption(event) {
        if (this.context.listboxItemInvoked) {
            this.context.listboxItemInvoked(this.props, event);
        }
        if (typeof this.props.onInvoke === "function") {
            this.props.onInvoke(event, this.props);
        }
    }
}
ListboxItem.displayName = `${DisplayNamePrefix}ListboxItem`;
ListboxItem.contextType = ListboxContext;
ListboxItem.defaultProps = {
    disabled: false,
    managedClasses: {},
};
ListboxItem.contextType = ListboxContext;
export default ListboxItem;
