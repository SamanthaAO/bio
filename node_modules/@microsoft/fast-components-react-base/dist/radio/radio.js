import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
/**
 * Radio slot options
 */
export var RadioSlot;
(function (RadioSlot) {
    RadioSlot["label"] = "label";
})(RadioSlot || (RadioSlot = {}));
class Radio extends Foundation {
    constructor(props) {
        super(props);
        /**
         * Handled props instantiation
         */
        this.handledProps = {
            inputId: void 0,
            checked: void 0,
            disabled: void 0,
            managedClasses: void 0,
            name: void 0,
            onChange: void 0,
            label: void 0,
            value: void 0,
        };
        this.handleRadioChange = (e) => {
            if (typeof this.props.checked !== "boolean") {
                this.setState({ checked: !this.state.checked });
            }
            if (typeof this.props.onChange === "function") {
                this.props.onChange(e);
            }
        };
        this.state = {
            checked: this.props.checked || false,
        };
    }
    static getDerivedStateFromProps(nextProps, prevState) {
        if (typeof nextProps.checked === "boolean" &&
            nextProps.checked !== prevState.checked) {
            return {
                checked: nextProps.checked,
            };
        }
        return null;
    }
    render() {
        const { radio_input, radio_stateIndicator, } = this.props.managedClasses;
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames() }),
            React.createElement("input", { className: classNames(radio_input), type: "radio", id: this.props.inputId, name: this.props.name, onChange: this.handleRadioChange, disabled: this.props.disabled || null, checked: this.state.checked, value: this.props.value }),
            React.createElement("span", { className: classNames(radio_stateIndicator) }),
            this.renderChildrenWithSlot(RadioSlot.label),
            this.renderLabel()));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { radio, radio__disabled, radio__checked, } = this.props.managedClasses;
        return super.generateClassNames(classNames(radio, [radio__disabled, this.props.disabled], [radio__checked, this.state.checked]));
    }
    /**
     * @deprecated - remove in next major version
     */
    renderChildrenWithSlot(slot) {
        const node = this.withSlot(RadioSlot.label);
        return React.Children.map(node, (child, index) => {
            return React.cloneElement(child, {
                className: classNames(child.props.className, this.props.managedClasses.radio_label),
            });
        });
    }
    renderLabel() {
        if (typeof this.props.label === "function") {
            return this.props.label(classNames(this.props.managedClasses.radio_label));
        }
    }
}
Radio.displayName = `${DisplayNamePrefix}Radio`;
Radio.defaultProps = {
    managedClasses: {},
};
export default Radio;
