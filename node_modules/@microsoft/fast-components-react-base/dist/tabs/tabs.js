import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames, keyCodeArrowDown, keyCodeArrowLeft, keyCodeArrowRight, keyCodeArrowUp, keyCodeEnd, keyCodeHome, } from "@microsoft/fast-web-utilities";
import { get } from "lodash-es";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
import Tab from "./tab";
import TabItem from "./tab-item";
import TabPanel from "./tab-panel";
export var TabLocation;
(function (TabLocation) {
    TabLocation[TabLocation["first"] = 0] = "first";
    TabLocation[TabLocation["last"] = 1] = "last";
    TabLocation[TabLocation["previous"] = 2] = "previous";
    TabLocation[TabLocation["next"] = 3] = "next";
})(TabLocation || (TabLocation = {}));
export var TabsSlot;
(function (TabsSlot) {
    TabsSlot["tab"] = "tab";
    TabsSlot["tabItem"] = "tab-item";
    TabsSlot["tabPanel"] = "tab-panel";
})(TabsSlot || (TabsSlot = {}));
class Tabs extends Foundation {
    constructor(props) {
        super(props);
        this.handledProps = {
            activeId: void 0,
            disableTabFocus: void 0,
            label: void 0,
            managedClasses: void 0,
            onUpdate: void 0,
            orientation: void 0,
            tabItemSlot: void 0,
            tabPanelSlot: void 0,
            tabSlot: void 0,
            items: void 0,
        };
        this.renderTabItem = (tabItem, index) => {
            if (this.props.items) {
                return this.getChildrenBySlot(tabItem.props.children, this.getSlot(TabsSlot.tab))[0];
            }
            return React.cloneElement(this.getChildrenBySlot(tabItem.props.children, this.getSlot(TabsSlot.tab))[0], {
                key: tabItem.props.id,
                "aria-controls": tabItem.props.id,
                active: this.state.activeId === tabItem.props.id,
                onClick: this.handleClick,
                onKeyDown: this.handleKeyDown,
                tabIndex: this.state.activeId !== tabItem.props.id ? -1 : 0,
            });
        };
        this.renderTabPanel = (tabItem, index) => {
            if (this.props.items) {
                return this.getChildrenBySlot(tabItem.props.children, this.getSlot(TabsSlot.tabPanel))[0];
            }
            return React.cloneElement(this.getChildrenBySlot(tabItem.props.children, this.getSlot(TabsSlot.tabPanel))[0], {
                key: tabItem.props.id,
                id: tabItem.props.id,
                "aria-labelledby": tabItem.props.id,
                active: this.state.activeId === tabItem.props.id,
            });
        };
        /**
         * Handles the click event on the tab element
         */
        this.handleClick = (e) => {
            if (!this.props.activeId) {
                this.setState({
                    activeId: e.currentTarget.getAttribute("aria-controls"),
                });
            }
            else if (typeof this.props.onUpdate === "function") {
                this.props.onUpdate(e.currentTarget.getAttribute("aria-controls"));
            }
        };
        /**
         * Handles the keydown event on the tab element
         */
        this.handleKeyDown = (e) => {
            switch (e.keyCode) {
                case keyCodeArrowLeft:
                case keyCodeArrowUp:
                    this.activateTab(TabLocation.previous);
                    break;
                case keyCodeArrowRight:
                case keyCodeArrowDown:
                    this.activateTab(TabLocation.next);
                    break;
                case keyCodeHome:
                    this.activateTab(TabLocation.first);
                    break;
                case keyCodeEnd:
                    this.activateTab(TabLocation.last);
                    break;
            }
        };
        /**
         * Gets the current index by tab item ID
         */
        this.getCurrentIndexById = (item) => {
            return item.props.id === this.state.activeId;
        };
        this.tabListRef = React.createRef();
        if (!this.props.items) {
            const items = React.Children.toArray(this.tabItems());
            this.state = {
                activeId: this.props.activeId
                    ? this.props.activeId
                    : items.length > 0
                        ? get(items[0], "props.id")
                        : "",
            };
        }
        else {
            this.state = {
                activeId: "",
            };
        }
    }
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.activeId && nextProps.activeId !== prevState.activeId) {
            return {
                activeId: nextProps.activeId,
            };
        }
        return null;
    }
    /**
     * Renders the component
     */
    render() {
        const tabElements = this.renderTabElements();
        const { tabs_tabList, tabs_tabPanels, } = this.props.managedClasses;
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames() }),
            React.createElement("div", { role: "tablist", ref: this.tabListRef, className: classNames(tabs_tabList), "aria-label": this.props.label, "aria-orientation": this.props.orientation }, tabElements),
            React.createElement("div", { className: classNames(tabs_tabPanels) }, this.renderTabPanels()),
            this.withoutSlot(TabsSlot.tabItem, this.props.children)));
    }
    /**
     * React lifecycle hook
     */
    componentDidUpdate(prevProps) {
        if (typeof this.props.activeId === "string" &&
            this.props.activeId !== prevProps.activeId &&
            this.props.disableTabFocus !== true) {
            const items = React.Children.toArray(this.tabItems());
            const currentItemIndex = items.findIndex(this.getCurrentIndexById);
            // Do nothing if current item index is not found
            if (currentItemIndex !== -1) {
                Array.from(this.tabListRef.current.children)[currentItemIndex].focus();
            }
        }
    }
    /**
     * Generates class names based on props
     */
    generateClassNames() {
        return super.generateClassNames(classNames(this.props.managedClasses.tabs));
    }
    /**
     * Create tab content class names
     */
    generateTabContentClassNames() {
        return classNames(this.props.managedClasses.tabs_tabContent);
    }
    /**
     * Create tab panel content class names
     */
    generateTabPanelContentClassNames() {
        return classNames(this.props.managedClasses.tabs_tabPanelContent);
    }
    /**
     * Create tab class names
     */
    generateTabClassNames() {
        const { tab, tab__active } = this.props.managedClasses;
        return {
            managedClasses: {
                tab: classNames(tab),
                tab__active: classNames(tab__active),
            },
        };
    }
    /**
     * Create tab panel class names
     */
    generateTabPanelClassNames() {
        const { tabPanel, tabPanel__hidden, } = this.props.managedClasses;
        return {
            managedClasses: {
                tabPanel: classNames(tabPanel),
                tabPanel__hidden: classNames(tabPanel__hidden),
            },
        };
    }
    /**
     * Renders the tab elements
     */
    renderTabElements() {
        return React.Children.map(this.tabItems(), this.renderTabItem);
    }
    setActive(tabItem, index) {
        if (this.state.activeId) {
            return this.state.activeId === tabItem.id;
        }
        else {
            return index === 0;
        }
    }
    tabItems() {
        if (this.props.items) {
            return this.props.items.map((tabItem, index) => {
                return (React.createElement(TabItem, { key: tabItem.id, id: tabItem.id, slot: TabsSlot.tabItem },
                    React.createElement(Tab, Object.assign({}, this.generateTabClassNames(), { slot: TabsSlot.tab, key: tabItem.id, "aria-controls": tabItem.id, active: this.setActive(tabItem, index), onClick: this.handleClick, onKeyDown: this.handleKeyDown, tabIndex: this.setActive(tabItem, index) ? 0 : -1 }), tabItem.tab(this.generateTabContentClassNames())),
                    React.createElement(TabPanel, Object.assign({}, this.generateTabPanelClassNames(), { slot: TabsSlot.tabPanel, key: tabItem.id, id: tabItem.id, "aria-labelledby": tabItem.id, active: this.setActive(tabItem, index) }), tabItem.content(this.generateTabPanelContentClassNames()))));
            });
        }
        else {
            return this.getChildrenBySlot(this.props.children, this.getSlot(TabsSlot.tabItem));
        }
    }
    /**
     * Renders the tab panels
     */
    renderTabPanels() {
        return React.Children.map(this.tabItems(), this.renderTabPanel);
    }
    /**
     * Activates a tab
     */
    activateTab(location) {
        const items = React.Children.toArray(this.tabItems());
        const count = items.length;
        const currentItemIndex = React.Children.toArray(items).findIndex(this.getCurrentIndexById);
        let itemIndex;
        switch (location) {
            case TabLocation.first:
                itemIndex = 0;
                break;
            case TabLocation.last:
                itemIndex = count - 1;
                break;
            case TabLocation.previous:
                itemIndex = currentItemIndex > 0 ? currentItemIndex - 1 : count - 1;
                break;
            case TabLocation.next:
                itemIndex = currentItemIndex < count - 1 ? currentItemIndex + 1 : 0;
                break;
        }
        const activeId = get(items[itemIndex], "props.id");
        if (!this.props.activeId) {
            this.setState({
                activeId,
            });
            Array.from(this.tabListRef.current.children)[itemIndex].focus();
        }
        else if (typeof this.props.onUpdate === "function") {
            this.props.onUpdate(activeId);
        }
    }
    /**
     * Gets the slot to use for tab children
     */
    getSlot(slot) {
        switch (slot) {
            case TabsSlot.tab:
                return typeof this.props.tabSlot === "string"
                    ? this.props.tabSlot
                    : TabsSlot.tab;
            case TabsSlot.tabItem:
                return typeof this.props.tabItemSlot === "string"
                    ? this.props.tabItemSlot
                    : TabsSlot.tabItem;
            case TabsSlot.tabPanel:
                return typeof this.props.tabPanelSlot === "string"
                    ? this.props.tabPanelSlot
                    : TabsSlot.tabPanel;
        }
    }
    /**
     * Gets the child by the slot property
     */
    getChildrenBySlot(children, slot) {
        const childBySlot = this.withSlot(slot, children);
        return slot !== this.getSlot(TabsSlot.tabItem)
            ? childBySlot
            : React.Children.map(childBySlot, (node) => {
                return this.isValidTabItem(node) ? node : null;
            });
    }
    /**
     * Return a tab item if it has a tab and tab panel
     */
    isValidTabItem(child) {
        const children = get(child, "props.children");
        return (!!this.getChildrenBySlot(children, this.getSlot(TabsSlot.tab))[0] &&
            !!this.getChildrenBySlot(children, this.getSlot(TabsSlot.tabPanel))[0]);
    }
}
Tabs.defaultProps = {
    disableTabFocus: false,
    managedClasses: {},
};
Tabs.displayName = `${DisplayNamePrefix}Tabs`;
export default Tabs;
