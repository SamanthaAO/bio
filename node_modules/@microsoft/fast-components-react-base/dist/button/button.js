import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
/**
 * Button HTML tags
 */
export var ButtonHTMLTags;
(function (ButtonHTMLTags) {
    ButtonHTMLTags["a"] = "a";
    ButtonHTMLTags["button"] = "button";
})(ButtonHTMLTags || (ButtonHTMLTags = {}));
class Button extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            disabled: void 0,
            href: void 0,
            managedClasses: void 0,
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement(this.tag, Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), href: this.props.href || null }, this.renderDisabledAttribute()), this.props.children));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { button, button__disabled, } = this.props.managedClasses;
        return super.generateClassNames(classNames(button, [button__disabled, this.props.disabled]));
    }
    /**
     * Stores HTML tag for use in render
     */
    renderDisabledAttribute() {
        if (this.props.disabled === true) {
            return this.tag === ButtonHTMLTags.a
                ? { "aria-disabled": true }
                : { disabled: true };
        }
    }
    /**
     * Stores HTML tag for use in render
     */
    get tag() {
        return typeof this.props.href === "string"
            ? ButtonHTMLTags.a
            : ButtonHTMLTags.button;
    }
}
Button.displayName = `${DisplayNamePrefix}Button`;
Button.defaultProps = {
    managedClasses: {},
};
export default Button;
