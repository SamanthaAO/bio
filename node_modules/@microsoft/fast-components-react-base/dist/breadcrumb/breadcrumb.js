import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
class Breadcrumb extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            children: void 0,
            label: void 0,
            separator: void 0,
            managedClasses: void 0,
        };
        /**
         * Render a single child
         */
        this.renderChild = (child, index) => {
            const childCount = React.Children.count(this.props.children);
            let augmentedChild = child;
            const isLastItem = childCount - 1 === index;
            if (this.isClonableElement(child)) {
                const props = {
                    className: classNames(child.props && child.props.className, this.generateItemClassNames(), [this.generateCurrentItemClassNames(), isLastItem]),
                    "aria-current": isLastItem ? "page" : undefined,
                };
                augmentedChild = React.cloneElement(child, props);
            }
            return (React.createElement("li", null,
                augmentedChild,
                typeof this.props.separator === "function" && !isLastItem
                    ? this.props.separator(this.generateSeparatorClassNames())
                    : null));
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement("nav", Object.assign({}, this.unhandledProps(), { "aria-label": this.props.label || null, className: this.generateClassNames() }),
            React.createElement("ol", { className: this.generateItemsContainerClassNames() }, this.renderChildren())));
    }
    /**
     * Create class names
     */
    generateClassNames() {
        return super.generateClassNames(classNames(this.props.managedClasses.breadcrumb));
    }
    /**
     * Create items container class names
     */
    generateItemsContainerClassNames() {
        return classNames(this.props.managedClasses.breadcrumb_itemsContainer);
    }
    /**
     * Create item class names
     */
    generateItemClassNames() {
        return classNames(this.props.managedClasses.breadcrumb_item);
    }
    /**
     * Create current item class names
     */
    generateCurrentItemClassNames() {
        return classNames(this.props.managedClasses.breadcrumb_item__current);
    }
    /**
     * Create separator class names
     */
    generateSeparatorClassNames() {
        return classNames(this.props.managedClasses.breadcrumb_separator);
    }
    /**
     * Render all child elements
     */
    renderChildren() {
        return React.Children.map(this.props.children, this.renderChild);
    }
    isClonableElement(node) {
        return React.isValidElement(node);
    }
}
Breadcrumb.displayName = `${DisplayNamePrefix}Breadcrumb`;
Breadcrumb.defaultProps = {
    managedClasses: {},
};
export default Breadcrumb;
