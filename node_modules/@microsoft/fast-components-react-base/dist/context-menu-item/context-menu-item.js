import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames, keyCodeEnter, keyCodeSpace } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
export var ContextMenuItemRole;
(function (ContextMenuItemRole) {
    ContextMenuItemRole["menuItem"] = "menuitem";
    ContextMenuItemRole["menuItemRadio"] = "menuitemradio";
    ContextMenuItemRole["menuItemCheckbox"] = "menuitemcheckbox";
})(ContextMenuItemRole || (ContextMenuItemRole = {}));
class ContextMenuItem extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            disabled: void 0,
            managedClasses: void 0,
            onInvoke: void 0,
            role: void 0,
        };
        /**
         * Handle the keydown event of the item
         */
        this.handleMenuItemKeyDown = (e) => {
            switch (e.keyCode) {
                case keyCodeEnter:
                case keyCodeSpace:
                    this.handleInvoke(e);
                    break;
            }
            if (typeof this.props.onKeyDown === "function") {
                this.props.onKeyDown(e);
            }
        };
        /**
         * Handle the keydown event of the item
         */
        this.handleMenuItemClick = (e) => {
            this.handleInvoke(e);
            if (typeof this.props.onClick === "function") {
                this.props.onClick(e);
            }
        };
        /**
         * Handle the contextMenu event
         */
        this.handleContextMenu = (e) => {
            e.preventDefault(); // Cancel browser context-menu because the user is clicking the context-menu-item
            this.handleInvoke(e);
            if (typeof this.props.onContextMenu === "function") {
                this.props.onContextMenu(e);
            }
        };
    }
    /**
     * Renders the component
     */
    render() {
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), role: this.props.role, "aria-disabled": this.props.disabled || undefined, onKeyDown: this.handleMenuItemKeyDown, onClick: this.handleMenuItemClick, onContextMenu: this.handleContextMenu }), this.props.children));
    }
    /**
     * Create class-names
     */
    generateClassNames() {
        const { contextMenuItem, contextMenuItem__checkbox, contextMenuItem__radio, contextMenuItem__disabled, } = this.props.managedClasses;
        const role = this.props.role;
        return super.generateClassNames(classNames(contextMenuItem, [
            contextMenuItem__checkbox,
            role === ContextMenuItemRole.menuItemCheckbox,
        ], [contextMenuItem__radio, role === ContextMenuItemRole.menuItemRadio], [contextMenuItem__disabled, this.props.disabled]));
    }
    /**
     * Inform app-authors that the user has invoked the item
     */
    handleInvoke(e) {
        if (typeof this.props.onInvoke === "function" && !this.props.disabled) {
            this.props.onInvoke(e, this.props);
        }
    }
}
ContextMenuItem.displayName = `${DisplayNamePrefix}ContextMenuItem`;
ContextMenuItem.defaultProps = {
    role: ContextMenuItemRole.menuItem,
    disabled: false,
    managedClasses: {},
};
export default ContextMenuItem;
