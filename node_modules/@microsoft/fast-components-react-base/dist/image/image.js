import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import { get } from "lodash-es";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
export var ImageSlot;
(function (ImageSlot) {
    ImageSlot["source"] = "source";
})(ImageSlot || (ImageSlot = {}));
class Image extends Foundation {
    constructor() {
        super(...arguments);
        this.handledProps = {
            managedClasses: void 0,
            alt: void 0,
            sizes: void 0,
            src: void 0,
            srcSet: void 0,
        };
    }
    /**
     * Renders the component
     */
    render() {
        let className = classNames(this.props.managedClasses.image);
        if (!this.props.children) {
            return (React.createElement("img", Object.assign({}, this.unhandledProps(), { className: super.generateClassNames(className), alt: this.props.alt, sizes: this.props.sizes ? this.props.sizes : null, src: this.props.src, srcSet: this.props.srcSet ? this.props.srcSet : null })));
        }
        else {
            className = `${className} ${get(this.props, "managedClasses.image__picture", "")}`;
            return (React.createElement("picture", Object.assign({}, this.unhandledProps(), { className: super.generateClassNames(className) }),
                this.withSlot(ImageSlot.source),
                React.createElement("img", { src: this.props.src, alt: this.props.alt, className: get(this.props, "managedClasses.image_img", "") })));
        }
    }
}
Image.displayName = `${DisplayNamePrefix}Image`;
Image.defaultProps = {
    managedClasses: {},
};
export default Image;
