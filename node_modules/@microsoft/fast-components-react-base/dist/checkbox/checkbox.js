import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import { get } from "lodash-es";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
import { CheckboxSlot, } from "./checkbox.props";
class Checkbox extends Foundation {
    /**
     * Define constructor
     */
    constructor(props) {
        super(props);
        /**
         * Handled props instantiation
         */
        this.handledProps = {
            checked: void 0,
            disabled: void 0,
            inputId: void 0,
            indeterminate: void 0,
            label: void 0,
            managedClasses: void 0,
            name: void 0,
            onChange: void 0,
            value: void 0,
        };
        /**
         * Handles onChange as a controlled component
         */
        this.handleCheckboxChange = (e) => {
            if (typeof this.props.checked !== "boolean") {
                this.setState({ checked: !this.state.checked });
            }
            if (typeof this.props.onChange === "function") {
                this.props.onChange(e);
            }
        };
        this.state = {
            checked: this.props.checked || false,
        };
        this.inputRef = React.createRef();
    }
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps, prevState) {
        if (typeof nextProps.checked === "boolean" &&
            nextProps.checked !== prevState.checked) {
            return {
                checked: nextProps.checked,
            };
        }
        return null;
    }
    /**
     * React life-cycle method
     */
    componentDidMount() {
        this.applyIndeterminateState();
    }
    /**
     * React life-cycle method
     */
    componentDidUpdate() {
        this.applyIndeterminateState();
    }
    /**
     * Renders the component
     */
    render() {
        const { checkbox_input, checkbox_stateIndicator, } = this.props.managedClasses;
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames() }),
            React.createElement("input", { className: classNames(checkbox_input), id: this.props.inputId, name: this.props.name, type: "checkbox", ref: this.inputRef, onChange: this.handleCheckboxChange, disabled: this.props.disabled || null, checked: this.state.checked, value: this.props.value }),
            React.createElement("span", { className: classNames(checkbox_stateIndicator) }),
            this.renderLabelBySlot(),
            this.renderLabel()));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { checkbox, checkbox__disabled, checkbox__checked, checkbox__indeterminate, } = this.props.managedClasses;
        return super.generateClassNames(classNames(checkbox, [checkbox__disabled, this.props.disabled], [checkbox__checked, this.state.checked], [checkbox__indeterminate, this.props.indeterminate]));
    }
    /**
     * @deprecated - remove this method in next major version
     * Render label if it exists
     */
    renderLabelBySlot() {
        return React.Children.map(this.withSlot(CheckboxSlot.label), (label) => {
            let className = this.props.managedClasses.checkbox_label;
            if (typeof className !== "string") {
                return label;
            }
            const labelClassName = get(label, "props.className");
            if (typeof labelClassName === "string") {
                className = `${labelClassName} ${className}`;
            }
            return React.cloneElement(label, { className });
        });
    }
    renderLabel() {
        const { checkbox_label } = this.props.managedClasses;
        if (typeof this.props.label === "function") {
            return this.props.label(classNames(checkbox_label));
        }
    }
    /**
     * Apply indeterminate state to items that are indeterminate.
     * This method should be called after render because it relies on element references.
     */
    applyIndeterminateState() {
        if (this.props.indeterminate && this.inputRef.current) {
            this.inputRef.current.indeterminate = this.props.indeterminate;
        }
    }
}
Checkbox.displayName = `${DisplayNamePrefix}Checkbox`;
Checkbox.defaultProps = {
    managedClasses: {},
};
export default Checkbox;
export * from "./checkbox.props";
