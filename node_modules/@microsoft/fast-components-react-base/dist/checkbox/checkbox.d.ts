import { CheckboxClassNameContract } from "@microsoft/fast-components-class-name-contracts-base";
import Foundation, { HandledProps } from "@microsoft/fast-components-foundation-react";
import React from "react";
import { CheckboxHandledProps, CheckboxProps, CheckboxUnhandledProps } from "./checkbox.props";
/**
 * Checkbox state interface
 */
export interface CheckboxState {
    checked: boolean;
}
declare class Checkbox extends Foundation<CheckboxHandledProps, CheckboxUnhandledProps, CheckboxState> {
    static displayName: string;
    static defaultProps: Partial<CheckboxProps>;
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps: CheckboxProps, prevState: CheckboxState): null | Partial<CheckboxState>;
    /**
     * Handled props instantiation
     */
    protected handledProps: HandledProps<CheckboxHandledProps>;
    /**
     * Provides reference to input
     */
    private inputRef;
    /**
     * Define constructor
     */
    constructor(props: CheckboxProps);
    /**
     * React life-cycle method
     */
    componentDidMount(): void;
    /**
     * React life-cycle method
     */
    componentDidUpdate(): void;
    /**
     * Renders the component
     */
    render(): React.ReactElement<HTMLElement>;
    /**
     * Generates class names
     */
    protected generateClassNames(): string;
    /**
     * @deprecated - remove this method in next major version
     * Render label if it exists
     */
    private renderLabelBySlot;
    private renderLabel;
    /**
     * Apply indeterminate state to items that are indeterminate.
     * This method should be called after render because it relies on element references.
     */
    private applyIndeterminateState;
    /**
     * Handles onChange as a controlled component
     */
    private handleCheckboxChange;
}
export default Checkbox;
export * from "./checkbox.props";
export { CheckboxClassNameContract };
