import Foundation from "@microsoft/fast-components-foundation-react";
import { classNames } from "@microsoft/fast-web-utilities";
import React from "react";
import { DisplayNamePrefix } from "../utilities";
/**
 * Toggle base component
 */
class Toggle extends Foundation {
    /**
     * Define constructor
     */
    constructor(props) {
        super(props);
        this.handledProps = {
            managedClasses: void 0,
            disabled: void 0,
            inputId: void 0,
            labelId: void 0,
            name: void 0,
            selected: void 0,
            selectedMessage: void 0,
            statusMessageId: void 0,
            unselectedMessage: void 0,
            onChange: void 0,
        };
        /**
         * Handles onChange as a controlled component
         */
        this.handleToggleChange = (e) => {
            if (typeof this.props.selected !== "boolean") {
                this.setState({ selected: !this.state.selected });
            }
            if (this.props.onChange) {
                this.props.onChange(e);
            }
        };
        this.state = {
            selected: this.props.selected || false,
        };
    }
    /**
     * React life-cycle method
     */
    static getDerivedStateFromProps(nextProps, prevState) {
        if (typeof nextProps.selected === "boolean" &&
            nextProps.selected !== prevState.selected) {
            return {
                selected: nextProps.selected,
            };
        }
        return null;
    }
    /**
     * Renders the component
     */
    render() {
        const { toggle_toggleButton, toggle_input, toggle_stateIndicator, } = this.props.managedClasses;
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), "aria-disabled": this.props.disabled || null }),
            this.generateLabel(),
            React.createElement("div", { className: classNames(toggle_toggleButton) },
                React.createElement("input", { className: classNames(toggle_input), type: "checkbox", id: this.props.inputId, "aria-describedby": this.props.statusMessageId, disabled: this.props.disabled, name: this.props.name, value: this.generateToggleStateLabel(), onChange: this.handleToggleChange, checked: this.state.selected }),
                React.createElement("span", { className: classNames(toggle_stateIndicator) })),
            this.renderStatusMessage()));
    }
    /**
     * Generates class names
     */
    generateClassNames() {
        const { toggle, toggle__disabled, toggle__checked, } = this.props.managedClasses;
        return super.generateClassNames(classNames(toggle, [toggle__disabled, this.props.disabled], [toggle__checked, this.state.selected]));
    }
    /**
     * Creates proper string based on state
     */
    generateToggleStateLabel() {
        return this.state.selected
            ? this.props.selectedMessage
            : this.props.unselectedMessage;
    }
    /**
     * Generates label if it exists
     */
    generateLabel() {
        if (this.props.labelId || this.props.children) {
            return (React.createElement("label", { className: classNames(this.props.managedClasses.toggle_label), id: this.props.labelId, htmlFor: this.props.inputId }, this.props.children));
        }
    }
    renderStatusMessage() {
        if (this.props.selectedMessage || this.props.unselectedMessage) {
            return (React.createElement("span", { id: this.props.statusMessageId, className: classNames(this.props.managedClasses.toggle_statusMessage) }, this.generateToggleStateLabel()));
        }
    }
}
Toggle.displayName = `${DisplayNamePrefix}Toggle`;
Toggle.defaultProps = {
    managedClasses: {},
};
export default Toggle;
