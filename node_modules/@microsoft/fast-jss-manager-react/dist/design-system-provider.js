/**
 * The DesignSystemProvider is a react component designed to provide design-system configurations to the
 * JSSManager. The provider accepts a single prop that it will make available to all child components through
 * react contexts. If given a design-language, the JSSManager will make the design-language object available
 * to all JSS rules defined as a function
 */
import React from "react";
import { designSystemContext, Provider } from "./context";
import { mergeDesignSystem, } from "@microsoft/fast-jss-manager";
export class DesignSystemProvider extends React.Component {
    constructor(props, context) {
        super(props);
        this.updateDownstreamDesignSystem();
    }
    render() {
        this.updateDownstreamDesignSystem();
        return (React.createElement(Provider, { value: this.downstreamDesignSystem }, this.props.children));
    }
    /**
     * Updates the downstreamDesignSystem if either this.props.designSystem
     * or this.context has changed
     */
    updateDownstreamDesignSystem() {
        let shouldUpdate = false;
        if (this.upstreamDesignSystem !== this.context) {
            this.upstreamDesignSystem = this.context;
            shouldUpdate = true;
        }
        if (this.designSystemOverrides !== this.props.designSystem) {
            this.designSystemOverrides = this.props.designSystem;
            shouldUpdate = true;
        }
        if (shouldUpdate) {
            this.downstreamDesignSystem = this.createDesignSystem();
        }
    }
    /**
     * Merges locally stored context with designSystem props.
     * Returns a new object
     */
    createDesignSystem() {
        return typeof this.props.designSystemMergingFunction === "function"
            ? this.props.designSystemMergingFunction(this.upstreamDesignSystem, this.designSystemOverrides)
            : mergeDesignSystem(this.upstreamDesignSystem, this.designSystemOverrides);
    }
}
DesignSystemProvider.contextType = designSystemContext;
