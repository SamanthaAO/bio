/// <reference types="react" />
import Foundation, { HandledProps } from "@microsoft/fast-components-foundation-react";
import { ColumnHandledProps, ColumnProps, ColumnUnhandledProps } from "./column.props";
export interface ColumnClassNamesContract {
    column?: string;
}
export declare class Column extends Foundation<ColumnHandledProps, ColumnUnhandledProps, {}> {
    static displayName: string;
    /**
     * Define default props
     */
    static defaultProps: Partial<ColumnProps>;
    protected handledProps: HandledProps<ColumnHandledProps>;
    /**
     * Component has mounted
     */
    componentDidMount(): void;
    /**
     * Component will be unmounted
     */
    componentWillUnmount(): void;
    /**
     * Component has updated
     */
    componentDidUpdate(previousProps: ColumnProps): void;
    /**
     * Render the component
     */
    render(): JSX.Element;
    /**
     * Generates the column classes
     */
    protected generateClassNames(): string;
    /**
     * Gets a value from an array where the index retrieved is either the current break-point
     * or the nearest preceding break-point if no entry exists for the current break-point
     */
    private getValueByBreakpoint;
    /**
     * Generates the column-span value
     */
    private generateColumnSpan;
    /**
     * Generates the position of a column
     */
    private generateColumnPosition;
    /**
     * Generates the row that a column should be placed in
     */
    private generateRow;
    private augmentMsGrid;
    /**
     * Generates the style attribute of the column
     */
    private generateStyleAttribute;
    /**
     * Determines if we should be tracking breakpoints based on a set of props
     */
    private shouldTrackBreakpoints;
    /**
     * Force the component to update
     */
    private update;
}
export * from "./column.props";
