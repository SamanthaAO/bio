import React from "react";
import { PaneHandledProps, PaneProps, PaneUnhandledProps } from "./pane.props";
import { ComponentStyles } from "@microsoft/fast-jss-manager-react";
import Foundation, { HandledProps } from "@microsoft/fast-components-foundation-react";
/**
 * The interface for the Pane's state object
 */
export interface PaneState {
    /**
     * Signifies if the pane is currently being resized
     */
    resizing: boolean;
    /**
     * The x-position where users started resizing the pane
     */
    dragReference: number;
    /**
     * The width of the pane
     */
    width: number;
}
export interface PaneClassNamesContract {
    pane?: string;
    pane_resizeHandle?: string;
    pane__resizeWest?: string;
    pane__resizeEast?: string;
    pane__overlay?: string;
    pane__hidden?: string;
}
export declare const paneStyleSheet: ComponentStyles<PaneClassNamesContract, undefined>;
export declare class Pane extends Foundation<PaneHandledProps, PaneUnhandledProps, PaneState> {
    static displayName: string;
    /**
     * The default props of the Pane component
     */
    static defaultProps: Partial<PaneProps>;
    /**
     * All handled props
     */
    protected handledProps: HandledProps<Required<PaneHandledProps>>;
    /**
     * Stores a reference to the pane HTML element
     */
    private rootElement;
    constructor(props: PaneProps);
    /**
     * Return the width of Pane. Sources from props first, and then state if props.width is undefined
     */
    width(): number;
    /**
     * Handle when component is mounted to the DOM
     */
    componentDidMount(): void;
    /**
     * Handle when component is removed from the DOM
     */
    componentWillUnmount(): void;
    /**
     * Handle when component updates
     */
    componentDidUpdate(prevProps: PaneProps, prevState: PaneState): void;
    /**
     * Gets the generated width of the grid pane depending on minWidth, maxWidth, and collapsed state.
     */
    getWidth(): number;
    /**
     * generates the inline style property
     */
    generateStyleAttribute(): React.CSSProperties;
    /**
     * Render the resize button
     */
    renderResizeControl(): React.ReactNode | React.ReactElement<HTMLButtonElement>;
    /**
     * Handle keyPress
     */
    onKeyDown: (e: React.KeyboardEvent<HTMLButtonElement>) => void;
    /**
     * Handle mouseDown
     */
    onMouseDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    /**
     * Handle mouseUp
     */
    onMouseUp: (e: MouseEvent) => void;
    onMouseMove: (e: MouseEvent) => void;
    onWindowResize: (e: UIEvent) => void;
    setWidth(width: number): void;
    render(): React.ReactElement<HTMLDivElement>;
    protected generateClassNames(): string;
    private onResize;
}
export * from "./pane.props";
