import { canUseDOM } from "exenv-es6";
import { defaultBreakpoints, identifyBreakpoint, } from "./breakpoints";
class BreakpointTracker {
    /**
     * Constructor for the BreakpointTracker component.
     * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth
     */
    constructor() {
        /**
         * The default array of breakpoint values
         */
        this._breakpoints = defaultBreakpoints;
        /**
         * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)
         */
        this._defaultBreakpoint = 0;
        /**
         * The subscriptions
         */
        this.subscriptions = [];
        /**
         * Notifies subscribes if a breakpoint threshold has been crossed
         */
        this.update = () => {
            const breakpoint = canUseDOM()
                ? identifyBreakpoint(window.innerWidth, this._breakpoints)
                : this.defaultBreakpoint;
            if (this.breakpoint !== breakpoint) {
                this.breakpoint = breakpoint;
                this.notifySubscribers(this.breakpoint);
            }
            this.openRequestAnimationFrame = false;
        };
        /**
         * Returns the current breakpoint
         */
        this.currentBreakpoint = () => {
            return this.breakpoint;
        };
        /**
         * Request's an animation frame if there are currently no open animation frame requests
         */
        this.requestFrame = () => {
            if (this.openRequestAnimationFrame) {
                return;
            }
            this.openRequestAnimationFrame = true;
            window.requestAnimationFrame(this.update);
        };
        if (canUseDOM()) {
            this.breakpoint = identifyBreakpoint(window.innerWidth, this._breakpoints);
            window.addEventListener("resize", this.requestFrame);
        }
        else {
            this.breakpoint = this.defaultBreakpoint;
        }
    }
    /**
     * Gets breakpoint values
     */
    get breakpoints() {
        return this._breakpoints;
    }
    /**
     * Sets breakpoint values
     */
    set breakpoints(breakpointConfig) {
        this._breakpoints = breakpointConfig;
        this.update();
    }
    /**
     * Gets the default breakpoint value
     */
    get defaultBreakpoint() {
        return this._defaultBreakpoint;
    }
    /**
     * Sets the default breakpoint value
     */
    set defaultBreakpoint(breakpoint) {
        this._defaultBreakpoint = breakpoint;
        this.update();
    }
    /**
     * Subscribes a callback to be called when breakpoints change
     */
    subscribe(callback) {
        if (!this.subscriptions.includes(callback)) {
            this.subscriptions.push(callback);
        }
    }
    /**
     * Unsubscribes a callback from the breakpoint tracker
     */
    unsubscribe(callback) {
        this.subscriptions = this.subscriptions.filter((subscription) => callback !== subscription);
    }
    /**
     * Call all subscribed callbacks
     */
    notifySubscribers(breakpoint) {
        this.subscriptions.forEach((subscription) => {
            subscription(breakpoint);
        });
    }
}
export default new BreakpointTracker();
