import { Breakpoint, Breakpoints } from "./breakpoints";
export declare type BreakpointTrackerCallback = (breakpoint: Breakpoint) => void;
declare class BreakpointTracker {
    /**
     * The default array of breakpoint values
     */
    private _breakpoints;
    /**
     * The current breakpoint.
     */
    private breakpoint;
    /**
     * Default breakpoint that can be set, used when the DOM is unavailable (useful for server side rendering)
     */
    private _defaultBreakpoint;
    /**
     * Track if we have an open animation frame request
     */
    private openRequestAnimationFrame;
    /**
     * The subscriptions
     */
    private subscriptions;
    /**
     * Constructor for the BreakpointTracker component.
     * @param defaultBreakpoint?: number - optional breakpoint that can be used instead of window.innerWidth
     */
    constructor();
    /**
     * Gets breakpoint values
     */
    /**
    * Sets breakpoint values
    */
    breakpoints: Breakpoints;
    /**
     * Gets the default breakpoint value
     */
    /**
    * Sets the default breakpoint value
    */
    defaultBreakpoint: Breakpoint;
    /**
     * Subscribes a callback to be called when breakpoints change
     */
    subscribe(callback: BreakpointTrackerCallback): void;
    /**
     * Unsubscribes a callback from the breakpoint tracker
     */
    unsubscribe(callback: BreakpointTrackerCallback): void;
    /**
     * Notifies subscribes if a breakpoint threshold has been crossed
     */
    update: () => void;
    /**
     * Returns the current breakpoint
     */
    currentBreakpoint: () => number;
    /**
     * Call all subscribed callbacks
     */
    notifySubscribers(breakpoint: Breakpoint): void;
    /**
     * Request's an animation frame if there are currently no open animation frame requests
     */
    private requestFrame;
}
declare const _default: BreakpointTracker;
export default _default;
