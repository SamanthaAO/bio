import React from "react";
import { RowHandledProps, RowProps } from "./row.props";
import { ComponentStyles } from "@microsoft/fast-jss-manager-react";
import Foundation, { HandledProps } from "@microsoft/fast-components-foundation-react";
export declare const east: string;
export declare const west: string;
export declare const north: string;
export declare const south: string;
/**
 * The interface for the Row's state object
 */
export interface RowState {
    /**
     * Signifies if the row is currently being resized
     */
    resizing: boolean;
    /**
     * The y-position where users started resizing the row
     */
    dragReference: number;
    /**
     * The height of the row
     */
    height: number;
}
export interface RowClassNamesContract {
    row?: string;
    row__fill?: string;
    row_resizeHandle?: string;
    row__resizeNorth?: string;
    row__resizeSouth?: string;
    row__overlay?: string;
    row__hidden?: string;
}
export declare const rowStyleSheet: ComponentStyles<RowClassNamesContract, undefined>;
/**
 * Grid Row - use this to create rows of pane/canvas content or other content.
 */
export declare class Row extends Foundation<RowProps, React.HTMLAttributes<HTMLDivElement>, RowState> {
    static displayName: string;
    static defaultProps: Partial<RowProps>;
    protected handledProps: HandledProps<Required<RowHandledProps>>;
    /**
     * Stores a reference to the pane HTML element
     */
    private rootElement;
    constructor(props: RowProps);
    /**
     * Return the height of row. Sources from props first, and then state if props.height is undefined
     */
    height(): number;
    /**
     * Handle when component updates
     */
    componentDidUpdate(prevProps: RowProps, prevState: RowState): void;
    /**
     * Gets the generated height of the grid row depending on minHeight, maxHeight, and collapsed state.
     */
    getHeight(): number;
    /**
     * generates the inline style property
     */
    generateStyleAttribute(): React.CSSProperties;
    /**
     * Render the resize button
     */
    renderResizeControl(): React.ReactNode | React.ReactElement<HTMLButtonElement>;
    /**
     * Handle keyPress
     */
    onKeyDown: (e: React.KeyboardEvent<HTMLButtonElement>) => void;
    /**
     * Handle mouseDown
     */
    onMouseDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    /**
     * Handle mouseUp
     */
    onMouseUp: (e: MouseEvent) => void;
    onMouseMove: (e: MouseEvent) => void;
    setHeight(height: number): void;
    render(): React.ReactElement<HTMLDivElement>;
    protected generateClassNames(): string;
    private onResize;
}
export * from "./row.props";
