import React from "react";
import { throttle } from "lodash-es";
import { classNames, keyCodeArrowDown, keyCodeArrowUp, } from "@microsoft/fast-web-utilities";
import { RowResizeDirection, } from "./row.props";
import { toPx } from "@microsoft/fast-jss-utilities";
import Foundation from "@microsoft/fast-components-foundation-react";
import { canUseDOM } from "exenv-es6";
export const east = "east";
export const west = "west";
export const north = "north";
export const south = "south";
export const rowStyleSheet = {
    row: {
        position: "relative",
        display: "flex",
        "flex-direction": "row",
        "flex-basis": "auto",
    },
    row__fill: {
        flex: "1",
        overflow: "hidden",
    },
    row_resizeHandle: {
        position: "absolute",
        padding: "0",
        opacity: "0",
        left: "0",
        height: toPx(8),
        width: "100%",
        "z-index": "1",
        transition: "transform .04s ease-in-out",
        outline: "none",
        transform: "scale(1, .5)",
        "&:hover": {
            cursor: "ns-resize",
        },
        "&:focus": {
            opacity: "1",
            transform: "scale(1)",
        },
        "&:active": {
            opacity: "1",
            transform: "scale(1)",
        },
    },
    row__resizeNorth: {
        "& $row_resizeHandle": {
            top: "-4px",
        },
    },
    row__resizeSouth: {
        "& $row_resizeHandle": {
            bottom: "-4px",
        },
    },
    row__overlay: {
        position: "absolute",
        width: "100%",
        "z-index": "2",
    },
    row__hidden: {
        display: "none",
    },
};
/**
 * Grid Row - use this to create rows of pane/canvas content or other content.
 */
export class Row extends Foundation {
    constructor(props) {
        super(props);
        this.handledProps = {
            collapsed: void 0,
            collapsedHeight: void 0,
            fill: void 0,
            height: void 0,
            hidden: void 0,
            id: void 0,
            initialHeight: void 0,
            managedClasses: void 0,
            maxHeight: void 0,
            minHeight: void 0,
            onResize: void 0,
            resizeControl: void 0,
            overlay: void 0,
            resizable: void 0,
            resizeFrom: void 0,
        };
        /**
         * Handle keyPress
         */
        this.onKeyDown = (e) => {
            const isShift = e.shiftKey;
            const resizeFromNorth = this.props.resizeFrom === RowResizeDirection.north;
            const offset = isShift ? 10 : 1;
            let height = this.getHeight();
            switch (e.keyCode) {
                case keyCodeArrowDown:
                    height = resizeFromNorth ? height - offset : height + offset;
                    break;
                case keyCodeArrowUp:
                    height = resizeFromNorth ? height + offset : height - offset;
                    break;
                default:
                    break;
            }
            this.setHeight(height);
            // Fire the resize callback
            this.onResize(e, height);
        };
        /**
         * Handle mouseDown
         */
        this.onMouseDown = (e) => {
            // only listen for left click
            if (e.button !== 0) {
                return;
            }
            this.setState({
                resizing: true,
                dragReference: e.pageY,
            });
        };
        /**
         * Handle mouseUp
         */
        this.onMouseUp = (e) => {
            // only listen for left click
            if (e.button !== 0) {
                return;
            }
            this.setState({
                resizing: false,
                dragReference: null,
            });
        };
        this.onMouseMove = (e) => {
            if (!this.state.resizing) {
                return;
            }
            const offset = this.state.dragReference - e.pageY;
            const updatedHeight = this.props.resizeFrom === north
                ? this.height() + offset
                : this.height() - offset;
            if (updatedHeight <= this.props.minHeight ||
                updatedHeight >= this.props.maxHeight) {
                return;
            }
            // Fire the resize callback
            this.onResize(e, updatedHeight);
            this.setState({
                dragReference: e.pageY,
            });
            this.setHeight(updatedHeight);
        };
        this.onResize = (e, height) => {
            if (typeof this.props.onResize === "function") {
                this.props.onResize(e, height);
            }
        };
        this.state = {
            resizing: false,
            dragReference: null,
            height: this.props.initialHeight,
        };
        this.onResize = throttle(this.onResize, 16);
        this.onMouseMove = throttle(this.onMouseMove, 16);
        this.rootElement = React.createRef();
    }
    /**
     * Return the height of row. Sources from props first, and then state if props.height is undefined
     */
    height() {
        return this.props.height || this.state.height;
    }
    /**
     * Handle when component updates
     */
    componentDidUpdate(prevProps, prevState) {
        if (canUseDOM()) {
            if (this.state.resizing && !prevState.resizing) {
                document.addEventListener("mouseup", this.onMouseUp);
                document.addEventListener("mousemove", this.onMouseMove);
            }
            else if (!this.state.resizing && prevState.resizing) {
                document.removeEventListener("mouseup", this.onMouseUp);
                document.removeEventListener("mousemove", this.onMouseMove);
            }
        }
    }
    /**
     * Gets the generated height of the grid row depending on minHeight, maxHeight, and collapsed state.
     */
    getHeight() {
        if (this.props.collapsed) {
            return this.props.collapsedHeight;
        }
        else if (this.height() <= this.props.minHeight) {
            return this.props.minHeight;
        }
        else if (this.height() >= this.props.maxHeight) {
            return this.props.maxHeight;
        }
        else {
            return this.height();
        }
    }
    /**
     * generates the inline style property
     */
    generateStyleAttribute() {
        const height = toPx(this.getHeight());
        const styles = {};
        styles.minHeight = this.props.collapsed
            ? this.props.collapsedHeight
            : this.props.resizable
                ? toPx(this.props.minHeight)
                : height;
        if (this.props.overlay) {
            styles.height = height;
        }
        else {
            styles.flexBasis = height;
        }
        return Object.assign(styles, this.props.style);
    }
    /**
     * Render the resize button
     */
    renderResizeControl() {
        if (!this.props.resizable || this.props.collapsed) {
            return null;
        }
        const resizeProps = {
            className: this.props.managedClasses.row_resizeHandle,
            onMouseDown: this.onMouseDown,
            onKeyDown: this.onKeyDown,
            role: "separator",
        };
        if (typeof this.props.resizeControl === "function") {
            return this.props.resizeControl(resizeProps);
        }
        else {
            return React.createElement("button", Object.assign({}, resizeProps));
        }
    }
    setHeight(height) {
        this.setState({
            height,
        });
    }
    render() {
        return (React.createElement("div", Object.assign({}, this.unhandledProps(), { className: this.generateClassNames(), style: this.generateStyleAttribute(), ref: this.rootElement, id: this.props.id, "aria-hidden": this.props.hidden }),
            this.props.children,
            this.renderResizeControl()));
    }
    generateClassNames() {
        const { row, row__fill, row__resizeNorth, row__resizeSouth, row__overlay, row__hidden, } = this.props.managedClasses;
        const resizeFrom = this.props.resizeFrom;
        const classes = classNames(row, [row__resizeNorth, resizeFrom === RowResizeDirection.north], [row__resizeSouth, resizeFrom === RowResizeDirection.south], [row__overlay, this.props.overlay], [row__hidden, this.props.hidden], [row__fill, this.props.fill]);
        return super.generateClassNames(classes);
    }
}
Row.displayName = "Row";
Row.defaultProps = {
    fill: false,
    initialHeight: 40,
    collapsedHeight: 40,
    minHeight: 40,
    maxHeight: 800,
    resizable: false,
    collapsed: false,
    overlay: false,
    hidden: false,
    managedClasses: {},
};
export * from "./row.props";
