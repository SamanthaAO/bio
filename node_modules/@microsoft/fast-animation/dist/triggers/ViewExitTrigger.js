"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var isElementInView_1 = require("../utilities/isElementInView");
var ScrollBase_1 = require("./ScrollBase");
/**
 * Utility for registering element/callback pairs where the callback will be called when the element exits the view-port
 */
var ViewExitTrigger = /** @class */ (function (_super) {
    __extends(ViewExitTrigger, _super);
    function ViewExitTrigger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Check if elements are in view-port and apply scroll method if they are
     */
    ViewExitTrigger.prototype.update = function () {
        var _this = this;
        _super.prototype.update.call(this);
        this.subscriptions.forEach(function (subscription, index) {
            var inView = isElementInView_1.default(subscription.element);
            // If the element is out of view but previously was in view
            if (!inView && subscription.inView) {
                subscription.callback(_this.scrollDistance);
            }
            if (inView !== subscription.inView) {
                subscription.inView = inView;
            }
        });
    };
    return ViewExitTrigger;
}(ScrollBase_1.default));
exports.default = ViewExitTrigger;
