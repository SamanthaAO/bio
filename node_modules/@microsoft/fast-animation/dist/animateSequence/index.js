"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var invokeFunctionForEach_1 = require("../utilities/invokeFunctionForEach");
var AnimateSequence = /** @class */ (function () {
    function AnimateSequence(animations) {
        var _this = this;
        /**
         * Play the sequence of animations
         */
        this.play = function () {
            _this.applySequencedCallback(_this.animations, "play");
        };
        /**
         * Play the sequence in reverse
         */
        this.reverse = function () {
            _this.applySequencedCallback(_this.animations.reverse(), "reverse");
        };
        /**
         * Pauses all animations in the sequence
         */
        this.pause = function () {
            invokeFunctionForEach_1.invokeFunctionForEach(_this.animations, "pause");
        };
        /**
         * Finishes all animations in the sequence
         */
        this.finish = function () {
            invokeFunctionForEach_1.invokeFunctionForEach(_this.animations, "finish");
        };
        /**
         * Cancels all animations in the sequence
         */
        this.cancel = function () {
            invokeFunctionForEach_1.invokeFunctionForEach(_this.animations, "cancel");
        };
        this.animations = animations;
    }
    /**
     * Sequences a set of animations and calls the specified method
     */
    AnimateSequence.prototype.applySequencedCallback = function (animations, method) {
        var _this = this;
        var animationCount = animations.length;
        if (animationCount <= 0) {
            return;
        }
        animations.forEach(function (animation, index) {
            // If this is not the last animation, format animation sequence chain
            if (index < animationCount - 1) {
                animation.onFinish = _this.animations[index + 1][method];
            }
            else {
                // Else attach onFinish or nullify any existing onFinish on the animation
                animation.onFinish = _this.onFinish || void 0;
            }
        });
        animations[0][method]();
    };
    return AnimateSequence;
}());
exports.default = AnimateSequence;
