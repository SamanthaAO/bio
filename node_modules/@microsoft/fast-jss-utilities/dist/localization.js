/**
 * Expose ltr and rtl strings
 */
export var Direction;
(function (Direction) {
    Direction["ltr"] = "ltr";
    Direction["rtl"] = "rtl";
})(Direction || (Direction = {}));
/**
 * Localizes top/left/bottom/right formatted arguments, such as the format used by CSS's padding and margin
 * properties.
 * eg. when dir is RTL, "2px 3px 4px 5px" -> "2px 5px 4px 3px"
 */
export function localizeSpacing(dir) {
    return (value) => {
        if (typeof value !== "string") {
            return "";
        }
        const space = " ";
        const split = value.split(space);
        return split.length !== 4
            ? value
            : dir === Direction.rtl
                ? [split[0], split[3], split[2], split[1]].join(space)
                : value;
    };
}
/**
 * Returns a css property based on a given direction value
 */
export function applyLocalizedProperty(ltrProperty, rtlProperty, dir) {
    return dir === Direction.ltr ? ltrProperty : rtlProperty;
}
/**
 * Utility for returning one of two values, where the predicate is the
 * direction property on the design-system. If provided values are functions,
 * the function will return the return value of the function invoked with
 * the design system
 */
export function directionSwitch(ltr, rtl) {
    return (designSystem) => {
        const dir = designSystem && designSystem.direction
            ? designSystem.direction
            : Direction.ltr;
        const value = dir === Direction.rtl ? rtl : ltr;
        return typeof value === "function"
            ? value(designSystem)
            : value;
    };
}
