import { applyCornerRadius } from "../utilities/border";
import { format, toPx } from "@microsoft/fast-jss-utilities";
import { neutralFillHover, neutralFillInputActive, neutralFillInputHover, neutralFillInputRest, neutralFillRest, neutralFocus, neutralForegroundHint, neutralForegroundRest, neutralOutlineActive, neutralOutlineHover, neutralOutlineRest, } from "../utilities/color";
import { horizontalSpacing } from "../utilities/density";
import { applyDisabledState } from "../utilities/disabled";
import { applyScaledTypeRamp } from "../utilities/typography";
import { applyFontWeightNormal } from "../utilities/fonts";
import { outlineWidth } from "../utilities/design-system";
import { HighContrastColor, highContrastDisabledBorder, highContrastOptOutProperty, highContrastOutlineFocus, highContrastSelector, } from "../utilities/high-contrast";
/**
 * Shared input field styles
 */
export function inputFieldStyles(config /* @deprecated - argument is no longer necessary */) {
    return Object.assign({}, applyScaledTypeRamp("t7"), applyFontWeightNormal(), { background: neutralFillInputRest, border: format("{0} solid {1}", toPx(outlineWidth), neutralOutlineRest), color: neutralForegroundRest, "font-family": "inherit", "box-sizing": "border-box", padding: format("0 {0}", horizontalSpacing(outlineWidth)) }, applyCornerRadius(), { margin: "0", transition: "all 0.2s ease-in-out", "&:hover:enabled": {
            background: neutralFillInputHover,
            "border-color": neutralOutlineHover,
            [highContrastSelector]: {
                background: HighContrastColor.buttonBackground,
                border: format("{0} solid {1}", toPx(outlineWidth), () => HighContrastColor.selectedBackground),
            },
        }, "&:active:enabled": {
            background: neutralFillInputActive,
            "border-color": neutralOutlineActive,
        }, "&:focus:enabled": Object.assign({ "box-shadow": format("0 0 0 1px {0} inset", neutralFocus), "border-color": neutralFocus, outline: "none" }, highContrastOutlineFocus), "&:disabled": Object.assign({}, applyDisabledState(), highContrastDisabledBorder), "&::placeholder": {
            color: neutralForegroundHint(neutralFillInputRest),
            [highContrastSelector]: {
                color: HighContrastColor.disabledText,
            },
        }, [highContrastSelector]: Object.assign({}, highContrastOptOutProperty, { background: HighContrastColor.buttonBackground, "border-color": HighContrastColor.buttonText, color: HighContrastColor.buttonText }) });
}
export function filledInputFieldStyles() {
    return Object.assign({}, inputFieldStyles(), { background: neutralFillRest, border: format("{0} solid transparent", toPx(outlineWidth)), "&:hover:enabled": {
            background: neutralFillHover,
            "border-color": "transparent",
            [highContrastSelector]: {
                background: HighContrastColor.buttonBackground,
                border: format("{0} solid {1}", toPx(outlineWidth), () => HighContrastColor.selectedBackground),
            },
        }, "&:active:enabled": {
            "border-color": "transparent",
        }, "&:focus:enabled": {
            "border-color": neutralFocus,
        }, "&::placeholder": {
            color: neutralForegroundHint(neutralFillRest),
            [highContrastSelector]: {
                color: HighContrastColor.disabledText,
            },
        }, [highContrastSelector]: Object.assign({}, highContrastOptOutProperty, { background: HighContrastColor.buttonBackground, "border-color": HighContrastColor.buttonText }) });
}
