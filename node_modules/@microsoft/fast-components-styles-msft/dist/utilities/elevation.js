import { toPx } from "@microsoft/fast-jss-utilities";
import { black } from "../utilities/color/color-constants";
import { parseColorString } from "../utilities/color/common";
import { ColorRGBA64, rgbToRelativeLuminance } from "@microsoft/fast-colors";
import { backgroundColor } from "./design-system";
/**
 * The MSFT elevation values
 */
export var ElevationMultiplier;
(function (ElevationMultiplier) {
    ElevationMultiplier[ElevationMultiplier["e1"] = 1] = "e1";
    ElevationMultiplier[ElevationMultiplier["e2"] = 2] = "e2";
    ElevationMultiplier[ElevationMultiplier["e3"] = 3] = "e3";
    ElevationMultiplier[ElevationMultiplier["e4"] = 4] = "e4";
    ElevationMultiplier[ElevationMultiplier["e5"] = 6] = "e5";
    ElevationMultiplier[ElevationMultiplier["e6"] = 8] = "e6";
    ElevationMultiplier[ElevationMultiplier["e7"] = 9] = "e7";
    ElevationMultiplier[ElevationMultiplier["e8"] = 12] = "e8";
    ElevationMultiplier[ElevationMultiplier["e9"] = 16] = "e9";
    ElevationMultiplier[ElevationMultiplier["e10"] = 24] = "e10";
    ElevationMultiplier[ElevationMultiplier["e11"] = 32] = "e11";
    ElevationMultiplier[ElevationMultiplier["e12"] = 40] = "e12";
    ElevationMultiplier[ElevationMultiplier["e13"] = 48] = "e13";
    ElevationMultiplier[ElevationMultiplier["e14"] = 64] = "e14";
    ElevationMultiplier[ElevationMultiplier["e15"] = 80] = "e15";
    ElevationMultiplier[ElevationMultiplier["e16"] = 96] = "e16";
    ElevationMultiplier[ElevationMultiplier["e17"] = 192] = "e17";
})(ElevationMultiplier || (ElevationMultiplier = {}));
/**
 * Ambient shadow config
 */
export const ambientShadowConfig = {
    blurMultiplier: 0.225,
    blurBase: 2,
    xOffsetMultiplier: 0,
    yOffsetMultiplier: 0,
    opacity: 0.11,
};
/**
 * Directional shadow config
 */
export const directionalShadowConfig = {
    blurMultiplier: 0.9,
    blurBase: 0,
    xOffsetMultiplier: 0,
    yOffsetMultiplier: 0.4,
    opacity: 0.13,
};
/**
 * Apply elevation shadow treatment to a component.
 *
 * @param elevationValue The number of pixels of depth or an ElevationMultiplier value.
 */
export function applyElevation(elevationValue) {
    return { "box-shadow": combinedShadow(elevationValue) };
}
function combinedShadow(elevationValue, color = black) {
    return (designSystem) => {
        const fn = elevationShadow.bind(null, elevationValue, color);
        return [directionalShadowConfig, ambientShadowConfig]
            .map((conf) => fn(conf)(designSystem))
            .join(", ");
    };
}
/**
 * Apply elevation
 * Used to apply elevation shadow treatment to a component
 *
 * @deprecated Use applyElevation.
 */
export function elevation(elevationValue, color = black) {
    return (config) => {
        return {
            "box-shadow": combinedShadow(elevationValue, color),
        };
    };
}
/**
 * Generate Elevation Shadow
 * Generates a string representing a box shadow value
 */
export function elevationShadow(elevationValue, color, shadowConfig) {
    return (config) => {
        const { r, g, b } = parseColorString(color);
        const { xOffsetMultiplier, yOffsetMultiplier, opacity, blurMultiplier, blurBase = 0, } = shadowConfig;
        // TODO: (Breaking) Remove default https://github.com/microsoft/fast-dna/issues/2469
        const lum = rgbToRelativeLuminance(parseColorString(backgroundColor(config)));
        const opacityMultiple = 2 - lum; // white (1) = 1; black (0) = 2;
        return [xOffsetMultiplier, yOffsetMultiplier]
            .map((val) => parseFloat((val * elevationValue).toFixed(1)))
            .concat(blurBase + blurMultiplier * elevationValue)
            .map(toPx)
            .concat(new ColorRGBA64(r, g, b, opacity * opacityMultiple).toStringWebRGBA())
            .join(" ");
    };
}
