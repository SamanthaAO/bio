import { toPx } from "@microsoft/fast-jss-utilities";
import { densityCategorySwitch } from "./density";
import { clamp } from "lodash-es";
/**
 * The type ramp configuration
 */
export const typeRamp = [
    [60, 72],
    [46, 56],
    [34, 44],
    [28, 36],
    [20, 28],
    [16, 24],
    [14, 20],
    [12, 16],
    [10, 16],
].reduce((accum, val, index) => Object.assign(accum, {
    [`t${index + 1}`]: { fontSize: val[0], lineHeight: val[1] },
}), {});
/**
 * Scales a typeramp ID by density
 */
function scaleTypeRampId(key) {
    return (designSystem) => {
        const typeConfigNumber = parseInt(key.replace("t", ""), 10);
        const densityOffset = densityCategorySwitch(-1, 0, 1)(designSystem);
        const size = clamp(typeConfigNumber - densityOffset, 1, 9);
        return sanitizeTypeRampId("t".concat(size.toString()));
    };
}
/*
 * Ensures that a TypeRamp key is in the TypeRamp
 */
function sanitizeTypeRampId(key) {
    return typeRamp.hasOwnProperty(key) ? key : "t7";
}
/**
 * Retrieves the font-size from a TypeRamp ID
 */
export function getFontSize(key) {
    return typeRamp[sanitizeTypeRampId(key)].fontSize;
}
/**
 * Retrieves the line-height from a TypeRamp ID
 */
export function getLineHeight(key) {
    return typeRamp[sanitizeTypeRampId(key)].lineHeight;
}
/**
 * Retrieves the formatted font-size from a TypeRamp ID
 */
export function applyFontSize(key) {
    return toPx(getFontSize(key));
}
/**
 * Retrieves the formatted line-height from a TypeRamp ID
 */
export function applyLineHeight(key) {
    return toPx(getLineHeight(key));
}
/**
 * Retrieves the font-size from a TypeRamp ID, scaled with the design-system density
 */
export function getScaledFontSize(key) {
    return (designSystem) => {
        return getFontSize(scaleTypeRampId(key)(designSystem));
    };
}
/**
 * Retrieves the line-height from a TypeRamp ID, scaled with the design-system density
 */
export function getScaledLineHeight(key) {
    return (designSystem) => {
        return getLineHeight(scaleTypeRampId(key)(designSystem));
    };
}
/**
 * Retrieves the formatted font-size from a TypeRamp ID, scaled with the design-system density
 */
export function applyScaledFontSize(key) {
    return (designSystem) => {
        return applyFontSize(scaleTypeRampId(key)(designSystem));
    };
}
/**
 * Retrieves the formatted line-height from a TypeRamp ID, scaled with the design-system density
 */
export function applyScaledLineHeight(key) {
    return (designSystem) => applyLineHeight(scaleTypeRampId(key)(designSystem));
}
function applyTypeRampFactory(fontSizeGetter, lineHeightGetter) {
    return (key) => ({
        "font-size": fontSizeGetter(key),
        "line-height": lineHeightGetter(key),
    });
}
/**
 * Applies font size and line-height properties from the typeramp
 */
export const applyTypeRamp = applyTypeRampFactory(applyFontSize, applyLineHeight);
/**
 * Applies font size and line-height from the type ramp, scaled with design system density
 */
export const applyScaledTypeRamp = applyTypeRampFactory(applyScaledFontSize, applyScaledLineHeight);
/**
 * Takes a param of type ramp key (string) and returns a type ramp configuration
 * @deprecated - please use applyTypeRamp
 */
export const applyTypeRampConfig = applyTypeRamp;
