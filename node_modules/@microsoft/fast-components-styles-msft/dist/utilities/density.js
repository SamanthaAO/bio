import { checkDesignSystemResolver, } from "../design-system";
import { getDesignSystemValue } from "../utilities/design-system";
import { toPx, toUnit } from "@microsoft/fast-jss-utilities";
import { baseHeightMultiplier, baseHorizontalSpacingMultiplier, designUnit, } from "../utilities/design-system";
export var DensityCategory;
(function (DensityCategory) {
    DensityCategory["compact"] = "compact";
    DensityCategory["normal"] = "normal";
    DensityCategory["spacious"] = "spacious";
})(DensityCategory || (DensityCategory = {}));
/**
 * Returns the component height formatted in the provided unit or px by default.
 *
 * @param lines The logical number of lines the component takes, typically 1.
 * @param unit The unit of measurement; px by default.
 */
export function height(lines = 1, unit) {
    return (designSystem) => toUnit(unit)(heightNumber(lines)(designSystem));
}
/**
 * Returns the component height as a number.
 *
 * @param lines The logical number of lines the component takes, typically 1.
 */
export function heightNumber(lines = 1) {
    return (designSystem) => {
        return ((baseHeightMultiplier(designSystem) +
            getDesignSystemValue("density")(designSystem)) *
            designUnit(designSystem) *
            lines);
    };
}
/**
 * Returns the higher-level category for the density setting.
 *
 * @param designSystem The design system config.
 */
export function getDensityCategory(designSystem) {
    const densityValue = getDesignSystemValue("density")(designSystem);
    return densityValue >= 2
        ? DensityCategory.spacious
        : densityValue <= -2
            ? DensityCategory.compact
            : DensityCategory.normal;
}
/**
 * Returns a value based on the higher-level category for the density setting.
 * Used to adjust things like type size and sizing that is based on the category rather than individual density.
 *
 * @param compactValue The adjustment when the category is "compact"
 * @param normalValue The adjustment when the category is "normal"
 * @param spaciousValue The adjustment when the category is "spacious"
 */
export function densityCategorySwitch(compactValue, normalValue, spaciousValue) {
    return (designSystem) => {
        const category = getDensityCategory(designSystem);
        return checkDesignSystemResolver(category === DensityCategory.compact
            ? compactValue
            : category === DensityCategory.spacious
                ? spaciousValue
                : normalValue, designSystem);
    };
}
/**
 * Returns the standard horizontal spacing for text and icons formatted in the provided unit or px by default.
 *
 * @param adjustment Any border that should be removed from the overall content spacing.
 * @param unit The unit of measurement; px by default.
 */
export function horizontalSpacing(adjustment = 0, unit) {
    return (designSystem) => {
        return toUnit(unit)(horizontalSpacingNumber(checkDesignSystemResolver(adjustment, designSystem))(designSystem));
    };
}
/**
 * Returns the standard horizontal spacing for text and icons as a number.
 *
 * @param adjustment Any border that should be removed from the overall content spacing.
 */
export function horizontalSpacingNumber(adjustment = 0) {
    return (designSystem) => {
        return ((baseHorizontalSpacingMultiplier(designSystem) +
            densityCategorySwitch(-1, 0, 1)(designSystem)) *
            designUnit(designSystem) -
            adjustment);
    };
}
export function glyphSize(arg) {
    return typeof arg === "string"
        ? (designSystem) => toUnit(arg)(glyphSizeNumber(designSystem))
        : toPx(glyphSizeNumber(arg));
}
/**
 * Returns the width and height for an icon as a number.
 */
export function glyphSizeNumber(designSystem) {
    const halfDesignUnit = designUnit(designSystem) / 2;
    const sizeOffset = densityCategorySwitch(halfDesignUnit * -1, 0, halfDesignUnit)(designSystem);
    return ((baseHeightMultiplier(designSystem) / 2) * designUnit(designSystem) + sizeOffset);
}
/**
 * @deprecated Use height instead.
 * @param value
 * @param unit
 */
export function density(value, unit) {
    return (config) => toUnit(unit)(value * 1);
}
