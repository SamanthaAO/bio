import { applyFocusVisible, directionSwitch, format, subtract, toPx, } from "@microsoft/fast-jss-utilities";
import { applyCornerRadius, applyFocusPlaceholderBorder } from "../utilities/border";
import { accentFillActive, accentFillHover, accentFillRest, accentForegroundActive, accentForegroundCut, accentForegroundHover, accentForegroundRest, neutralFillActive, neutralFillHover, neutralFillRest, neutralFillStealthActive, neutralFillStealthHover, neutralFillStealthRest, neutralFocus, neutralFocusInnerAccent, neutralForegroundRest, neutralOutlineActive, neutralOutlineHover, neutralOutlineRest, } from "../utilities/color";
import { applyCursorPointer } from "../utilities/cursor";
import { glyphSize, height, horizontalSpacing } from "../utilities/density";
import { focusOutlineWidth, getDesignSystemValue, outlineWidth, } from "../utilities/design-system";
import { applyDisabledState } from "../utilities/disabled";
import { highContrastAccent, HighContrastColor, highContrastDisabledBorder, highContrastDisabledForeground, highContrastDoubleFocus, highContrastHighlightBackground, highContrastHighlightForeground, highContrastLinkBorder, highContrastLinkForeground, highContrastLinkOutline, highContrastLinkValue, highContrastOutline, highContrastOutlineFocus, highContrastSelected, highContrastSelectedForeground, highContrastSelectedOutline, highContrastSelector, highContrastStealth, } from "../utilities/high-contrast";
import { applyScaledTypeRamp } from "../utilities/typography";
const transparentBackground = {
    "background-color": "transparent",
};
const density = getDesignSystemValue("density");
const applyTransparentBackplateStyles = Object.assign({ color: accentForegroundRest, fill: accentForegroundRest }, transparentBackground, applyFocusVisible(Object.assign({ "border-color": "transparent", "box-shadow": "none" }, highContrastHighlightForeground, { "& $button_contentRegion::before": Object.assign({ background: neutralForegroundRest, height: toPx(focusOutlineWidth) }, highContrastHighlightBackground) })), { 
    // Underline
    "& $button_contentRegion::before": {
        [highContrastSelector]: {
            background: HighContrastColor.buttonText,
        },
    }, "&:hover $button_contentRegion::before": Object.assign({ background: accentForegroundHover }, highContrastHighlightBackground), "&:hover$button__disabled $button_contentRegion::before": {
        display: "none",
    }, "&:active $button_contentRegion::before": {
        background: accentForegroundActive,
    }, "&$button__disabled, &$button__disabled $button_contentRegion::before": Object.assign({}, transparentBackground), "&:hover:enabled": Object.assign({ color: accentForegroundHover }, transparentBackground, highContrastHighlightForeground, { "& $button_beforeContent, & $button_afterContent": Object.assign({ fill: accentForegroundHover }, highContrastHighlightForeground) }), "&:active:enabled": Object.assign({ color: accentForegroundActive, fill: accentForegroundActive }, transparentBackground) }, highContrastStealth);
const styles = {
    button: Object.assign({}, applyScaledTypeRamp("t7"), { "font-family": "inherit" }, applyCursorPointer(), { "box-sizing": "border-box", "max-width": "374px", "min-width": (designSystem) => density(designSystem) <= -2 ? "28px" : "32px", padding: format("0 {0}", horizontalSpacing(focusOutlineWidth)), display: "inline-flex", "justify-content": "center", "align-items": "center", height: height() }, applyFocusPlaceholderBorder(), applyCornerRadius(), { "line-height": "1", overflow: "hidden", "text-decoration": "none", "white-space": "nowrap", transition: "all 0.1s ease-in-out", color: neutralForegroundRest, fill: neutralForegroundRest, background: neutralFillRest, "&:hover:enabled": Object.assign({ background: neutralFillHover }, highContrastSelected, { "& $button_beforeContent, & $button_afterContent": Object.assign({}, highContrastSelectedForeground) }), "&:active:enabled": {
            background: neutralFillActive,
        } }, applyFocusVisible(Object.assign({}, highContrastOutlineFocus, { "border-color": neutralFocus })), { "&:disabled": Object.assign({}, highContrastDisabledBorder), "&::-moz-focus-inner": {
            border: "0",
        } }, highContrastOutline, { "a&": Object.assign({}, highContrastLinkOutline, { "&:hover": Object.assign({}, highContrastLinkBorder), "&$button__disabled": Object.assign({}, highContrastDisabledBorder, { "&:hover": {
                    [highContrastSelector]: {
                        "box-shadow": "none !important",
                    },
                } }) }) }),
    button__primary: Object.assign({ color: accentForegroundCut, fill: accentForegroundCut, background: accentFillRest, "&:hover:enabled": Object.assign({ background: accentFillHover }, highContrastSelectedOutline), "&:active:enabled": {
            background: accentFillActive,
        } }, applyFocusVisible(Object.assign({ "border-color": neutralFocus, "box-shadow": format("0 0 0 {0} inset {1}", toPx(focusOutlineWidth), neutralFocusInnerAccent(accentFillRest)) }, highContrastDoubleFocus)), { "& $button_beforeContent, & $button_afterContent": {
            fill: accentForegroundCut,
        } }, highContrastAccent, { "a&": {
            "& $button_beforeContent, & $button_afterContent": Object.assign({}, highContrastLinkForeground),
        } }),
    button__outline: Object.assign({ background: "transparent", border: format("{0} solid {1}", toPx(outlineWidth), neutralOutlineRest), padding: format("0 {0}", horizontalSpacing(outlineWidth)), "&:hover:enabled": Object.assign({ background: "transparent", border: format("{0} solid {1}", toPx(outlineWidth), neutralOutlineHover) }, highContrastSelected), "&:active:enabled": {
            background: "transparent",
            border: format("{0} solid {1}", toPx(outlineWidth), neutralOutlineActive),
        } }, applyFocusVisible(Object.assign({}, highContrastOutlineFocus, { "box-shadow": format("0 0 0 {0} {1} inset", toPx(subtract(focusOutlineWidth, outlineWidth)), neutralFocus), "border-color": neutralFocus })), highContrastOutline),
    button__lightweight: Object.assign({}, applyTransparentBackplateStyles, { "a&": {
            "&:hover": {
                [highContrastSelector]: {
                    "box-shadow": "none !important",
                },
                "& $button_contentRegion::before": {
                    background: highContrastLinkValue,
                },
            },
            "&$button__disabled": Object.assign({}, highContrastDisabledBorder),
            "& $button_contentRegion::before": {
                [highContrastSelector]: {
                    background: "transparent",
                },
            },
        } }),
    button__justified: Object.assign({}, applyTransparentBackplateStyles, { "min-width": "74px", "padding-left": "0", "padding-right": "0", "border-width": "0", "justify-content": "flex-start", "a&": {
            "&:hover": {
                [highContrastSelector]: {
                    "box-shadow": "none !important",
                },
                "& $button_contentRegion::before": {
                    background: highContrastLinkValue,
                },
            },
            "&$button__disabled": Object.assign({}, highContrastDisabledBorder),
        } }),
    button__stealth: Object.assign({ background: neutralFillStealthRest, "&:hover:enabled": Object.assign({ "background-color": neutralFillStealthHover }, highContrastSelected), "&:active:enabled": {
            "background-color": neutralFillStealthActive,
        } }, applyFocusVisible(Object.assign({}, highContrastOutlineFocus, { "border-color": neutralFocus })), highContrastStealth),
    button_contentRegion: {
        position: "relative",
        "&::before": {
            content: "''",
            display: "block",
            height: toPx(outlineWidth),
            position: "absolute",
            bottom: "-3px",
            width: "100%",
            left: directionSwitch("0", ""),
            right: directionSwitch("", "0"),
        },
        "& svg": {
            width: glyphSize,
            height: glyphSize,
        },
    },
    button__disabled: Object.assign({}, applyDisabledState(), highContrastDisabledBorder, { "& $button_beforeContent, & $button_afterContent": Object.assign({}, highContrastDisabledForeground) }),
    button_beforeContent: {
        width: glyphSize,
        height: glyphSize,
        "margin-right": directionSwitch(horizontalSpacing(), ""),
        "margin-left": directionSwitch("", horizontalSpacing()),
    },
    button_afterContent: {
        width: glyphSize,
        height: glyphSize,
        "margin-right": directionSwitch("", horizontalSpacing()),
        "margin-left": directionSwitch(horizontalSpacing(), ""),
    },
};
export default styles;
